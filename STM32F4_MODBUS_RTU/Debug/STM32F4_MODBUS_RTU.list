
STM32F4_MODBUS_RTU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007580  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  08007710  08007710  00017710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ae0  08007ae0  000200f8  2**0
                  CONTENTS
  4 .ARM          00000008  08007ae0  08007ae0  00017ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ae8  08007ae8  000200f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ae8  08007ae8  00017ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007aec  08007aec  00017aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  08007af0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200f8  2**0
                  CONTENTS
 10 .bss          00005cd0  200000f8  200000f8  000200f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005dc8  20005dc8  000200f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000182a8  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f41  00000000  00000000  000383d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001520  00000000  00000000  0003c318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001328  00000000  00000000  0003d838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000261c7  00000000  00000000  0003eb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c4ae  00000000  00000000  00064d27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7d29  00000000  00000000  000811d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00158efe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005dc0  00000000  00000000  00158f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f8 	.word	0x200000f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080076f8 	.word	0x080076f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000fc 	.word	0x200000fc
 80001cc:	080076f8 	.word	0x080076f8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000584:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <vApplicationGetIdleTaskMemory+0x30>)
 800058a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2280      	movs	r2, #128	; 0x80
 8000590:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000592:	bf00      	nop
 8000594:	3714      	adds	r7, #20
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000114 	.word	0x20000114
 80005a4:	20000168 	.word	0x20000168

080005a8 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 80005a8:	b5b0      	push	{r4, r5, r7, lr}
 80005aa:	b088      	sub	sp, #32
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ae:	f000 ff73 	bl	8001498 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f81f 	bl	80005f4 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f000 f8e5 	bl	8000784 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ba:	f000 f8b9 	bl	8000730 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 80005be:	f000 f889 	bl	80006d4 <MX_TIM7_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005c2:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <main+0x44>)
 80005c4:	1d3c      	adds	r4, r7, #4
 80005c6:	461d      	mov	r5, r3
 80005c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f003 fb62 	bl	8003ca2 <osThreadCreate>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a03      	ldr	r2, [pc, #12]	; (80005f0 <main+0x48>)
 80005e2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
 

  /* Start scheduler */
  osKernelStart();
 80005e4:	f003 fb56 	bl	8003c94 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <main+0x40>
 80005ea:	bf00      	nop
 80005ec:	08007740 	.word	0x08007740
 80005f0:	200003f4 	.word	0x200003f4

080005f4 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	; 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	4b32      	ldr	r3, [pc, #200]	; (80006c8 <SystemClock_Config+0xd4>)
 8000600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000602:	4a31      	ldr	r2, [pc, #196]	; (80006c8 <SystemClock_Config+0xd4>)
 8000604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000608:	6413      	str	r3, [r2, #64]	; 0x40
 800060a:	4b2f      	ldr	r3, [pc, #188]	; (80006c8 <SystemClock_Config+0xd4>)
 800060c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	4b2c      	ldr	r3, [pc, #176]	; (80006cc <SystemClock_Config+0xd8>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a2b      	ldr	r2, [pc, #172]	; (80006cc <SystemClock_Config+0xd8>)
 8000620:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000624:	6013      	str	r3, [r2, #0]
 8000626:	4b29      	ldr	r3, [pc, #164]	; (80006cc <SystemClock_Config+0xd8>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000632:	2301      	movs	r3, #1
 8000634:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000636:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800063a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063c:	2302      	movs	r3, #2
 800063e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000640:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000644:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000646:	2304      	movs	r3, #4
 8000648:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800064a:	23a8      	movs	r3, #168	; 0xa8
 800064c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064e:	2302      	movs	r3, #2
 8000650:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000652:	2307      	movs	r3, #7
 8000654:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	4618      	mov	r0, r3
 800065c:	f001 fad4 	bl	8001c08 <HAL_RCC_OscConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000666:	f000 fa21 	bl	8000aac <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066a:	230f      	movs	r3, #15
 800066c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066e:	2302      	movs	r3, #2
 8000670:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000676:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800067a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800067c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000680:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	2105      	movs	r1, #5
 8000688:	4618      	mov	r0, r3
 800068a:	f001 fd35 	bl	80020f8 <HAL_RCC_ClockConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000694:	f000 fa0a 	bl	8000aac <Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000698:	f001 ff1a 	bl	80024d0 <HAL_RCC_GetHCLKFreq>
 800069c:	4603      	mov	r3, r0
 800069e:	4a0c      	ldr	r2, [pc, #48]	; (80006d0 <SystemClock_Config+0xdc>)
 80006a0:	fba2 2303 	umull	r2, r3, r2, r3
 80006a4:	099b      	lsrs	r3, r3, #6
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 f83d 	bl	8001726 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80006ac:	2004      	movs	r0, #4
 80006ae:	f001 f847 	bl	8001740 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	210f      	movs	r1, #15
 80006b6:	f04f 30ff 	mov.w	r0, #4294967295
 80006ba:	f001 f80a 	bl	80016d2 <HAL_NVIC_SetPriority>
}
 80006be:	bf00      	nop
 80006c0:	3750      	adds	r7, #80	; 0x50
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000
 80006d0:	10624dd3 	.word	0x10624dd3

080006d4 <MX_TIM7_Init>:

/* TIM7 init function */
static void MX_TIM7_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig;

  htim7.Instance = TIM7;
 80006da:	4b13      	ldr	r3, [pc, #76]	; (8000728 <MX_TIM7_Init+0x54>)
 80006dc:	4a13      	ldr	r2, [pc, #76]	; (800072c <MX_TIM7_Init+0x58>)
 80006de:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_TIM7_Init+0x54>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_TIM7_Init+0x54>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0;
 80006ec:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_TIM7_Init+0x54>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80006f2:	480d      	ldr	r0, [pc, #52]	; (8000728 <MX_TIM7_Init+0x54>)
 80006f4:	f001 ff52 	bl	800259c <HAL_TIM_Base_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_TIM7_Init+0x2e>
  {
    Error_Handler();
 80006fe:	f000 f9d5 	bl	8000aac <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000702:	2320      	movs	r3, #32
 8000704:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800070a:	463b      	mov	r3, r7
 800070c:	4619      	mov	r1, r3
 800070e:	4806      	ldr	r0, [pc, #24]	; (8000728 <MX_TIM7_Init+0x54>)
 8000710:	f002 fa04 	bl	8002b1c <HAL_TIMEx_MasterConfigSynchronization>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_TIM7_Init+0x4a>
  {
    Error_Handler();
 800071a:	f000 f9c7 	bl	8000aac <Error_Handler>
  }

}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000368 	.word	0x20000368
 800072c:	40001400 	.word	0x40001400

08000730 <MX_USART2_UART_Init>:

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000736:	4a12      	ldr	r2, [pc, #72]	; (8000780 <MX_USART2_UART_Init+0x50>)
 8000738:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <MX_USART2_UART_Init+0x4c>)
 800073c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000740:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_USART2_UART_Init+0x4c>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000756:	220c      	movs	r2, #12
 8000758:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <MX_USART2_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000768:	f002 fa68 	bl	8002c3c <HAL_UART_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000772:	f000 f99b 	bl	8000aac <Error_Handler>
  }

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200003b0 	.word	0x200003b0
 8000780:	40004400 	.word	0x40004400

08000784 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
static void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08c      	sub	sp, #48	; 0x30
 8000788:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]
 800078e:	4ba2      	ldr	r3, [pc, #648]	; (8000a18 <MX_GPIO_Init+0x294>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4aa1      	ldr	r2, [pc, #644]	; (8000a18 <MX_GPIO_Init+0x294>)
 8000794:	f043 0310 	orr.w	r3, r3, #16
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b9f      	ldr	r3, [pc, #636]	; (8000a18 <MX_GPIO_Init+0x294>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0310 	and.w	r3, r3, #16
 80007a2:	61bb      	str	r3, [r7, #24]
 80007a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
 80007aa:	4b9b      	ldr	r3, [pc, #620]	; (8000a18 <MX_GPIO_Init+0x294>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a9a      	ldr	r2, [pc, #616]	; (8000a18 <MX_GPIO_Init+0x294>)
 80007b0:	f043 0304 	orr.w	r3, r3, #4
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b98      	ldr	r3, [pc, #608]	; (8000a18 <MX_GPIO_Init+0x294>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	617b      	str	r3, [r7, #20]
 80007c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	4b94      	ldr	r3, [pc, #592]	; (8000a18 <MX_GPIO_Init+0x294>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a93      	ldr	r2, [pc, #588]	; (8000a18 <MX_GPIO_Init+0x294>)
 80007cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b91      	ldr	r3, [pc, #580]	; (8000a18 <MX_GPIO_Init+0x294>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	4b8d      	ldr	r3, [pc, #564]	; (8000a18 <MX_GPIO_Init+0x294>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a8c      	ldr	r2, [pc, #560]	; (8000a18 <MX_GPIO_Init+0x294>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b8a      	ldr	r3, [pc, #552]	; (8000a18 <MX_GPIO_Init+0x294>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	4b86      	ldr	r3, [pc, #536]	; (8000a18 <MX_GPIO_Init+0x294>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a85      	ldr	r2, [pc, #532]	; (8000a18 <MX_GPIO_Init+0x294>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b83      	ldr	r3, [pc, #524]	; (8000a18 <MX_GPIO_Init+0x294>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b7f      	ldr	r3, [pc, #508]	; (8000a18 <MX_GPIO_Init+0x294>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a7e      	ldr	r2, [pc, #504]	; (8000a18 <MX_GPIO_Init+0x294>)
 8000820:	f043 0308 	orr.w	r3, r3, #8
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b7c      	ldr	r3, [pc, #496]	; (8000a18 <MX_GPIO_Init+0x294>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0308 	and.w	r3, r3, #8
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2108      	movs	r1, #8
 8000836:	4879      	ldr	r0, [pc, #484]	; (8000a1c <MX_GPIO_Init+0x298>)
 8000838:	f001 f9cc 	bl	8001bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800083c:	2201      	movs	r2, #1
 800083e:	2101      	movs	r1, #1
 8000840:	4877      	ldr	r0, [pc, #476]	; (8000a20 <MX_GPIO_Init+0x29c>)
 8000842:	f001 f9c7 	bl	8001bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000846:	2200      	movs	r2, #0
 8000848:	f24f 0110 	movw	r1, #61456	; 0xf010
 800084c:	4875      	ldr	r0, [pc, #468]	; (8000a24 <MX_GPIO_Init+0x2a0>)
 800084e:	f001 f9c1 	bl	8001bd4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000852:	2308      	movs	r3, #8
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	486c      	ldr	r0, [pc, #432]	; (8000a1c <MX_GPIO_Init+0x298>)
 800086a:	f001 f817 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800086e:	2301      	movs	r3, #1
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	4866      	ldr	r0, [pc, #408]	; (8000a20 <MX_GPIO_Init+0x29c>)
 8000886:	f001 f809 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800088a:	2308      	movs	r3, #8
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800089a:	2305      	movs	r3, #5
 800089c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	485e      	ldr	r0, [pc, #376]	; (8000a20 <MX_GPIO_Init+0x29c>)
 80008a6:	f000 fff9 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008aa:	2301      	movs	r3, #1
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008ae:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	485a      	ldr	r0, [pc, #360]	; (8000a28 <MX_GPIO_Init+0x2a4>)
 80008c0:	f000 ffec 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008c4:	2310      	movs	r3, #16
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c8:	2302      	movs	r3, #2
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008d4:	2306      	movs	r3, #6
 80008d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	4852      	ldr	r0, [pc, #328]	; (8000a28 <MX_GPIO_Init+0x2a4>)
 80008e0:	f000 ffdc 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008e4:	23e0      	movs	r3, #224	; 0xe0
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e8:	2302      	movs	r3, #2
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008f4:	2305      	movs	r3, #5
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	484a      	ldr	r0, [pc, #296]	; (8000a28 <MX_GPIO_Init+0x2a4>)
 8000900:	f000 ffcc 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000904:	2304      	movs	r3, #4
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000908:	2300      	movs	r3, #0
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	4845      	ldr	r0, [pc, #276]	; (8000a2c <MX_GPIO_Init+0x2a8>)
 8000918:	f000 ffc0 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800091c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800092e:	2305      	movs	r3, #5
 8000930:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	483c      	ldr	r0, [pc, #240]	; (8000a2c <MX_GPIO_Init+0x2a8>)
 800093a:	f000 ffaf 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800093e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000942:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	2301      	movs	r3, #1
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	4833      	ldr	r0, [pc, #204]	; (8000a24 <MX_GPIO_Init+0x2a0>)
 8000958:	f000 ffa0 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800095c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800096e:	2306      	movs	r3, #6
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4829      	ldr	r0, [pc, #164]	; (8000a20 <MX_GPIO_Init+0x29c>)
 800097a:	f000 ff8f 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800097e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000984:	2300      	movs	r3, #0
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	4825      	ldr	r0, [pc, #148]	; (8000a28 <MX_GPIO_Init+0x2a4>)
 8000994:	f000 ff82 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000998:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009aa:	230a      	movs	r3, #10
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	481c      	ldr	r0, [pc, #112]	; (8000a28 <MX_GPIO_Init+0x2a4>)
 80009b6:	f000 ff71 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009ba:	2320      	movs	r3, #32
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009be:	2300      	movs	r3, #0
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4815      	ldr	r0, [pc, #84]	; (8000a24 <MX_GPIO_Init+0x2a0>)
 80009ce:	f000 ff65 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009d2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d8:	2312      	movs	r3, #18
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009dc:	2301      	movs	r3, #1
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009e4:	2304      	movs	r3, #4
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	4619      	mov	r1, r3
 80009ee:	480f      	ldr	r0, [pc, #60]	; (8000a2c <MX_GPIO_Init+0x2a8>)
 80009f0:	f000 ff54 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009f4:	2302      	movs	r3, #2
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	4804      	ldr	r0, [pc, #16]	; (8000a1c <MX_GPIO_Init+0x298>)
 8000a0a:	f000 ff47 	bl	800189c <HAL_GPIO_Init>

}
 8000a0e:	bf00      	nop
 8000a10:	3730      	adds	r7, #48	; 0x30
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	40020800 	.word	0x40020800
 8000a24:	40020c00 	.word	0x40020c00
 8000a28:	40020000 	.word	0x40020000
 8000a2c:	40020400 	.word	0x40020400

08000a30 <StartDefaultTask>:

/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8000a30:	b5b0      	push	{r4, r5, r7, lr}
 8000a32:	b090      	sub	sp, #64	; 0x40
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
	osThreadDef(ModbusRTUTask, ModbusRTUTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <StartDefaultTask+0x50>)
 8000a3a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000a3e:	461d      	mov	r5, r3
 8000a40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate(osThread(ModbusRTUTask), NULL); 
 8000a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f003 f925 	bl	8003ca2 <osThreadCreate>

	osThreadDef(ModbusRTU_UserTask, ModbusRTU_UserTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 8000a58:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <StartDefaultTask+0x54>)
 8000a5a:	f107 0408 	add.w	r4, r7, #8
 8000a5e:	461d      	mov	r5, r3
 8000a60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a64:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
osThreadCreate(osThread(ModbusRTU_UserTask), NULL);
 8000a6c:	f107 0308 	add.w	r3, r7, #8
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f003 f915 	bl	8003ca2 <osThreadCreate>
	
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a78:	2001      	movs	r0, #1
 8000a7a:	f003 f95e 	bl	8003d3a <osDelay>
 8000a7e:	e7fb      	b.n	8000a78 <StartDefaultTask+0x48>
 8000a80:	0800775c 	.word	0x0800775c
 8000a84:	08007778 	.word	0x08007778

08000a88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d101      	bne.n	8000a9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a9a:	f000 fd1f 	bl	80014dc <HAL_IncTick>
  }
/* USER CODE BEGIN Callback 1 */

/* USER CODE END Callback 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40001000 	.word	0x40001000

08000aac <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 8000ab0:	e7fe      	b.n	8000ab0 <Error_Handler+0x4>

08000ab2 <ModbusRTUTask>:
static USHORT usRegInputBuf[REG_INPUT_NREGS];
#endif


void ModbusRTUTask(void const * argument)
{ 
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
  
  eMBMasterInit(MB_RTU, 2, 19200,  MB_PAR_NONE);
 8000aba:	2300      	movs	r3, #0
 8000abc:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000ac0:	2102      	movs	r1, #2
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f004 ffd8 	bl	8005a78 <eMBMasterInit>
  eMBMasterEnable();
 8000ac8:	f005 f83e 	bl	8005b48 <eMBMasterEnable>
	  //* @param usCoilData data to be written
	  //* @param lTimeOut timeout (-1 will waiting forever)
	  	//eMBMasterReqWriteCoil(1,8,0xFF00,-1 );


		eMBMasterPoll();
 8000acc:	f005 f858 	bl	8005b80 <eMBMasterPoll>
 8000ad0:	e7fc      	b.n	8000acc <ModbusRTUTask+0x1a>

08000ad2 <ModbusRTU_UserTask>:
  }
}

void ModbusRTU_UserTask(void const * argument)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b084      	sub	sp, #16
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]

  eMBMasterInit(MB_RTU, 2, 19200,  MB_PAR_NONE);
 8000ada:	2300      	movs	r3, #0
 8000adc:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000ae0:	2102      	movs	r1, #2
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f004 ffc8 	bl	8005a78 <eMBMasterInit>
  eMBMasterEnable();
 8000ae8:	f005 f82e 	bl	8005b48 <eMBMasterEnable>

  while(1) {

	  eMBMasterReqErrCode  errorCode = MB_MRE_NO_ERR;
 8000aec:	2300      	movs	r3, #0
 8000aee:	73fb      	strb	r3, [r7, #15]
	  //* @param ucSndAddr salve address
	  //* @param usCoilAddr coil start address
	  //* @param usCoilData data to be written
	  //* @param lTimeOut timeout (-1 will waiting forever)
	  errorCode = eMBMasterReqWriteCoil(1,2,0xFF00,-1 );
 8000af0:	f04f 33ff 	mov.w	r3, #4294967295
 8000af4:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8000af8:	2102      	movs	r1, #2
 8000afa:	2001      	movs	r0, #1
 8000afc:	f004 fb91 	bl	8005222 <eMBMasterReqWriteCoil>
 8000b00:	4603      	mov	r3, r0
 8000b02:	73fb      	strb	r3, [r7, #15]

	  osDelay(500);
 8000b04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b08:	f003 f917 	bl	8003d3a <osDelay>

	  errorCode = eMBMasterReqWriteCoil(1,8,0xFF00,-1 );
 8000b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b10:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8000b14:	2108      	movs	r1, #8
 8000b16:	2001      	movs	r0, #1
 8000b18:	f004 fb83 	bl	8005222 <eMBMasterReqWriteCoil>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	73fb      	strb	r3, [r7, #15]

	  osDelay(500);
 8000b20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b24:	f003 f909 	bl	8003d3a <osDelay>

	  errorCode = eMBMasterReqWriteCoil(1,2,0x0000,-1 );
 8000b28:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2102      	movs	r1, #2
 8000b30:	2001      	movs	r0, #1
 8000b32:	f004 fb76 	bl	8005222 <eMBMasterReqWriteCoil>
 8000b36:	4603      	mov	r3, r0
 8000b38:	73fb      	strb	r3, [r7, #15]

	  osDelay(500);
 8000b3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b3e:	f003 f8fc 	bl	8003d3a <osDelay>

	  errorCode = eMBMasterReqWriteCoil(1,8,0x0000,-1 );
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
 8000b46:	2200      	movs	r2, #0
 8000b48:	2108      	movs	r1, #8
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	f004 fb69 	bl	8005222 <eMBMasterReqWriteCoil>
 8000b50:	4603      	mov	r3, r0
 8000b52:	73fb      	strb	r3, [r7, #15]

	  osDelay(500);
 8000b54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b58:	f003 f8ef 	bl	8003d3a <osDelay>
  while(1) {
 8000b5c:	e7c6      	b.n	8000aec <ModbusRTU_UserTask+0x1a>
	...

08000b60 <eMBMasterRegInputCB>:
 * @param usNRegs input register number
 *
 * @return result
 */
eMBErrorCode eMBMasterRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	807b      	strh	r3, [r7, #2]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	803b      	strh	r3, [r7, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8000b70:	2300      	movs	r3, #0
 8000b72:	75fb      	strb	r3, [r7, #23]
    USHORT *        pusRegInputBuf;
    USHORT          REG_INPUT_START;
    USHORT          REG_INPUT_NREGS;
    USHORT          usRegInStart;

    pusRegInputBuf = usMRegInBuf[ucMBMasterGetDestAddress() - 1];
 8000b74:	f005 f962 	bl	8005e3c <ucMBMasterGetDestAddress>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	22c8      	movs	r2, #200	; 0xc8
 8000b7e:	fb02 f303 	mul.w	r3, r2, r3
 8000b82:	4a26      	ldr	r2, [pc, #152]	; (8000c1c <eMBMasterRegInputCB+0xbc>)
 8000b84:	4413      	add	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
    REG_INPUT_START = M_REG_INPUT_START;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	81fb      	strh	r3, [r7, #14]
    REG_INPUT_NREGS = M_REG_INPUT_NREGS;
 8000b8c:	2364      	movs	r3, #100	; 0x64
 8000b8e:	81bb      	strh	r3, [r7, #12]
    usRegInStart = usMRegInStart;
 8000b90:	4b23      	ldr	r3, [pc, #140]	; (8000c20 <eMBMasterRegInputCB+0xc0>)
 8000b92:	881b      	ldrh	r3, [r3, #0]
 8000b94:	817b      	strh	r3, [r7, #10]

    /* it already plus one in modbus function method. */
    usAddress--;
 8000b96:	887b      	ldrh	r3, [r7, #2]
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	807b      	strh	r3, [r7, #2]

    if ((usAddress >= REG_INPUT_START)
 8000b9c:	887a      	ldrh	r2, [r7, #2]
 8000b9e:	89fb      	ldrh	r3, [r7, #14]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d333      	bcc.n	8000c0c <eMBMasterRegInputCB+0xac>
            && (usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS))
 8000ba4:	887a      	ldrh	r2, [r7, #2]
 8000ba6:	883b      	ldrh	r3, [r7, #0]
 8000ba8:	441a      	add	r2, r3
 8000baa:	89f9      	ldrh	r1, [r7, #14]
 8000bac:	89bb      	ldrh	r3, [r7, #12]
 8000bae:	440b      	add	r3, r1
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	dc2b      	bgt.n	8000c0c <eMBMasterRegInputCB+0xac>
    {
        iRegIndex = usAddress - usRegInStart;
 8000bb4:	887a      	ldrh	r2, [r7, #2]
 8000bb6:	897b      	ldrh	r3, [r7, #10]
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	82bb      	strh	r3, [r7, #20]
        while (usNRegs > 0)
 8000bbc:	e022      	b.n	8000c04 <eMBMasterRegInputCB+0xa4>
        {
            pusRegInputBuf[iRegIndex] = *pucRegBuffer++ << 8;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	1c5a      	adds	r2, r3, #1
 8000bc2:	607a      	str	r2, [r7, #4]
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	8abb      	ldrh	r3, [r7, #20]
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	6939      	ldr	r1, [r7, #16]
 8000bce:	440b      	add	r3, r1
 8000bd0:	0212      	lsls	r2, r2, #8
 8000bd2:	b292      	uxth	r2, r2
 8000bd4:	801a      	strh	r2, [r3, #0]
            pusRegInputBuf[iRegIndex] |= *pucRegBuffer++;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	1c5a      	adds	r2, r3, #1
 8000bda:	607a      	str	r2, [r7, #4]
 8000bdc:	7818      	ldrb	r0, [r3, #0]
 8000bde:	8abb      	ldrh	r3, [r7, #20]
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4413      	add	r3, r2
 8000be6:	8819      	ldrh	r1, [r3, #0]
 8000be8:	b282      	uxth	r2, r0
 8000bea:	8abb      	ldrh	r3, [r7, #20]
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	6938      	ldr	r0, [r7, #16]
 8000bf0:	4403      	add	r3, r0
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	b292      	uxth	r2, r2
 8000bf6:	801a      	strh	r2, [r3, #0]
            iRegIndex++;
 8000bf8:	8abb      	ldrh	r3, [r7, #20]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	82bb      	strh	r3, [r7, #20]
            usNRegs--;
 8000bfe:	883b      	ldrh	r3, [r7, #0]
 8000c00:	3b01      	subs	r3, #1
 8000c02:	803b      	strh	r3, [r7, #0]
        while (usNRegs > 0)
 8000c04:	883b      	ldrh	r3, [r7, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d1d9      	bne.n	8000bbe <eMBMasterRegInputCB+0x5e>
    if ((usAddress >= REG_INPUT_START)
 8000c0a:	e001      	b.n	8000c10 <eMBMasterRegInputCB+0xb0>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	75fb      	strb	r3, [r7, #23]
    }

    return eStatus;
 8000c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200004a4 	.word	0x200004a4
 8000c20:	200004a0 	.word	0x200004a0

08000c24 <eMBMasterRegHoldingCB>:
 *
 * @return result
 */
eMBErrorCode eMBMasterRegHoldingCB(UCHAR * pucRegBuffer, USHORT usAddress,
        USHORT usNRegs, eMBRegisterMode eMode)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	4608      	mov	r0, r1
 8000c2e:	4611      	mov	r1, r2
 8000c30:	461a      	mov	r2, r3
 8000c32:	4603      	mov	r3, r0
 8000c34:	817b      	strh	r3, [r7, #10]
 8000c36:	460b      	mov	r3, r1
 8000c38:	813b      	strh	r3, [r7, #8]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	71fb      	strb	r3, [r7, #7]
    eMBErrorCode    eStatus = MB_ENOERR;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	77fb      	strb	r3, [r7, #31]
    USHORT *        pusRegHoldingBuf;
    USHORT          REG_HOLDING_START;
    USHORT          REG_HOLDING_NREGS;
    USHORT          usRegHoldStart;

    pusRegHoldingBuf = usMRegHoldBuf[ucMBMasterGetDestAddress() - 1];
 8000c42:	f005 f8fb 	bl	8005e3c <ucMBMasterGetDestAddress>
 8000c46:	4603      	mov	r3, r0
 8000c48:	3b01      	subs	r3, #1
 8000c4a:	22c8      	movs	r2, #200	; 0xc8
 8000c4c:	fb02 f303 	mul.w	r3, r2, r3
 8000c50:	4a39      	ldr	r2, [pc, #228]	; (8000d38 <eMBMasterRegHoldingCB+0x114>)
 8000c52:	4413      	add	r3, r2
 8000c54:	61bb      	str	r3, [r7, #24]
    REG_HOLDING_START = M_REG_HOLDING_START;
 8000c56:	2300      	movs	r3, #0
 8000c58:	82fb      	strh	r3, [r7, #22]
    REG_HOLDING_NREGS = M_REG_HOLDING_NREGS;
 8000c5a:	2364      	movs	r3, #100	; 0x64
 8000c5c:	82bb      	strh	r3, [r7, #20]
    usRegHoldStart = usMRegHoldStart;
 8000c5e:	4b37      	ldr	r3, [pc, #220]	; (8000d3c <eMBMasterRegHoldingCB+0x118>)
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	827b      	strh	r3, [r7, #18]
    /* if mode is read, the master will write the received date to buffer. */
    eMode = MB_REG_WRITE;
 8000c64:	2301      	movs	r3, #1
 8000c66:	71fb      	strb	r3, [r7, #7]

    /* it already plus one in modbus function method. */
    usAddress--;
 8000c68:	897b      	ldrh	r3, [r7, #10]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	817b      	strh	r3, [r7, #10]

    if ((usAddress >= REG_HOLDING_START)
 8000c6e:	897a      	ldrh	r2, [r7, #10]
 8000c70:	8afb      	ldrh	r3, [r7, #22]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d359      	bcc.n	8000d2a <eMBMasterRegHoldingCB+0x106>
            && (usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS))
 8000c76:	897a      	ldrh	r2, [r7, #10]
 8000c78:	893b      	ldrh	r3, [r7, #8]
 8000c7a:	441a      	add	r2, r3
 8000c7c:	8af9      	ldrh	r1, [r7, #22]
 8000c7e:	8abb      	ldrh	r3, [r7, #20]
 8000c80:	440b      	add	r3, r1
 8000c82:	429a      	cmp	r2, r3
 8000c84:	dc51      	bgt.n	8000d2a <eMBMasterRegHoldingCB+0x106>
    {
        iRegIndex = usAddress - usRegHoldStart;
 8000c86:	897a      	ldrh	r2, [r7, #10]
 8000c88:	8a7b      	ldrh	r3, [r7, #18]
 8000c8a:	1ad3      	subs	r3, r2, r3
 8000c8c:	83bb      	strh	r3, [r7, #28]
        switch (eMode)
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d01e      	beq.n	8000cd2 <eMBMasterRegHoldingCB+0xae>
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d043      	beq.n	8000d20 <eMBMasterRegHoldingCB+0xfc>
 8000c98:	e049      	b.n	8000d2e <eMBMasterRegHoldingCB+0x10a>
        {
        /* read current register values from the protocol stack. */
        case MB_REG_READ:
            while (usNRegs > 0)
            {
                *pucRegBuffer++ = (UCHAR) (pusRegHoldingBuf[iRegIndex] >> 8);
 8000c9a:	8bbb      	ldrh	r3, [r7, #28]
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	69ba      	ldr	r2, [r7, #24]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	881b      	ldrh	r3, [r3, #0]
 8000ca4:	0a1b      	lsrs	r3, r3, #8
 8000ca6:	b299      	uxth	r1, r3
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	1c5a      	adds	r2, r3, #1
 8000cac:	60fa      	str	r2, [r7, #12]
 8000cae:	b2ca      	uxtb	r2, r1
 8000cb0:	701a      	strb	r2, [r3, #0]
                *pucRegBuffer++ = (UCHAR) (pusRegHoldingBuf[iRegIndex] & 0xFF);
 8000cb2:	8bbb      	ldrh	r3, [r7, #28]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	69ba      	ldr	r2, [r7, #24]
 8000cb8:	4413      	add	r3, r2
 8000cba:	8819      	ldrh	r1, [r3, #0]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	1c5a      	adds	r2, r3, #1
 8000cc0:	60fa      	str	r2, [r7, #12]
 8000cc2:	b2ca      	uxtb	r2, r1
 8000cc4:	701a      	strb	r2, [r3, #0]
                iRegIndex++;
 8000cc6:	8bbb      	ldrh	r3, [r7, #28]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	83bb      	strh	r3, [r7, #28]
                usNRegs--;
 8000ccc:	893b      	ldrh	r3, [r7, #8]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	813b      	strh	r3, [r7, #8]
            while (usNRegs > 0)
 8000cd2:	893b      	ldrh	r3, [r7, #8]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d1e0      	bne.n	8000c9a <eMBMasterRegHoldingCB+0x76>
            }
            break;
 8000cd8:	e026      	b.n	8000d28 <eMBMasterRegHoldingCB+0x104>
        /* write current register values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (usNRegs > 0)
            {
                pusRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	1c5a      	adds	r2, r3, #1
 8000cde:	60fa      	str	r2, [r7, #12]
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	b29a      	uxth	r2, r3
 8000ce4:	8bbb      	ldrh	r3, [r7, #28]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	69b9      	ldr	r1, [r7, #24]
 8000cea:	440b      	add	r3, r1
 8000cec:	0212      	lsls	r2, r2, #8
 8000cee:	b292      	uxth	r2, r2
 8000cf0:	801a      	strh	r2, [r3, #0]
                pusRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	1c5a      	adds	r2, r3, #1
 8000cf6:	60fa      	str	r2, [r7, #12]
 8000cf8:	7818      	ldrb	r0, [r3, #0]
 8000cfa:	8bbb      	ldrh	r3, [r7, #28]
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	4413      	add	r3, r2
 8000d02:	8819      	ldrh	r1, [r3, #0]
 8000d04:	b282      	uxth	r2, r0
 8000d06:	8bbb      	ldrh	r3, [r7, #28]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	69b8      	ldr	r0, [r7, #24]
 8000d0c:	4403      	add	r3, r0
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	b292      	uxth	r2, r2
 8000d12:	801a      	strh	r2, [r3, #0]
                iRegIndex++;
 8000d14:	8bbb      	ldrh	r3, [r7, #28]
 8000d16:	3301      	adds	r3, #1
 8000d18:	83bb      	strh	r3, [r7, #28]
                usNRegs--;
 8000d1a:	893b      	ldrh	r3, [r7, #8]
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	813b      	strh	r3, [r7, #8]
            while (usNRegs > 0)
 8000d20:	893b      	ldrh	r3, [r7, #8]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d1d9      	bne.n	8000cda <eMBMasterRegHoldingCB+0xb6>
            }
            break;
 8000d26:	bf00      	nop
        switch (eMode)
 8000d28:	e001      	b.n	8000d2e <eMBMasterRegHoldingCB+0x10a>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	77fb      	strb	r3, [r7, #31]
    }
    return eStatus;
 8000d2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3720      	adds	r7, #32
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20001128 	.word	0x20001128
 8000d3c:	20001124 	.word	0x20001124

08000d40 <eMBMasterRegCoilsCB>:
 *
 * @return result
 */
eMBErrorCode eMBMasterRegCoilsCB(UCHAR * pucRegBuffer, USHORT usAddress,
        USHORT usNCoils, eMBRegisterMode eMode)
{
 8000d40:	b590      	push	{r4, r7, lr}
 8000d42:	b08b      	sub	sp, #44	; 0x2c
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	4608      	mov	r0, r1
 8000d4a:	4611      	mov	r1, r2
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4603      	mov	r3, r0
 8000d50:	817b      	strh	r3, [r7, #10]
 8000d52:	460b      	mov	r3, r1
 8000d54:	813b      	strh	r3, [r7, #8]
 8000d56:	4613      	mov	r3, r2
 8000d58:	71fb      	strb	r3, [r7, #7]
    eMBErrorCode    eStatus = MB_ENOERR;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    USHORT          iRegIndex , iRegBitIndex , iNReg;
    UCHAR *         pucCoilBuf;
    USHORT          COIL_START;
    USHORT          COIL_NCOILS;
    USHORT          usCoilStart;
    iNReg =  usNCoils / 8 + 1;
 8000d60:	893b      	ldrh	r3, [r7, #8]
 8000d62:	08db      	lsrs	r3, r3, #3
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	3301      	adds	r3, #1
 8000d68:	847b      	strh	r3, [r7, #34]	; 0x22

    pucCoilBuf = ucMCoilBuf[ucMBMasterGetDestAddress() - 1];
 8000d6a:	f005 f867 	bl	8005e3c <ucMBMasterGetDestAddress>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	3b01      	subs	r3, #1
 8000d72:	00db      	lsls	r3, r3, #3
 8000d74:	4a4b      	ldr	r2, [pc, #300]	; (8000ea4 <eMBMasterRegCoilsCB+0x164>)
 8000d76:	4413      	add	r3, r2
 8000d78:	61fb      	str	r3, [r7, #28]
    COIL_START = M_COIL_START;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	837b      	strh	r3, [r7, #26]
    COIL_NCOILS = M_COIL_NCOILS;
 8000d7e:	2340      	movs	r3, #64	; 0x40
 8000d80:	833b      	strh	r3, [r7, #24]
    usCoilStart = usMCoilStart;
 8000d82:	4b49      	ldr	r3, [pc, #292]	; (8000ea8 <eMBMasterRegCoilsCB+0x168>)
 8000d84:	881b      	ldrh	r3, [r3, #0]
 8000d86:	82fb      	strh	r3, [r7, #22]

    /* if mode is read,the master will write the received date to buffer. */
    eMode = MB_REG_WRITE;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	71fb      	strb	r3, [r7, #7]

    /* it already plus one in modbus function method. */
    usAddress--;
 8000d8c:	897b      	ldrh	r3, [r7, #10]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	817b      	strh	r3, [r7, #10]

    if ((usAddress >= COIL_START)
 8000d92:	897a      	ldrh	r2, [r7, #10]
 8000d94:	8b7b      	ldrh	r3, [r7, #26]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d37b      	bcc.n	8000e92 <eMBMasterRegCoilsCB+0x152>
            && (usAddress + usNCoils <= COIL_START + COIL_NCOILS))
 8000d9a:	897a      	ldrh	r2, [r7, #10]
 8000d9c:	893b      	ldrh	r3, [r7, #8]
 8000d9e:	441a      	add	r2, r3
 8000da0:	8b79      	ldrh	r1, [r7, #26]
 8000da2:	8b3b      	ldrh	r3, [r7, #24]
 8000da4:	440b      	add	r3, r1
 8000da6:	429a      	cmp	r2, r3
 8000da8:	dc73      	bgt.n	8000e92 <eMBMasterRegCoilsCB+0x152>
    {
        iRegIndex = (USHORT) (usAddress - usCoilStart) / 8;
 8000daa:	897a      	ldrh	r2, [r7, #10]
 8000dac:	8afb      	ldrh	r3, [r7, #22]
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	08db      	lsrs	r3, r3, #3
 8000db4:	84bb      	strh	r3, [r7, #36]	; 0x24
        iRegBitIndex = (USHORT) (usAddress - usCoilStart) % 8;
 8000db6:	897a      	ldrh	r2, [r7, #10]
 8000db8:	8afb      	ldrh	r3, [r7, #22]
 8000dba:	1ad3      	subs	r3, r2, r3
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	82bb      	strh	r3, [r7, #20]
        switch (eMode)
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d015      	beq.n	8000df6 <eMBMasterRegCoilsCB+0xb6>
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d045      	beq.n	8000e5a <eMBMasterRegCoilsCB+0x11a>
 8000dce:	e063      	b.n	8000e98 <eMBMasterRegCoilsCB+0x158>
        {
         /* read current coil values from the protocol stack. */
        case MB_REG_READ:
            while (iNReg > 0)
            {
                *pucRegBuffer++ = xMBUtilGetBits(&pucCoilBuf[iRegIndex++],
 8000dd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000dd2:	1c5a      	adds	r2, r3, #1
 8000dd4:	84ba      	strh	r2, [r7, #36]	; 0x24
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	1898      	adds	r0, r3, r2
 8000ddc:	68fc      	ldr	r4, [r7, #12]
 8000dde:	1c63      	adds	r3, r4, #1
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	8abb      	ldrh	r3, [r7, #20]
 8000de4:	2208      	movs	r2, #8
 8000de6:	4619      	mov	r1, r3
 8000de8:	f004 fdea 	bl	80059c0 <xMBUtilGetBits>
 8000dec:	4603      	mov	r3, r0
 8000dee:	7023      	strb	r3, [r4, #0]
                        iRegBitIndex, 8);
                iNReg--;
 8000df0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000df2:	3b01      	subs	r3, #1
 8000df4:	847b      	strh	r3, [r7, #34]	; 0x22
            while (iNReg > 0)
 8000df6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d1e9      	bne.n	8000dd0 <eMBMasterRegCoilsCB+0x90>
            }
            pucRegBuffer--;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	60fb      	str	r3, [r7, #12]
            /* last coils */
            usNCoils = usNCoils % 8;
 8000e02:	893b      	ldrh	r3, [r7, #8]
 8000e04:	f003 0307 	and.w	r3, r3, #7
 8000e08:	813b      	strh	r3, [r7, #8]
            /* filling zero to high bit */
            *pucRegBuffer = *pucRegBuffer << (8 - usNCoils);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	893b      	ldrh	r3, [r7, #8]
 8000e12:	f1c3 0308 	rsb	r3, r3, #8
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	701a      	strb	r2, [r3, #0]
            *pucRegBuffer = *pucRegBuffer >> (8 - usNCoils);
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	461a      	mov	r2, r3
 8000e26:	893b      	ldrh	r3, [r7, #8]
 8000e28:	f1c3 0308 	rsb	r3, r3, #8
 8000e2c:	fa42 f303 	asr.w	r3, r2, r3
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	701a      	strb	r2, [r3, #0]
            break;
 8000e36:	e02b      	b.n	8000e90 <eMBMasterRegCoilsCB+0x150>

        /* write current coil values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (iNReg > 1)
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 8000e38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e3a:	1c5a      	adds	r2, r3, #1
 8000e3c:	84ba      	strh	r2, [r7, #36]	; 0x24
 8000e3e:	461a      	mov	r2, r3
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	1898      	adds	r0, r3, r2
                        *pucRegBuffer++);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	1c5a      	adds	r2, r3, #1
 8000e48:	60fa      	str	r2, [r7, #12]
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	8ab9      	ldrh	r1, [r7, #20]
 8000e4e:	2208      	movs	r2, #8
 8000e50:	f004 fd4a 	bl	80058e8 <xMBUtilSetBits>
                iNReg--;
 8000e54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e56:	3b01      	subs	r3, #1
 8000e58:	847b      	strh	r3, [r7, #34]	; 0x22
            while (iNReg > 1)
 8000e5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d8eb      	bhi.n	8000e38 <eMBMasterRegCoilsCB+0xf8>
            }
            /* last coils */
            usNCoils = usNCoils % 8;
 8000e60:	893b      	ldrh	r3, [r7, #8]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	813b      	strh	r3, [r7, #8]
            /* xMBUtilSetBits has bug when ucNBits is zero */
            if (usNCoils != 0)
 8000e68:	893b      	ldrh	r3, [r7, #8]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d00f      	beq.n	8000e8e <eMBMasterRegCoilsCB+0x14e>
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 8000e6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e70:	1c5a      	adds	r2, r3, #1
 8000e72:	84ba      	strh	r2, [r7, #36]	; 0x24
 8000e74:	461a      	mov	r2, r3
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	1898      	adds	r0, r3, r2
 8000e7a:	893b      	ldrh	r3, [r7, #8]
 8000e7c:	b2dc      	uxtb	r4, r3
                        *pucRegBuffer++);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	1c5a      	adds	r2, r3, #1
 8000e82:	60fa      	str	r2, [r7, #12]
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	8ab9      	ldrh	r1, [r7, #20]
 8000e88:	4622      	mov	r2, r4
 8000e8a:	f004 fd2d 	bl	80058e8 <xMBUtilSetBits>
            }
            break;
 8000e8e:	bf00      	nop
        switch (eMode)
 8000e90:	e002      	b.n	8000e98 <eMBMasterRegCoilsCB+0x158>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8000e92:	2301      	movs	r3, #1
 8000e94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    return eStatus;
 8000e98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	372c      	adds	r7, #44	; 0x2c
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd90      	pop	{r4, r7, pc}
 8000ea4:	20000420 	.word	0x20000420
 8000ea8:	2000041c 	.word	0x2000041c

08000eac <eMBMasterRegDiscreteCB>:
 * @param usNDiscrete discrete number
 *
 * @return result
 */
eMBErrorCode eMBMasterRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
 8000eac:	b590      	push	{r4, r7, lr}
 8000eae:	b089      	sub	sp, #36	; 0x24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	807b      	strh	r3, [r7, #2]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	803b      	strh	r3, [r7, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	77fb      	strb	r3, [r7, #31]
    USHORT          iRegIndex , iRegBitIndex , iNReg;
    UCHAR *         pucDiscreteInputBuf;
    USHORT          DISCRETE_INPUT_START;
    USHORT          DISCRETE_INPUT_NDISCRETES;
    USHORT          usDiscreteInputStart;
    iNReg =  usNDiscrete / 8 + 1;
 8000ec0:	883b      	ldrh	r3, [r7, #0]
 8000ec2:	08db      	lsrs	r3, r3, #3
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	837b      	strh	r3, [r7, #26]

    pucDiscreteInputBuf = ucMDiscInBuf[ucMBMasterGetDestAddress() - 1];
 8000eca:	f004 ffb7 	bl	8005e3c <ucMBMasterGetDestAddress>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	4a2c      	ldr	r2, [pc, #176]	; (8000f88 <eMBMasterRegDiscreteCB+0xdc>)
 8000ed6:	4413      	add	r3, r2
 8000ed8:	617b      	str	r3, [r7, #20]
    DISCRETE_INPUT_START = M_DISCRETE_INPUT_START;
 8000eda:	2300      	movs	r3, #0
 8000edc:	827b      	strh	r3, [r7, #18]
    DISCRETE_INPUT_NDISCRETES = M_DISCRETE_INPUT_NDISCRETES;
 8000ede:	2310      	movs	r3, #16
 8000ee0:	823b      	strh	r3, [r7, #16]
    usDiscreteInputStart = usMDiscInStart;
 8000ee2:	4b2a      	ldr	r3, [pc, #168]	; (8000f8c <eMBMasterRegDiscreteCB+0xe0>)
 8000ee4:	881b      	ldrh	r3, [r3, #0]
 8000ee6:	81fb      	strh	r3, [r7, #14]

    /* it already plus one in modbus function method. */
    usAddress--;
 8000ee8:	887b      	ldrh	r3, [r7, #2]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	807b      	strh	r3, [r7, #2]

    if ((usAddress >= DISCRETE_INPUT_START)
 8000eee:	887a      	ldrh	r2, [r7, #2]
 8000ef0:	8a7b      	ldrh	r3, [r7, #18]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d341      	bcc.n	8000f7a <eMBMasterRegDiscreteCB+0xce>
            && (usAddress + usNDiscrete    <= DISCRETE_INPUT_START + DISCRETE_INPUT_NDISCRETES))
 8000ef6:	887a      	ldrh	r2, [r7, #2]
 8000ef8:	883b      	ldrh	r3, [r7, #0]
 8000efa:	441a      	add	r2, r3
 8000efc:	8a79      	ldrh	r1, [r7, #18]
 8000efe:	8a3b      	ldrh	r3, [r7, #16]
 8000f00:	440b      	add	r3, r1
 8000f02:	429a      	cmp	r2, r3
 8000f04:	dc39      	bgt.n	8000f7a <eMBMasterRegDiscreteCB+0xce>
    {
        iRegIndex = (USHORT) (usAddress - usDiscreteInputStart) / 8;
 8000f06:	887a      	ldrh	r2, [r7, #2]
 8000f08:	89fb      	ldrh	r3, [r7, #14]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	08db      	lsrs	r3, r3, #3
 8000f10:	83bb      	strh	r3, [r7, #28]
        iRegBitIndex = (USHORT) (usAddress - usDiscreteInputStart) % 8;
 8000f12:	887a      	ldrh	r2, [r7, #2]
 8000f14:	89fb      	ldrh	r3, [r7, #14]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	81bb      	strh	r3, [r7, #12]

        /* write current discrete values with new values from the protocol stack. */
        while (iNReg > 1)
 8000f20:	e010      	b.n	8000f44 <eMBMasterRegDiscreteCB+0x98>
        {
            xMBUtilSetBits(&pucDiscreteInputBuf[iRegIndex++], iRegBitIndex, 8,
 8000f22:	8bbb      	ldrh	r3, [r7, #28]
 8000f24:	1c5a      	adds	r2, r3, #1
 8000f26:	83ba      	strh	r2, [r7, #28]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	1898      	adds	r0, r3, r2
                    *pucRegBuffer++);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	1c5a      	adds	r2, r3, #1
 8000f32:	607a      	str	r2, [r7, #4]
            xMBUtilSetBits(&pucDiscreteInputBuf[iRegIndex++], iRegBitIndex, 8,
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	89b9      	ldrh	r1, [r7, #12]
 8000f38:	2208      	movs	r2, #8
 8000f3a:	f004 fcd5 	bl	80058e8 <xMBUtilSetBits>
            iNReg--;
 8000f3e:	8b7b      	ldrh	r3, [r7, #26]
 8000f40:	3b01      	subs	r3, #1
 8000f42:	837b      	strh	r3, [r7, #26]
        while (iNReg > 1)
 8000f44:	8b7b      	ldrh	r3, [r7, #26]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d8eb      	bhi.n	8000f22 <eMBMasterRegDiscreteCB+0x76>
        }
        /* last discrete */
        usNDiscrete = usNDiscrete % 8;
 8000f4a:	883b      	ldrh	r3, [r7, #0]
 8000f4c:	f003 0307 	and.w	r3, r3, #7
 8000f50:	803b      	strh	r3, [r7, #0]
        /* xMBUtilSetBits has bug when ucNBits is zero */
        if (usNDiscrete != 0)
 8000f52:	883b      	ldrh	r3, [r7, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d012      	beq.n	8000f7e <eMBMasterRegDiscreteCB+0xd2>
        {
            xMBUtilSetBits(&pucDiscreteInputBuf[iRegIndex++], iRegBitIndex,
 8000f58:	8bbb      	ldrh	r3, [r7, #28]
 8000f5a:	1c5a      	adds	r2, r3, #1
 8000f5c:	83ba      	strh	r2, [r7, #28]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	1898      	adds	r0, r3, r2
 8000f64:	883b      	ldrh	r3, [r7, #0]
 8000f66:	b2dc      	uxtb	r4, r3
                    usNDiscrete, *pucRegBuffer++);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	1c5a      	adds	r2, r3, #1
 8000f6c:	607a      	str	r2, [r7, #4]
            xMBUtilSetBits(&pucDiscreteInputBuf[iRegIndex++], iRegBitIndex,
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	89b9      	ldrh	r1, [r7, #12]
 8000f72:	4622      	mov	r2, r4
 8000f74:	f004 fcb8 	bl	80058e8 <xMBUtilSetBits>
        if (usNDiscrete != 0)
 8000f78:	e001      	b.n	8000f7e <eMBMasterRegDiscreteCB+0xd2>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	77fb      	strb	r3, [r7, #31]
    }

    return eStatus;
 8000f7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3724      	adds	r7, #36	; 0x24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd90      	pop	{r4, r7, pc}
 8000f88:	200003fc 	.word	0x200003fc
 8000f8c:	200003f8 	.word	0x200003f8

08000f90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <HAL_MspInit+0x54>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9e:	4a11      	ldr	r2, [pc, #68]	; (8000fe4 <HAL_MspInit+0x54>)
 8000fa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <HAL_MspInit+0x54>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	603b      	str	r3, [r7, #0]
 8000fb6:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <HAL_MspInit+0x54>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <HAL_MspInit+0x54>)
 8000fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc2:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <HAL_MspInit+0x54>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	210f      	movs	r1, #15
 8000fd2:	f06f 0001 	mvn.w	r0, #1
 8000fd6:	f000 fb7c 	bl	80016d2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40023800 	.word	0x40023800

08000fe8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <HAL_TIM_Base_MspInit+0x48>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d115      	bne.n	8001026 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <HAL_TIM_Base_MspInit+0x4c>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	4a0c      	ldr	r2, [pc, #48]	; (8001034 <HAL_TIM_Base_MspInit+0x4c>)
 8001004:	f043 0320 	orr.w	r3, r3, #32
 8001008:	6413      	str	r3, [r2, #64]	; 0x40
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <HAL_TIM_Base_MspInit+0x4c>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	f003 0320 	and.w	r3, r3, #32
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2105      	movs	r1, #5
 800101a:	2037      	movs	r0, #55	; 0x37
 800101c:	f000 fb59 	bl	80016d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001020:	2037      	movs	r0, #55	; 0x37
 8001022:	f000 fb72 	bl	800170a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40001400 	.word	0x40001400
 8001034:	40023800 	.word	0x40023800

08001038 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	; 0x28
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a1d      	ldr	r2, [pc, #116]	; (80010cc <HAL_UART_MspInit+0x94>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d133      	bne.n	80010c2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <HAL_UART_MspInit+0x98>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	4a1b      	ldr	r2, [pc, #108]	; (80010d0 <HAL_UART_MspInit+0x98>)
 8001064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001068:	6413      	str	r3, [r2, #64]	; 0x40
 800106a:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <HAL_UART_MspInit+0x98>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <HAL_UART_MspInit+0x98>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a14      	ldr	r2, [pc, #80]	; (80010d0 <HAL_UART_MspInit+0x98>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <HAL_UART_MspInit+0x98>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001092:	230c      	movs	r3, #12
 8001094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109e:	2303      	movs	r3, #3
 80010a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010a2:	2307      	movs	r3, #7
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	4809      	ldr	r0, [pc, #36]	; (80010d4 <HAL_UART_MspInit+0x9c>)
 80010ae:	f000 fbf5 	bl	800189c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2105      	movs	r1, #5
 80010b6:	2026      	movs	r0, #38	; 0x26
 80010b8:	f000 fb0b 	bl	80016d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010bc:	2026      	movs	r0, #38	; 0x26
 80010be:	f000 fb24 	bl	800170a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010c2:	bf00      	nop
 80010c4:	3728      	adds	r7, #40	; 0x28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40004400 	.word	0x40004400
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40020000 	.word	0x40020000

080010d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08c      	sub	sp, #48	; 0x30
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80010e8:	2200      	movs	r2, #0
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	2036      	movs	r0, #54	; 0x36
 80010ee:	f000 faf0 	bl	80016d2 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010f2:	2036      	movs	r0, #54	; 0x36
 80010f4:	f000 fb09 	bl	800170a <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	4b1f      	ldr	r3, [pc, #124]	; (800117c <HAL_InitTick+0xa4>)
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	4a1e      	ldr	r2, [pc, #120]	; (800117c <HAL_InitTick+0xa4>)
 8001102:	f043 0310 	orr.w	r3, r3, #16
 8001106:	6413      	str	r3, [r2, #64]	; 0x40
 8001108:	4b1c      	ldr	r3, [pc, #112]	; (800117c <HAL_InitTick+0xa4>)
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	f003 0310 	and.w	r3, r3, #16
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001114:	f107 0210 	add.w	r2, r7, #16
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	4611      	mov	r1, r2
 800111e:	4618      	mov	r0, r3
 8001120:	f001 fa0a 	bl	8002538 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001124:	f001 f9e0 	bl	80024e8 <HAL_RCC_GetPCLK1Freq>
 8001128:	4603      	mov	r3, r0
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800112e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001130:	4a13      	ldr	r2, [pc, #76]	; (8001180 <HAL_InitTick+0xa8>)
 8001132:	fba2 2303 	umull	r2, r3, r2, r3
 8001136:	0c9b      	lsrs	r3, r3, #18
 8001138:	3b01      	subs	r3, #1
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <HAL_InitTick+0xac>)
 800113e:	4a12      	ldr	r2, [pc, #72]	; (8001188 <HAL_InitTick+0xb0>)
 8001140:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001142:	4b10      	ldr	r3, [pc, #64]	; (8001184 <HAL_InitTick+0xac>)
 8001144:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001148:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800114a:	4a0e      	ldr	r2, [pc, #56]	; (8001184 <HAL_InitTick+0xac>)
 800114c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <HAL_InitTick+0xac>)
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <HAL_InitTick+0xac>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800115c:	4809      	ldr	r0, [pc, #36]	; (8001184 <HAL_InitTick+0xac>)
 800115e:	f001 fa1d 	bl	800259c <HAL_TIM_Base_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d104      	bne.n	8001172 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001168:	4806      	ldr	r0, [pc, #24]	; (8001184 <HAL_InitTick+0xac>)
 800116a:	f001 fa67 	bl	800263c <HAL_TIM_Base_Start_IT>
 800116e:	4603      	mov	r3, r0
 8001170:	e000      	b.n	8001174 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
}
 8001174:	4618      	mov	r0, r3
 8001176:	3730      	adds	r7, #48	; 0x30
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40023800 	.word	0x40023800
 8001180:	431bde83 	.word	0x431bde83
 8001184:	20001da8 	.word	0x20001da8
 8001188:	40001000 	.word	0x40001000

0800118c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8001190:	f002 fde7 	bl	8003d62 <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}

08001198 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	uint32_t tmp_flag = __HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE);
 800119e:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <USART2_IRQHandler+0x80>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0320 	and.w	r3, r3, #32
 80011a8:	2b20      	cmp	r3, #32
 80011aa:	bf0c      	ite	eq
 80011ac:	2301      	moveq	r3, #1
 80011ae:	2300      	movne	r3, #0
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_it_source = __HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_RXNE);
 80011b4:	4b18      	ldr	r3, [pc, #96]	; (8001218 <USART2_IRQHandler+0x80>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	f003 0320 	and.w	r3, r3, #32
 80011be:	60bb      	str	r3, [r7, #8]
  
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d010      	beq.n	80011e8 <USART2_IRQHandler+0x50>
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d00d      	beq.n	80011e8 <USART2_IRQHandler+0x50>
  {
    pxMBMasterFrameCBByteReceived();
 80011cc:	4b13      	ldr	r3, [pc, #76]	; (800121c <USART2_IRQHandler+0x84>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4798      	blx	r3
    __HAL_UART_CLEAR_PEFLAG(&huart2);    
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <USART2_IRQHandler+0x80>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <USART2_IRQHandler+0x80>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]
  }
  
  if((__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_TXE) != RESET))
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <USART2_IRQHandler+0x80>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f2:	2b80      	cmp	r3, #128	; 0x80
 80011f4:	d109      	bne.n	800120a <USART2_IRQHandler+0x72>
 80011f6:	4b08      	ldr	r3, [pc, #32]	; (8001218 <USART2_IRQHandler+0x80>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001200:	2b00      	cmp	r3, #0
 8001202:	d002      	beq.n	800120a <USART2_IRQHandler+0x72>
  {
    pxMBMasterFrameCBTransmitterEmpty();
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <USART2_IRQHandler+0x88>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4798      	blx	r3
  }

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800120a:	4803      	ldr	r0, [pc, #12]	; (8001218 <USART2_IRQHandler+0x80>)
 800120c:	f001 fdf6 	bl	8002dfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	200003b0 	.word	0x200003b0
 800121c:	20005b88 	.word	0x20005b88
 8001220:	20005b8c 	.word	0x20005b8c

08001224 <TIM6_DAC_IRQHandler>:

/**
* @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
*/
void TIM6_DAC_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001228:	4802      	ldr	r0, [pc, #8]	; (8001234 <TIM6_DAC_IRQHandler+0x10>)
 800122a:	f001 faa6 	bl	800277a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20001da8 	.word	0x20001da8

08001238 <TIM7_IRQHandler>:

/**
* @brief This function handles TIM7 global interrupt.
*/
void TIM7_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	if(__HAL_TIM_GET_FLAG(&htim7, TIM_FLAG_UPDATE) != RESET && __HAL_TIM_GET_IT_SOURCE(&htim7, TIM_IT_UPDATE) !=RESET) {
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <TIM7_IRQHandler+0x50>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	2b01      	cmp	r3, #1
 8001248:	d118      	bne.n	800127c <TIM7_IRQHandler+0x44>
 800124a:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <TIM7_IRQHandler+0x50>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	2b01      	cmp	r3, #1
 8001256:	d111      	bne.n	800127c <TIM7_IRQHandler+0x44>
    __HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 8001258:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <TIM7_IRQHandler+0x50>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f06f 0201 	mvn.w	r2, #1
 8001260:	611a      	str	r2, [r3, #16]
    if (!--downcounter)
 8001262:	4b0a      	ldr	r3, [pc, #40]	; (800128c <TIM7_IRQHandler+0x54>)
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	3b01      	subs	r3, #1
 8001268:	b29a      	uxth	r2, r3
 800126a:	4b08      	ldr	r3, [pc, #32]	; (800128c <TIM7_IRQHandler+0x54>)
 800126c:	801a      	strh	r2, [r3, #0]
 800126e:	4b07      	ldr	r3, [pc, #28]	; (800128c <TIM7_IRQHandler+0x54>)
 8001270:	881b      	ldrh	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d102      	bne.n	800127c <TIM7_IRQHandler+0x44>
#if MB_MASTER_RTU_ENABLED > 0 || MB_MASTER_ASCII_ENABLED > 0
      pxMBPortCBTimerExpired();
#endif
    pxMBMasterPortCBTimerExpired();
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <TIM7_IRQHandler+0x58>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4798      	blx	r3
  }

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800127c:	4802      	ldr	r0, [pc, #8]	; (8001288 <TIM7_IRQHandler+0x50>)
 800127e:	f001 fa7c 	bl	800277a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000368 	.word	0x20000368
 800128c:	20005ba4 	.word	0x20005ba4
 8001290:	20005b90 	.word	0x20005b90

08001294 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
	return 1;
 8001298:	2301      	movs	r3, #1
}
 800129a:	4618      	mov	r0, r3
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <_kill>:

int _kill(int pid, int sig)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80012ae:	f005 fa0f 	bl	80066d0 <__errno>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2216      	movs	r2, #22
 80012b6:	601a      	str	r2, [r3, #0]
	return -1;
 80012b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <_exit>:

void _exit (int status)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80012cc:	f04f 31ff 	mov.w	r1, #4294967295
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff ffe7 	bl	80012a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80012d6:	e7fe      	b.n	80012d6 <_exit+0x12>

080012d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	e00a      	b.n	8001300 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012ea:	f3af 8000 	nop.w
 80012ee:	4601      	mov	r1, r0
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	1c5a      	adds	r2, r3, #1
 80012f4:	60ba      	str	r2, [r7, #8]
 80012f6:	b2ca      	uxtb	r2, r1
 80012f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	3301      	adds	r3, #1
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	697a      	ldr	r2, [r7, #20]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	429a      	cmp	r2, r3
 8001306:	dbf0      	blt.n	80012ea <_read+0x12>
	}

return len;
 8001308:	687b      	ldr	r3, [r7, #4]
}
 800130a:	4618      	mov	r0, r3
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b086      	sub	sp, #24
 8001316:	af00      	add	r7, sp, #0
 8001318:	60f8      	str	r0, [r7, #12]
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
 8001322:	e009      	b.n	8001338 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	1c5a      	adds	r2, r3, #1
 8001328:	60ba      	str	r2, [r7, #8]
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	3301      	adds	r3, #1
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	697a      	ldr	r2, [r7, #20]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	429a      	cmp	r2, r3
 800133e:	dbf1      	blt.n	8001324 <_write+0x12>
	}
	return len;
 8001340:	687b      	ldr	r3, [r7, #4]
}
 8001342:	4618      	mov	r0, r3
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <_close>:

int _close(int file)
{
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
	return -1;
 8001352:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001356:	4618      	mov	r0, r3
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001362:	b480      	push	{r7}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
 800136a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001372:	605a      	str	r2, [r3, #4]
	return 0;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <_isatty>:

int _isatty(int file)
{
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
	return 1;
 800138a:	2301      	movs	r3, #1
}
 800138c:	4618      	mov	r0, r3
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
	return 0;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013bc:	4a14      	ldr	r2, [pc, #80]	; (8001410 <_sbrk+0x5c>)
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <_sbrk+0x60>)
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c8:	4b13      	ldr	r3, [pc, #76]	; (8001418 <_sbrk+0x64>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d102      	bne.n	80013d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <_sbrk+0x64>)
 80013d2:	4a12      	ldr	r2, [pc, #72]	; (800141c <_sbrk+0x68>)
 80013d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <_sbrk+0x64>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4413      	add	r3, r2
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d207      	bcs.n	80013f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013e4:	f005 f974 	bl	80066d0 <__errno>
 80013e8:	4603      	mov	r3, r0
 80013ea:	220c      	movs	r2, #12
 80013ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
 80013f2:	e009      	b.n	8001408 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <_sbrk+0x64>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013fa:	4b07      	ldr	r3, [pc, #28]	; (8001418 <_sbrk+0x64>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	4a05      	ldr	r2, [pc, #20]	; (8001418 <_sbrk+0x64>)
 8001404:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001406:	68fb      	ldr	r3, [r7, #12]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20020000 	.word	0x20020000
 8001414:	00000400 	.word	0x00000400
 8001418:	20001df0 	.word	0x20001df0
 800141c:	20005dc8 	.word	0x20005dc8

08001420 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <SystemInit+0x20>)
 8001426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800142a:	4a05      	ldr	r2, [pc, #20]	; (8001440 <SystemInit+0x20>)
 800142c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001430:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001444:	f8df d034 	ldr.w	sp, [pc, #52]	; 800147c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001448:	480d      	ldr	r0, [pc, #52]	; (8001480 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800144a:	490e      	ldr	r1, [pc, #56]	; (8001484 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800144c:	4a0e      	ldr	r2, [pc, #56]	; (8001488 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001450:	e002      	b.n	8001458 <LoopCopyDataInit>

08001452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001456:	3304      	adds	r3, #4

08001458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800145c:	d3f9      	bcc.n	8001452 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145e:	4a0b      	ldr	r2, [pc, #44]	; (800148c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001460:	4c0b      	ldr	r4, [pc, #44]	; (8001490 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001464:	e001      	b.n	800146a <LoopFillZerobss>

08001466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001468:	3204      	adds	r2, #4

0800146a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800146c:	d3fb      	bcc.n	8001466 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800146e:	f7ff ffd7 	bl	8001420 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001472:	f005 f945 	bl	8006700 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001476:	f7ff f897 	bl	80005a8 <main>
  bx  lr    
 800147a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800147c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001484:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8001488:	08007af0 	.word	0x08007af0
  ldr r2, =_sbss
 800148c:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8001490:	20005dc8 	.word	0x20005dc8

08001494 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001494:	e7fe      	b.n	8001494 <ADC_IRQHandler>
	...

08001498 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800149c:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <HAL_Init+0x40>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a0d      	ldr	r2, [pc, #52]	; (80014d8 <HAL_Init+0x40>)
 80014a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014a8:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <HAL_Init+0x40>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <HAL_Init+0x40>)
 80014ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014b4:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <HAL_Init+0x40>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a07      	ldr	r2, [pc, #28]	; (80014d8 <HAL_Init+0x40>)
 80014ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c0:	2003      	movs	r0, #3
 80014c2:	f000 f8fb 	bl	80016bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014c6:	200f      	movs	r0, #15
 80014c8:	f7ff fe06 	bl	80010d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014cc:	f7ff fd60 	bl	8000f90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40023c00 	.word	0x40023c00

080014dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_IncTick+0x20>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <HAL_IncTick+0x24>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4413      	add	r3, r2
 80014ec:	4a04      	ldr	r2, [pc, #16]	; (8001500 <HAL_IncTick+0x24>)
 80014ee:	6013      	str	r3, [r2, #0]
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	20000008 	.word	0x20000008
 8001500:	20001df4 	.word	0x20001df4

08001504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return uwTick;
 8001508:	4b03      	ldr	r3, [pc, #12]	; (8001518 <HAL_GetTick+0x14>)
 800150a:	681b      	ldr	r3, [r3, #0]
}
 800150c:	4618      	mov	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	20001df4 	.word	0x20001df4

0800151c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001538:	4013      	ands	r3, r2
 800153a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001544:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800154c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800154e:	4a04      	ldr	r2, [pc, #16]	; (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	60d3      	str	r3, [r2, #12]
}
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001568:	4b04      	ldr	r3, [pc, #16]	; (800157c <__NVIC_GetPriorityGrouping+0x18>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	f003 0307 	and.w	r3, r3, #7
}
 8001572:	4618      	mov	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	2b00      	cmp	r3, #0
 8001590:	db0b      	blt.n	80015aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	f003 021f 	and.w	r2, r3, #31
 8001598:	4907      	ldr	r1, [pc, #28]	; (80015b8 <__NVIC_EnableIRQ+0x38>)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	095b      	lsrs	r3, r3, #5
 80015a0:	2001      	movs	r0, #1
 80015a2:	fa00 f202 	lsl.w	r2, r0, r2
 80015a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000e100 	.word	0xe000e100

080015bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	6039      	str	r1, [r7, #0]
 80015c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	db0a      	blt.n	80015e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	490c      	ldr	r1, [pc, #48]	; (8001608 <__NVIC_SetPriority+0x4c>)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	0112      	lsls	r2, r2, #4
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	440b      	add	r3, r1
 80015e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e4:	e00a      	b.n	80015fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	4908      	ldr	r1, [pc, #32]	; (800160c <__NVIC_SetPriority+0x50>)
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	3b04      	subs	r3, #4
 80015f4:	0112      	lsls	r2, r2, #4
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	440b      	add	r3, r1
 80015fa:	761a      	strb	r2, [r3, #24]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000e100 	.word	0xe000e100
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001610:	b480      	push	{r7}
 8001612:	b089      	sub	sp, #36	; 0x24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f1c3 0307 	rsb	r3, r3, #7
 800162a:	2b04      	cmp	r3, #4
 800162c:	bf28      	it	cs
 800162e:	2304      	movcs	r3, #4
 8001630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3304      	adds	r3, #4
 8001636:	2b06      	cmp	r3, #6
 8001638:	d902      	bls.n	8001640 <NVIC_EncodePriority+0x30>
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3b03      	subs	r3, #3
 800163e:	e000      	b.n	8001642 <NVIC_EncodePriority+0x32>
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	f04f 32ff 	mov.w	r2, #4294967295
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43da      	mvns	r2, r3
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	401a      	ands	r2, r3
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001658:	f04f 31ff 	mov.w	r1, #4294967295
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	43d9      	mvns	r1, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	4313      	orrs	r3, r2
         );
}
 800166a:	4618      	mov	r0, r3
 800166c:	3724      	adds	r7, #36	; 0x24
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001688:	d301      	bcc.n	800168e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800168a:	2301      	movs	r3, #1
 800168c:	e00f      	b.n	80016ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800168e:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <SysTick_Config+0x40>)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3b01      	subs	r3, #1
 8001694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001696:	210f      	movs	r1, #15
 8001698:	f04f 30ff 	mov.w	r0, #4294967295
 800169c:	f7ff ff8e 	bl	80015bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <SysTick_Config+0x40>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016a6:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <SysTick_Config+0x40>)
 80016a8:	2207      	movs	r2, #7
 80016aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	e000e010 	.word	0xe000e010

080016bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff ff29 	bl	800151c <__NVIC_SetPriorityGrouping>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b086      	sub	sp, #24
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
 80016de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016e4:	f7ff ff3e 	bl	8001564 <__NVIC_GetPriorityGrouping>
 80016e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	68b9      	ldr	r1, [r7, #8]
 80016ee:	6978      	ldr	r0, [r7, #20]
 80016f0:	f7ff ff8e 	bl	8001610 <NVIC_EncodePriority>
 80016f4:	4602      	mov	r2, r0
 80016f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fa:	4611      	mov	r1, r2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ff5d 	bl	80015bc <__NVIC_SetPriority>
}
 8001702:	bf00      	nop
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	4603      	mov	r3, r0
 8001712:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff31 	bl	8001580 <__NVIC_EnableIRQ>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff ffa2 	bl	8001678 <SysTick_Config>
 8001734:	4603      	mov	r3, r0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b04      	cmp	r3, #4
 800174c:	d106      	bne.n	800175c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a08      	ldr	r2, [pc, #32]	; (8001774 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001754:	f043 0304 	orr.w	r3, r3, #4
 8001758:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800175a:	e005      	b.n	8001768 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800175c:	4b05      	ldr	r3, [pc, #20]	; (8001774 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a04      	ldr	r2, [pc, #16]	; (8001774 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001762:	f023 0304 	bic.w	r3, r3, #4
 8001766:	6013      	str	r3, [r2, #0]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000e010 	.word	0xe000e010

08001778 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001784:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001786:	f7ff febd 	bl	8001504 <HAL_GetTick>
 800178a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d008      	beq.n	80017aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2280      	movs	r2, #128	; 0x80
 800179c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e052      	b.n	8001850 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 0216 	bic.w	r2, r2, #22
 80017b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	695a      	ldr	r2, [r3, #20]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d103      	bne.n	80017da <HAL_DMA_Abort+0x62>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d007      	beq.n	80017ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 0208 	bic.w	r2, r2, #8
 80017e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 0201 	bic.w	r2, r2, #1
 80017f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017fa:	e013      	b.n	8001824 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017fc:	f7ff fe82 	bl	8001504 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b05      	cmp	r3, #5
 8001808:	d90c      	bls.n	8001824 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2220      	movs	r2, #32
 800180e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2203      	movs	r2, #3
 8001814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e015      	b.n	8001850 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1e4      	bne.n	80017fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001836:	223f      	movs	r2, #63	; 0x3f
 8001838:	409a      	lsls	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001866:	b2db      	uxtb	r3, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d004      	beq.n	8001876 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2280      	movs	r2, #128	; 0x80
 8001870:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e00c      	b.n	8001890 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2205      	movs	r2, #5
 800187a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f022 0201 	bic.w	r2, r2, #1
 800188c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800189c:	b480      	push	{r7}
 800189e:	b089      	sub	sp, #36	; 0x24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
 80018b6:	e16b      	b.n	8001b90 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018b8:	2201      	movs	r2, #1
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	f040 815a 	bne.w	8001b8a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f003 0303 	and.w	r3, r3, #3
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d005      	beq.n	80018ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d130      	bne.n	8001950 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	2203      	movs	r2, #3
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4013      	ands	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	68da      	ldr	r2, [r3, #12]
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4313      	orrs	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001924:	2201      	movs	r2, #1
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	091b      	lsrs	r3, r3, #4
 800193a:	f003 0201 	and.w	r2, r3, #1
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 0303 	and.w	r3, r3, #3
 8001958:	2b03      	cmp	r3, #3
 800195a:	d017      	beq.n	800198c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	2203      	movs	r2, #3
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4313      	orrs	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d123      	bne.n	80019e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	08da      	lsrs	r2, r3, #3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3208      	adds	r2, #8
 80019a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	f003 0307 	and.w	r3, r3, #7
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	220f      	movs	r2, #15
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	691a      	ldr	r2, [r3, #16]
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	08da      	lsrs	r2, r3, #3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	3208      	adds	r2, #8
 80019da:	69b9      	ldr	r1, [r7, #24]
 80019dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	2203      	movs	r2, #3
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 0203 	and.w	r2, r3, #3
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 80b4 	beq.w	8001b8a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	4b60      	ldr	r3, [pc, #384]	; (8001ba8 <HAL_GPIO_Init+0x30c>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2a:	4a5f      	ldr	r2, [pc, #380]	; (8001ba8 <HAL_GPIO_Init+0x30c>)
 8001a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a30:	6453      	str	r3, [r2, #68]	; 0x44
 8001a32:	4b5d      	ldr	r3, [pc, #372]	; (8001ba8 <HAL_GPIO_Init+0x30c>)
 8001a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a3e:	4a5b      	ldr	r2, [pc, #364]	; (8001bac <HAL_GPIO_Init+0x310>)
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	089b      	lsrs	r3, r3, #2
 8001a44:	3302      	adds	r3, #2
 8001a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	220f      	movs	r2, #15
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a52      	ldr	r2, [pc, #328]	; (8001bb0 <HAL_GPIO_Init+0x314>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d02b      	beq.n	8001ac2 <HAL_GPIO_Init+0x226>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a51      	ldr	r2, [pc, #324]	; (8001bb4 <HAL_GPIO_Init+0x318>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d025      	beq.n	8001abe <HAL_GPIO_Init+0x222>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a50      	ldr	r2, [pc, #320]	; (8001bb8 <HAL_GPIO_Init+0x31c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d01f      	beq.n	8001aba <HAL_GPIO_Init+0x21e>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a4f      	ldr	r2, [pc, #316]	; (8001bbc <HAL_GPIO_Init+0x320>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d019      	beq.n	8001ab6 <HAL_GPIO_Init+0x21a>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a4e      	ldr	r2, [pc, #312]	; (8001bc0 <HAL_GPIO_Init+0x324>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d013      	beq.n	8001ab2 <HAL_GPIO_Init+0x216>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a4d      	ldr	r2, [pc, #308]	; (8001bc4 <HAL_GPIO_Init+0x328>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d00d      	beq.n	8001aae <HAL_GPIO_Init+0x212>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a4c      	ldr	r2, [pc, #304]	; (8001bc8 <HAL_GPIO_Init+0x32c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d007      	beq.n	8001aaa <HAL_GPIO_Init+0x20e>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a4b      	ldr	r2, [pc, #300]	; (8001bcc <HAL_GPIO_Init+0x330>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d101      	bne.n	8001aa6 <HAL_GPIO_Init+0x20a>
 8001aa2:	2307      	movs	r3, #7
 8001aa4:	e00e      	b.n	8001ac4 <HAL_GPIO_Init+0x228>
 8001aa6:	2308      	movs	r3, #8
 8001aa8:	e00c      	b.n	8001ac4 <HAL_GPIO_Init+0x228>
 8001aaa:	2306      	movs	r3, #6
 8001aac:	e00a      	b.n	8001ac4 <HAL_GPIO_Init+0x228>
 8001aae:	2305      	movs	r3, #5
 8001ab0:	e008      	b.n	8001ac4 <HAL_GPIO_Init+0x228>
 8001ab2:	2304      	movs	r3, #4
 8001ab4:	e006      	b.n	8001ac4 <HAL_GPIO_Init+0x228>
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e004      	b.n	8001ac4 <HAL_GPIO_Init+0x228>
 8001aba:	2302      	movs	r3, #2
 8001abc:	e002      	b.n	8001ac4 <HAL_GPIO_Init+0x228>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <HAL_GPIO_Init+0x228>
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	69fa      	ldr	r2, [r7, #28]
 8001ac6:	f002 0203 	and.w	r2, r2, #3
 8001aca:	0092      	lsls	r2, r2, #2
 8001acc:	4093      	lsls	r3, r2
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ad4:	4935      	ldr	r1, [pc, #212]	; (8001bac <HAL_GPIO_Init+0x310>)
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	089b      	lsrs	r3, r3, #2
 8001ada:	3302      	adds	r3, #2
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ae2:	4b3b      	ldr	r3, [pc, #236]	; (8001bd0 <HAL_GPIO_Init+0x334>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	43db      	mvns	r3, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4013      	ands	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b06:	4a32      	ldr	r2, [pc, #200]	; (8001bd0 <HAL_GPIO_Init+0x334>)
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b0c:	4b30      	ldr	r3, [pc, #192]	; (8001bd0 <HAL_GPIO_Init+0x334>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	43db      	mvns	r3, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d003      	beq.n	8001b30 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b30:	4a27      	ldr	r2, [pc, #156]	; (8001bd0 <HAL_GPIO_Init+0x334>)
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b36:	4b26      	ldr	r3, [pc, #152]	; (8001bd0 <HAL_GPIO_Init+0x334>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4013      	ands	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b5a:	4a1d      	ldr	r2, [pc, #116]	; (8001bd0 <HAL_GPIO_Init+0x334>)
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b60:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <HAL_GPIO_Init+0x334>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b84:	4a12      	ldr	r2, [pc, #72]	; (8001bd0 <HAL_GPIO_Init+0x334>)
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	61fb      	str	r3, [r7, #28]
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	2b0f      	cmp	r3, #15
 8001b94:	f67f ae90 	bls.w	80018b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b98:	bf00      	nop
 8001b9a:	bf00      	nop
 8001b9c:	3724      	adds	r7, #36	; 0x24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40013800 	.word	0x40013800
 8001bb0:	40020000 	.word	0x40020000
 8001bb4:	40020400 	.word	0x40020400
 8001bb8:	40020800 	.word	0x40020800
 8001bbc:	40020c00 	.word	0x40020c00
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40021400 	.word	0x40021400
 8001bc8:	40021800 	.word	0x40021800
 8001bcc:	40021c00 	.word	0x40021c00
 8001bd0:	40013c00 	.word	0x40013c00

08001bd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	807b      	strh	r3, [r7, #2]
 8001be0:	4613      	mov	r3, r2
 8001be2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001be4:	787b      	ldrb	r3, [r7, #1]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bea:	887a      	ldrh	r2, [r7, #2]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bf0:	e003      	b.n	8001bfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bf2:	887b      	ldrh	r3, [r7, #2]
 8001bf4:	041a      	lsls	r2, r3, #16
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	619a      	str	r2, [r3, #24]
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e267      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d075      	beq.n	8001d12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c26:	4b88      	ldr	r3, [pc, #544]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d00c      	beq.n	8001c4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c32:	4b85      	ldr	r3, [pc, #532]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d112      	bne.n	8001c64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c3e:	4b82      	ldr	r3, [pc, #520]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c4a:	d10b      	bne.n	8001c64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4c:	4b7e      	ldr	r3, [pc, #504]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d05b      	beq.n	8001d10 <HAL_RCC_OscConfig+0x108>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d157      	bne.n	8001d10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e242      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c6c:	d106      	bne.n	8001c7c <HAL_RCC_OscConfig+0x74>
 8001c6e:	4b76      	ldr	r3, [pc, #472]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a75      	ldr	r2, [pc, #468]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	e01d      	b.n	8001cb8 <HAL_RCC_OscConfig+0xb0>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c84:	d10c      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x98>
 8001c86:	4b70      	ldr	r3, [pc, #448]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a6f      	ldr	r2, [pc, #444]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	4b6d      	ldr	r3, [pc, #436]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a6c      	ldr	r2, [pc, #432]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e00b      	b.n	8001cb8 <HAL_RCC_OscConfig+0xb0>
 8001ca0:	4b69      	ldr	r3, [pc, #420]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a68      	ldr	r2, [pc, #416]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	4b66      	ldr	r3, [pc, #408]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a65      	ldr	r2, [pc, #404]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d013      	beq.n	8001ce8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7ff fc20 	bl	8001504 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cc8:	f7ff fc1c 	bl	8001504 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b64      	cmp	r3, #100	; 0x64
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e207      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cda:	4b5b      	ldr	r3, [pc, #364]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0f0      	beq.n	8001cc8 <HAL_RCC_OscConfig+0xc0>
 8001ce6:	e014      	b.n	8001d12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce8:	f7ff fc0c 	bl	8001504 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cf0:	f7ff fc08 	bl	8001504 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b64      	cmp	r3, #100	; 0x64
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e1f3      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d02:	4b51      	ldr	r3, [pc, #324]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f0      	bne.n	8001cf0 <HAL_RCC_OscConfig+0xe8>
 8001d0e:	e000      	b.n	8001d12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d063      	beq.n	8001de6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d1e:	4b4a      	ldr	r3, [pc, #296]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00b      	beq.n	8001d42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d2a:	4b47      	ldr	r3, [pc, #284]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d32:	2b08      	cmp	r3, #8
 8001d34:	d11c      	bne.n	8001d70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d36:	4b44      	ldr	r3, [pc, #272]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d116      	bne.n	8001d70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d42:	4b41      	ldr	r3, [pc, #260]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d005      	beq.n	8001d5a <HAL_RCC_OscConfig+0x152>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d001      	beq.n	8001d5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e1c7      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5a:	4b3b      	ldr	r3, [pc, #236]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4937      	ldr	r1, [pc, #220]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6e:	e03a      	b.n	8001de6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d020      	beq.n	8001dba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d78:	4b34      	ldr	r3, [pc, #208]	; (8001e4c <HAL_RCC_OscConfig+0x244>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7e:	f7ff fbc1 	bl	8001504 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d86:	f7ff fbbd 	bl	8001504 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e1a8      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d98:	4b2b      	ldr	r3, [pc, #172]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0f0      	beq.n	8001d86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da4:	4b28      	ldr	r3, [pc, #160]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	4925      	ldr	r1, [pc, #148]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	600b      	str	r3, [r1, #0]
 8001db8:	e015      	b.n	8001de6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dba:	4b24      	ldr	r3, [pc, #144]	; (8001e4c <HAL_RCC_OscConfig+0x244>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc0:	f7ff fba0 	bl	8001504 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dc8:	f7ff fb9c 	bl	8001504 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e187      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dda:	4b1b      	ldr	r3, [pc, #108]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d036      	beq.n	8001e60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d016      	beq.n	8001e28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dfa:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <HAL_RCC_OscConfig+0x248>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e00:	f7ff fb80 	bl	8001504 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e08:	f7ff fb7c 	bl	8001504 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e167      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e1a:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCC_OscConfig+0x200>
 8001e26:	e01b      	b.n	8001e60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e28:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <HAL_RCC_OscConfig+0x248>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2e:	f7ff fb69 	bl	8001504 <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e34:	e00e      	b.n	8001e54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e36:	f7ff fb65 	bl	8001504 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d907      	bls.n	8001e54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e150      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	42470000 	.word	0x42470000
 8001e50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e54:	4b88      	ldr	r3, [pc, #544]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1ea      	bne.n	8001e36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 8097 	beq.w	8001f9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e72:	4b81      	ldr	r3, [pc, #516]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10f      	bne.n	8001e9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60bb      	str	r3, [r7, #8]
 8001e82:	4b7d      	ldr	r3, [pc, #500]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	4a7c      	ldr	r2, [pc, #496]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8e:	4b7a      	ldr	r3, [pc, #488]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9e:	4b77      	ldr	r3, [pc, #476]	; (800207c <HAL_RCC_OscConfig+0x474>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d118      	bne.n	8001edc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eaa:	4b74      	ldr	r3, [pc, #464]	; (800207c <HAL_RCC_OscConfig+0x474>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a73      	ldr	r2, [pc, #460]	; (800207c <HAL_RCC_OscConfig+0x474>)
 8001eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eb6:	f7ff fb25 	bl	8001504 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ebe:	f7ff fb21 	bl	8001504 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e10c      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed0:	4b6a      	ldr	r3, [pc, #424]	; (800207c <HAL_RCC_OscConfig+0x474>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0f0      	beq.n	8001ebe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d106      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x2ea>
 8001ee4:	4b64      	ldr	r3, [pc, #400]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee8:	4a63      	ldr	r2, [pc, #396]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	6713      	str	r3, [r2, #112]	; 0x70
 8001ef0:	e01c      	b.n	8001f2c <HAL_RCC_OscConfig+0x324>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	2b05      	cmp	r3, #5
 8001ef8:	d10c      	bne.n	8001f14 <HAL_RCC_OscConfig+0x30c>
 8001efa:	4b5f      	ldr	r3, [pc, #380]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efe:	4a5e      	ldr	r2, [pc, #376]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f00:	f043 0304 	orr.w	r3, r3, #4
 8001f04:	6713      	str	r3, [r2, #112]	; 0x70
 8001f06:	4b5c      	ldr	r3, [pc, #368]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f0a:	4a5b      	ldr	r2, [pc, #364]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6713      	str	r3, [r2, #112]	; 0x70
 8001f12:	e00b      	b.n	8001f2c <HAL_RCC_OscConfig+0x324>
 8001f14:	4b58      	ldr	r3, [pc, #352]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f18:	4a57      	ldr	r2, [pc, #348]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f1a:	f023 0301 	bic.w	r3, r3, #1
 8001f1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f20:	4b55      	ldr	r3, [pc, #340]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f24:	4a54      	ldr	r2, [pc, #336]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f26:	f023 0304 	bic.w	r3, r3, #4
 8001f2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d015      	beq.n	8001f60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f34:	f7ff fae6 	bl	8001504 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f3a:	e00a      	b.n	8001f52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f3c:	f7ff fae2 	bl	8001504 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e0cb      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f52:	4b49      	ldr	r3, [pc, #292]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0ee      	beq.n	8001f3c <HAL_RCC_OscConfig+0x334>
 8001f5e:	e014      	b.n	8001f8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f60:	f7ff fad0 	bl	8001504 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f66:	e00a      	b.n	8001f7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f68:	f7ff facc 	bl	8001504 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e0b5      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f7e:	4b3e      	ldr	r3, [pc, #248]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1ee      	bne.n	8001f68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f8a:	7dfb      	ldrb	r3, [r7, #23]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d105      	bne.n	8001f9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f90:	4b39      	ldr	r3, [pc, #228]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	4a38      	ldr	r2, [pc, #224]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 80a1 	beq.w	80020e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fa6:	4b34      	ldr	r3, [pc, #208]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 030c 	and.w	r3, r3, #12
 8001fae:	2b08      	cmp	r3, #8
 8001fb0:	d05c      	beq.n	800206c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d141      	bne.n	800203e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fba:	4b31      	ldr	r3, [pc, #196]	; (8002080 <HAL_RCC_OscConfig+0x478>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc0:	f7ff faa0 	bl	8001504 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc8:	f7ff fa9c 	bl	8001504 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e087      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fda:	4b27      	ldr	r3, [pc, #156]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69da      	ldr	r2, [r3, #28]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	019b      	lsls	r3, r3, #6
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffc:	085b      	lsrs	r3, r3, #1
 8001ffe:	3b01      	subs	r3, #1
 8002000:	041b      	lsls	r3, r3, #16
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002008:	061b      	lsls	r3, r3, #24
 800200a:	491b      	ldr	r1, [pc, #108]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002010:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <HAL_RCC_OscConfig+0x478>)
 8002012:	2201      	movs	r2, #1
 8002014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002016:	f7ff fa75 	bl	8001504 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800201e:	f7ff fa71 	bl	8001504 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e05c      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002030:	4b11      	ldr	r3, [pc, #68]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0f0      	beq.n	800201e <HAL_RCC_OscConfig+0x416>
 800203c:	e054      	b.n	80020e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203e:	4b10      	ldr	r3, [pc, #64]	; (8002080 <HAL_RCC_OscConfig+0x478>)
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002044:	f7ff fa5e 	bl	8001504 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800204c:	f7ff fa5a 	bl	8001504 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e045      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205e:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x444>
 800206a:	e03d      	b.n	80020e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d107      	bne.n	8002084 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e038      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
 8002078:	40023800 	.word	0x40023800
 800207c:	40007000 	.word	0x40007000
 8002080:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002084:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <HAL_RCC_OscConfig+0x4ec>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d028      	beq.n	80020e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800209c:	429a      	cmp	r2, r3
 800209e:	d121      	bne.n	80020e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d11a      	bne.n	80020e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020b4:	4013      	ands	r3, r2
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020bc:	4293      	cmp	r3, r2
 80020be:	d111      	bne.n	80020e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ca:	085b      	lsrs	r3, r3, #1
 80020cc:	3b01      	subs	r3, #1
 80020ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d107      	bne.n	80020e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d001      	beq.n	80020e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e000      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40023800 	.word	0x40023800

080020f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e0cc      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800210c:	4b68      	ldr	r3, [pc, #416]	; (80022b0 <HAL_RCC_ClockConfig+0x1b8>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	429a      	cmp	r2, r3
 8002118:	d90c      	bls.n	8002134 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211a:	4b65      	ldr	r3, [pc, #404]	; (80022b0 <HAL_RCC_ClockConfig+0x1b8>)
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002122:	4b63      	ldr	r3, [pc, #396]	; (80022b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d001      	beq.n	8002134 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e0b8      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d020      	beq.n	8002182 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b00      	cmp	r3, #0
 800214a:	d005      	beq.n	8002158 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800214c:	4b59      	ldr	r3, [pc, #356]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	4a58      	ldr	r2, [pc, #352]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002152:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002156:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0308 	and.w	r3, r3, #8
 8002160:	2b00      	cmp	r3, #0
 8002162:	d005      	beq.n	8002170 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002164:	4b53      	ldr	r3, [pc, #332]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	4a52      	ldr	r2, [pc, #328]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 800216a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800216e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002170:	4b50      	ldr	r3, [pc, #320]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	494d      	ldr	r1, [pc, #308]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 800217e:	4313      	orrs	r3, r2
 8002180:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d044      	beq.n	8002218 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d107      	bne.n	80021a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002196:	4b47      	ldr	r3, [pc, #284]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d119      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e07f      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d003      	beq.n	80021b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	d107      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b6:	4b3f      	ldr	r3, [pc, #252]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d109      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e06f      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c6:	4b3b      	ldr	r3, [pc, #236]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e067      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021d6:	4b37      	ldr	r3, [pc, #220]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f023 0203 	bic.w	r2, r3, #3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	4934      	ldr	r1, [pc, #208]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021e8:	f7ff f98c 	bl	8001504 <HAL_GetTick>
 80021ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ee:	e00a      	b.n	8002206 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f0:	f7ff f988 	bl	8001504 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fe:	4293      	cmp	r3, r2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e04f      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002206:	4b2b      	ldr	r3, [pc, #172]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 020c 	and.w	r2, r3, #12
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	429a      	cmp	r2, r3
 8002216:	d1eb      	bne.n	80021f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002218:	4b25      	ldr	r3, [pc, #148]	; (80022b0 <HAL_RCC_ClockConfig+0x1b8>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d20c      	bcs.n	8002240 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002226:	4b22      	ldr	r3, [pc, #136]	; (80022b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800222e:	4b20      	ldr	r3, [pc, #128]	; (80022b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	429a      	cmp	r2, r3
 800223a:	d001      	beq.n	8002240 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e032      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b00      	cmp	r3, #0
 800224a:	d008      	beq.n	800225e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800224c:	4b19      	ldr	r3, [pc, #100]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	4916      	ldr	r1, [pc, #88]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	4313      	orrs	r3, r2
 800225c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b00      	cmp	r3, #0
 8002268:	d009      	beq.n	800227e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800226a:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	490e      	ldr	r1, [pc, #56]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 800227a:	4313      	orrs	r3, r2
 800227c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800227e:	f000 f821 	bl	80022c4 <HAL_RCC_GetSysClockFreq>
 8002282:	4602      	mov	r2, r0
 8002284:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	091b      	lsrs	r3, r3, #4
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	490a      	ldr	r1, [pc, #40]	; (80022b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002290:	5ccb      	ldrb	r3, [r1, r3]
 8002292:	fa22 f303 	lsr.w	r3, r2, r3
 8002296:	4a09      	ldr	r2, [pc, #36]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 8002298:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800229a:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <HAL_RCC_ClockConfig+0x1c8>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7fe ff1a 	bl	80010d8 <HAL_InitTick>

  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40023c00 	.word	0x40023c00
 80022b4:	40023800 	.word	0x40023800
 80022b8:	080077e4 	.word	0x080077e4
 80022bc:	20000000 	.word	0x20000000
 80022c0:	20000004 	.word	0x20000004

080022c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022c8:	b094      	sub	sp, #80	; 0x50
 80022ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	647b      	str	r3, [r7, #68]	; 0x44
 80022d0:	2300      	movs	r3, #0
 80022d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022d4:	2300      	movs	r3, #0
 80022d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80022d8:	2300      	movs	r3, #0
 80022da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022dc:	4b79      	ldr	r3, [pc, #484]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 030c 	and.w	r3, r3, #12
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d00d      	beq.n	8002304 <HAL_RCC_GetSysClockFreq+0x40>
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	f200 80e1 	bhi.w	80024b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d002      	beq.n	80022f8 <HAL_RCC_GetSysClockFreq+0x34>
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d003      	beq.n	80022fe <HAL_RCC_GetSysClockFreq+0x3a>
 80022f6:	e0db      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022f8:	4b73      	ldr	r3, [pc, #460]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80022fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80022fc:	e0db      	b.n	80024b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022fe:	4b73      	ldr	r3, [pc, #460]	; (80024cc <HAL_RCC_GetSysClockFreq+0x208>)
 8002300:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002302:	e0d8      	b.n	80024b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002304:	4b6f      	ldr	r3, [pc, #444]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800230c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800230e:	4b6d      	ldr	r3, [pc, #436]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d063      	beq.n	80023e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800231a:	4b6a      	ldr	r3, [pc, #424]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	099b      	lsrs	r3, r3, #6
 8002320:	2200      	movs	r2, #0
 8002322:	63bb      	str	r3, [r7, #56]	; 0x38
 8002324:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800232c:	633b      	str	r3, [r7, #48]	; 0x30
 800232e:	2300      	movs	r3, #0
 8002330:	637b      	str	r3, [r7, #52]	; 0x34
 8002332:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002336:	4622      	mov	r2, r4
 8002338:	462b      	mov	r3, r5
 800233a:	f04f 0000 	mov.w	r0, #0
 800233e:	f04f 0100 	mov.w	r1, #0
 8002342:	0159      	lsls	r1, r3, #5
 8002344:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002348:	0150      	lsls	r0, r2, #5
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	4621      	mov	r1, r4
 8002350:	1a51      	subs	r1, r2, r1
 8002352:	6139      	str	r1, [r7, #16]
 8002354:	4629      	mov	r1, r5
 8002356:	eb63 0301 	sbc.w	r3, r3, r1
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	f04f 0300 	mov.w	r3, #0
 8002364:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002368:	4659      	mov	r1, fp
 800236a:	018b      	lsls	r3, r1, #6
 800236c:	4651      	mov	r1, sl
 800236e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002372:	4651      	mov	r1, sl
 8002374:	018a      	lsls	r2, r1, #6
 8002376:	4651      	mov	r1, sl
 8002378:	ebb2 0801 	subs.w	r8, r2, r1
 800237c:	4659      	mov	r1, fp
 800237e:	eb63 0901 	sbc.w	r9, r3, r1
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	f04f 0300 	mov.w	r3, #0
 800238a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800238e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002392:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002396:	4690      	mov	r8, r2
 8002398:	4699      	mov	r9, r3
 800239a:	4623      	mov	r3, r4
 800239c:	eb18 0303 	adds.w	r3, r8, r3
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	462b      	mov	r3, r5
 80023a4:	eb49 0303 	adc.w	r3, r9, r3
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	f04f 0200 	mov.w	r2, #0
 80023ae:	f04f 0300 	mov.w	r3, #0
 80023b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80023b6:	4629      	mov	r1, r5
 80023b8:	024b      	lsls	r3, r1, #9
 80023ba:	4621      	mov	r1, r4
 80023bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023c0:	4621      	mov	r1, r4
 80023c2:	024a      	lsls	r2, r1, #9
 80023c4:	4610      	mov	r0, r2
 80023c6:	4619      	mov	r1, r3
 80023c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ca:	2200      	movs	r2, #0
 80023cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80023ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023d4:	f7fd ff4c 	bl	8000270 <__aeabi_uldivmod>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4613      	mov	r3, r2
 80023de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023e0:	e058      	b.n	8002494 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023e2:	4b38      	ldr	r3, [pc, #224]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	099b      	lsrs	r3, r3, #6
 80023e8:	2200      	movs	r2, #0
 80023ea:	4618      	mov	r0, r3
 80023ec:	4611      	mov	r1, r2
 80023ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80023f2:	623b      	str	r3, [r7, #32]
 80023f4:	2300      	movs	r3, #0
 80023f6:	627b      	str	r3, [r7, #36]	; 0x24
 80023f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80023fc:	4642      	mov	r2, r8
 80023fe:	464b      	mov	r3, r9
 8002400:	f04f 0000 	mov.w	r0, #0
 8002404:	f04f 0100 	mov.w	r1, #0
 8002408:	0159      	lsls	r1, r3, #5
 800240a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800240e:	0150      	lsls	r0, r2, #5
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4641      	mov	r1, r8
 8002416:	ebb2 0a01 	subs.w	sl, r2, r1
 800241a:	4649      	mov	r1, r9
 800241c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002420:	f04f 0200 	mov.w	r2, #0
 8002424:	f04f 0300 	mov.w	r3, #0
 8002428:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800242c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002430:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002434:	ebb2 040a 	subs.w	r4, r2, sl
 8002438:	eb63 050b 	sbc.w	r5, r3, fp
 800243c:	f04f 0200 	mov.w	r2, #0
 8002440:	f04f 0300 	mov.w	r3, #0
 8002444:	00eb      	lsls	r3, r5, #3
 8002446:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800244a:	00e2      	lsls	r2, r4, #3
 800244c:	4614      	mov	r4, r2
 800244e:	461d      	mov	r5, r3
 8002450:	4643      	mov	r3, r8
 8002452:	18e3      	adds	r3, r4, r3
 8002454:	603b      	str	r3, [r7, #0]
 8002456:	464b      	mov	r3, r9
 8002458:	eb45 0303 	adc.w	r3, r5, r3
 800245c:	607b      	str	r3, [r7, #4]
 800245e:	f04f 0200 	mov.w	r2, #0
 8002462:	f04f 0300 	mov.w	r3, #0
 8002466:	e9d7 4500 	ldrd	r4, r5, [r7]
 800246a:	4629      	mov	r1, r5
 800246c:	028b      	lsls	r3, r1, #10
 800246e:	4621      	mov	r1, r4
 8002470:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002474:	4621      	mov	r1, r4
 8002476:	028a      	lsls	r2, r1, #10
 8002478:	4610      	mov	r0, r2
 800247a:	4619      	mov	r1, r3
 800247c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800247e:	2200      	movs	r2, #0
 8002480:	61bb      	str	r3, [r7, #24]
 8002482:	61fa      	str	r2, [r7, #28]
 8002484:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002488:	f7fd fef2 	bl	8000270 <__aeabi_uldivmod>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4613      	mov	r3, r2
 8002492:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002494:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	0c1b      	lsrs	r3, r3, #16
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	3301      	adds	r3, #1
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80024a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024ae:	e002      	b.n	80024b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024b0:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80024b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3750      	adds	r7, #80	; 0x50
 80024bc:	46bd      	mov	sp, r7
 80024be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024c2:	bf00      	nop
 80024c4:	40023800 	.word	0x40023800
 80024c8:	00f42400 	.word	0x00f42400
 80024cc:	007a1200 	.word	0x007a1200

080024d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024d4:	4b03      	ldr	r3, [pc, #12]	; (80024e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80024d6:	681b      	ldr	r3, [r3, #0]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	20000000 	.word	0x20000000

080024e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024ec:	f7ff fff0 	bl	80024d0 <HAL_RCC_GetHCLKFreq>
 80024f0:	4602      	mov	r2, r0
 80024f2:	4b05      	ldr	r3, [pc, #20]	; (8002508 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	0a9b      	lsrs	r3, r3, #10
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	4903      	ldr	r1, [pc, #12]	; (800250c <HAL_RCC_GetPCLK1Freq+0x24>)
 80024fe:	5ccb      	ldrb	r3, [r1, r3]
 8002500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002504:	4618      	mov	r0, r3
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40023800 	.word	0x40023800
 800250c:	080077f4 	.word	0x080077f4

08002510 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002514:	f7ff ffdc 	bl	80024d0 <HAL_RCC_GetHCLKFreq>
 8002518:	4602      	mov	r2, r0
 800251a:	4b05      	ldr	r3, [pc, #20]	; (8002530 <HAL_RCC_GetPCLK2Freq+0x20>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	0b5b      	lsrs	r3, r3, #13
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	4903      	ldr	r1, [pc, #12]	; (8002534 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002526:	5ccb      	ldrb	r3, [r1, r3]
 8002528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800252c:	4618      	mov	r0, r3
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40023800 	.word	0x40023800
 8002534:	080077f4 	.word	0x080077f4

08002538 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	220f      	movs	r2, #15
 8002546:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002548:	4b12      	ldr	r3, [pc, #72]	; (8002594 <HAL_RCC_GetClockConfig+0x5c>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 0203 	and.w	r2, r3, #3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002554:	4b0f      	ldr	r3, [pc, #60]	; (8002594 <HAL_RCC_GetClockConfig+0x5c>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002560:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <HAL_RCC_GetClockConfig+0x5c>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800256c:	4b09      	ldr	r3, [pc, #36]	; (8002594 <HAL_RCC_GetClockConfig+0x5c>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	08db      	lsrs	r3, r3, #3
 8002572:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800257a:	4b07      	ldr	r3, [pc, #28]	; (8002598 <HAL_RCC_GetClockConfig+0x60>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0207 	and.w	r2, r3, #7
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	601a      	str	r2, [r3, #0]
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	40023800 	.word	0x40023800
 8002598:	40023c00 	.word	0x40023c00

0800259c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e041      	b.n	8002632 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d106      	bne.n	80025c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7fe fd10 	bl	8000fe8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2202      	movs	r2, #2
 80025cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3304      	adds	r3, #4
 80025d8:	4619      	mov	r1, r3
 80025da:	4610      	mov	r0, r2
 80025dc:	f000 f9fe 	bl	80029dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
	...

0800263c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b01      	cmp	r3, #1
 800264e:	d001      	beq.n	8002654 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e04e      	b.n	80026f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2202      	movs	r2, #2
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 0201 	orr.w	r2, r2, #1
 800266a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a23      	ldr	r2, [pc, #140]	; (8002700 <HAL_TIM_Base_Start_IT+0xc4>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d022      	beq.n	80026bc <HAL_TIM_Base_Start_IT+0x80>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800267e:	d01d      	beq.n	80026bc <HAL_TIM_Base_Start_IT+0x80>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a1f      	ldr	r2, [pc, #124]	; (8002704 <HAL_TIM_Base_Start_IT+0xc8>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d018      	beq.n	80026bc <HAL_TIM_Base_Start_IT+0x80>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a1e      	ldr	r2, [pc, #120]	; (8002708 <HAL_TIM_Base_Start_IT+0xcc>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d013      	beq.n	80026bc <HAL_TIM_Base_Start_IT+0x80>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a1c      	ldr	r2, [pc, #112]	; (800270c <HAL_TIM_Base_Start_IT+0xd0>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d00e      	beq.n	80026bc <HAL_TIM_Base_Start_IT+0x80>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a1b      	ldr	r2, [pc, #108]	; (8002710 <HAL_TIM_Base_Start_IT+0xd4>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d009      	beq.n	80026bc <HAL_TIM_Base_Start_IT+0x80>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a19      	ldr	r2, [pc, #100]	; (8002714 <HAL_TIM_Base_Start_IT+0xd8>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d004      	beq.n	80026bc <HAL_TIM_Base_Start_IT+0x80>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a18      	ldr	r2, [pc, #96]	; (8002718 <HAL_TIM_Base_Start_IT+0xdc>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d111      	bne.n	80026e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2b06      	cmp	r3, #6
 80026cc:	d010      	beq.n	80026f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f042 0201 	orr.w	r2, r2, #1
 80026dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026de:	e007      	b.n	80026f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 0201 	orr.w	r2, r2, #1
 80026ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3714      	adds	r7, #20
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	40010000 	.word	0x40010000
 8002704:	40000400 	.word	0x40000400
 8002708:	40000800 	.word	0x40000800
 800270c:	40000c00 	.word	0x40000c00
 8002710:	40010400 	.word	0x40010400
 8002714:	40014000 	.word	0x40014000
 8002718:	40001800 	.word	0x40001800

0800271c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 0201 	bic.w	r2, r2, #1
 8002732:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6a1a      	ldr	r2, [r3, #32]
 800273a:	f241 1311 	movw	r3, #4369	; 0x1111
 800273e:	4013      	ands	r3, r2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10f      	bne.n	8002764 <HAL_TIM_Base_Stop_IT+0x48>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6a1a      	ldr	r2, [r3, #32]
 800274a:	f240 4344 	movw	r3, #1092	; 0x444
 800274e:	4013      	ands	r3, r2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d107      	bne.n	8002764 <HAL_TIM_Base_Stop_IT+0x48>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0201 	bic.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b082      	sub	sp, #8
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b02      	cmp	r3, #2
 800278e:	d122      	bne.n	80027d6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b02      	cmp	r3, #2
 800279c:	d11b      	bne.n	80027d6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f06f 0202 	mvn.w	r2, #2
 80027a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	f003 0303 	and.w	r3, r3, #3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 f8ee 	bl	800299e <HAL_TIM_IC_CaptureCallback>
 80027c2:	e005      	b.n	80027d0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 f8e0 	bl	800298a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f8f1 	bl	80029b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b04      	cmp	r3, #4
 80027e2:	d122      	bne.n	800282a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	f003 0304 	and.w	r3, r3, #4
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	d11b      	bne.n	800282a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f06f 0204 	mvn.w	r2, #4
 80027fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2202      	movs	r2, #2
 8002800:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f8c4 	bl	800299e <HAL_TIM_IC_CaptureCallback>
 8002816:	e005      	b.n	8002824 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 f8b6 	bl	800298a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f8c7 	bl	80029b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	f003 0308 	and.w	r3, r3, #8
 8002834:	2b08      	cmp	r3, #8
 8002836:	d122      	bne.n	800287e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	f003 0308 	and.w	r3, r3, #8
 8002842:	2b08      	cmp	r3, #8
 8002844:	d11b      	bne.n	800287e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f06f 0208 	mvn.w	r2, #8
 800284e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2204      	movs	r2, #4
 8002854:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	69db      	ldr	r3, [r3, #28]
 800285c:	f003 0303 	and.w	r3, r3, #3
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 f89a 	bl	800299e <HAL_TIM_IC_CaptureCallback>
 800286a:	e005      	b.n	8002878 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 f88c 	bl	800298a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f89d 	bl	80029b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	2b10      	cmp	r3, #16
 800288a:	d122      	bne.n	80028d2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f003 0310 	and.w	r3, r3, #16
 8002896:	2b10      	cmp	r3, #16
 8002898:	d11b      	bne.n	80028d2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f06f 0210 	mvn.w	r2, #16
 80028a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2208      	movs	r2, #8
 80028a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 f870 	bl	800299e <HAL_TIM_IC_CaptureCallback>
 80028be:	e005      	b.n	80028cc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 f862 	bl	800298a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f873 	bl	80029b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d10e      	bne.n	80028fe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d107      	bne.n	80028fe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f06f 0201 	mvn.w	r2, #1
 80028f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7fe f8c5 	bl	8000a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002908:	2b80      	cmp	r3, #128	; 0x80
 800290a:	d10e      	bne.n	800292a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002916:	2b80      	cmp	r3, #128	; 0x80
 8002918:	d107      	bne.n	800292a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002922:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 f97f 	bl	8002c28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002934:	2b40      	cmp	r3, #64	; 0x40
 8002936:	d10e      	bne.n	8002956 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002942:	2b40      	cmp	r3, #64	; 0x40
 8002944:	d107      	bne.n	8002956 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800294e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 f838 	bl	80029c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	f003 0320 	and.w	r3, r3, #32
 8002960:	2b20      	cmp	r3, #32
 8002962:	d10e      	bne.n	8002982 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f003 0320 	and.w	r3, r3, #32
 800296e:	2b20      	cmp	r3, #32
 8002970:	d107      	bne.n	8002982 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f06f 0220 	mvn.w	r2, #32
 800297a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f949 	bl	8002c14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
	...

080029dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a40      	ldr	r2, [pc, #256]	; (8002af0 <TIM_Base_SetConfig+0x114>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d013      	beq.n	8002a1c <TIM_Base_SetConfig+0x40>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029fa:	d00f      	beq.n	8002a1c <TIM_Base_SetConfig+0x40>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a3d      	ldr	r2, [pc, #244]	; (8002af4 <TIM_Base_SetConfig+0x118>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d00b      	beq.n	8002a1c <TIM_Base_SetConfig+0x40>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a3c      	ldr	r2, [pc, #240]	; (8002af8 <TIM_Base_SetConfig+0x11c>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d007      	beq.n	8002a1c <TIM_Base_SetConfig+0x40>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a3b      	ldr	r2, [pc, #236]	; (8002afc <TIM_Base_SetConfig+0x120>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d003      	beq.n	8002a1c <TIM_Base_SetConfig+0x40>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a3a      	ldr	r2, [pc, #232]	; (8002b00 <TIM_Base_SetConfig+0x124>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d108      	bne.n	8002a2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a2f      	ldr	r2, [pc, #188]	; (8002af0 <TIM_Base_SetConfig+0x114>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d02b      	beq.n	8002a8e <TIM_Base_SetConfig+0xb2>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a3c:	d027      	beq.n	8002a8e <TIM_Base_SetConfig+0xb2>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a2c      	ldr	r2, [pc, #176]	; (8002af4 <TIM_Base_SetConfig+0x118>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d023      	beq.n	8002a8e <TIM_Base_SetConfig+0xb2>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a2b      	ldr	r2, [pc, #172]	; (8002af8 <TIM_Base_SetConfig+0x11c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d01f      	beq.n	8002a8e <TIM_Base_SetConfig+0xb2>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a2a      	ldr	r2, [pc, #168]	; (8002afc <TIM_Base_SetConfig+0x120>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d01b      	beq.n	8002a8e <TIM_Base_SetConfig+0xb2>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a29      	ldr	r2, [pc, #164]	; (8002b00 <TIM_Base_SetConfig+0x124>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d017      	beq.n	8002a8e <TIM_Base_SetConfig+0xb2>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a28      	ldr	r2, [pc, #160]	; (8002b04 <TIM_Base_SetConfig+0x128>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d013      	beq.n	8002a8e <TIM_Base_SetConfig+0xb2>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a27      	ldr	r2, [pc, #156]	; (8002b08 <TIM_Base_SetConfig+0x12c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d00f      	beq.n	8002a8e <TIM_Base_SetConfig+0xb2>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a26      	ldr	r2, [pc, #152]	; (8002b0c <TIM_Base_SetConfig+0x130>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d00b      	beq.n	8002a8e <TIM_Base_SetConfig+0xb2>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a25      	ldr	r2, [pc, #148]	; (8002b10 <TIM_Base_SetConfig+0x134>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d007      	beq.n	8002a8e <TIM_Base_SetConfig+0xb2>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a24      	ldr	r2, [pc, #144]	; (8002b14 <TIM_Base_SetConfig+0x138>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d003      	beq.n	8002a8e <TIM_Base_SetConfig+0xb2>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a23      	ldr	r2, [pc, #140]	; (8002b18 <TIM_Base_SetConfig+0x13c>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d108      	bne.n	8002aa0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a0a      	ldr	r2, [pc, #40]	; (8002af0 <TIM_Base_SetConfig+0x114>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d003      	beq.n	8002ad4 <TIM_Base_SetConfig+0xf8>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a0c      	ldr	r2, [pc, #48]	; (8002b00 <TIM_Base_SetConfig+0x124>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d103      	bne.n	8002adc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	691a      	ldr	r2, [r3, #16]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	615a      	str	r2, [r3, #20]
}
 8002ae2:	bf00      	nop
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	40010000 	.word	0x40010000
 8002af4:	40000400 	.word	0x40000400
 8002af8:	40000800 	.word	0x40000800
 8002afc:	40000c00 	.word	0x40000c00
 8002b00:	40010400 	.word	0x40010400
 8002b04:	40014000 	.word	0x40014000
 8002b08:	40014400 	.word	0x40014400
 8002b0c:	40014800 	.word	0x40014800
 8002b10:	40001800 	.word	0x40001800
 8002b14:	40001c00 	.word	0x40001c00
 8002b18:	40002000 	.word	0x40002000

08002b1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e05a      	b.n	8002bea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a21      	ldr	r2, [pc, #132]	; (8002bf8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d022      	beq.n	8002bbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b80:	d01d      	beq.n	8002bbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a1d      	ldr	r2, [pc, #116]	; (8002bfc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d018      	beq.n	8002bbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a1b      	ldr	r2, [pc, #108]	; (8002c00 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d013      	beq.n	8002bbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a1a      	ldr	r2, [pc, #104]	; (8002c04 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d00e      	beq.n	8002bbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a18      	ldr	r2, [pc, #96]	; (8002c08 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d009      	beq.n	8002bbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a17      	ldr	r2, [pc, #92]	; (8002c0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d004      	beq.n	8002bbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a15      	ldr	r2, [pc, #84]	; (8002c10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d10c      	bne.n	8002bd8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	40010000 	.word	0x40010000
 8002bfc:	40000400 	.word	0x40000400
 8002c00:	40000800 	.word	0x40000800
 8002c04:	40000c00 	.word	0x40000c00
 8002c08:	40010400 	.word	0x40010400
 8002c0c:	40014000 	.word	0x40014000
 8002c10:	40001800 	.word	0x40001800

08002c14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e03f      	b.n	8002cce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d106      	bne.n	8002c68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7fe f9e8 	bl	8001038 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2224      	movs	r2, #36	; 0x24
 8002c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68da      	ldr	r2, [r3, #12]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 fd7b 	bl	800377c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	691a      	ldr	r2, [r3, #16]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695a      	ldr	r2, [r3, #20]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ca4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b08a      	sub	sp, #40	; 0x28
 8002cda:	af02      	add	r7, sp, #8
 8002cdc:	60f8      	str	r0, [r7, #12]
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	603b      	str	r3, [r7, #0]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b20      	cmp	r3, #32
 8002cf4:	d17c      	bne.n	8002df0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <HAL_UART_Transmit+0x2c>
 8002cfc:	88fb      	ldrh	r3, [r7, #6]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e075      	b.n	8002df2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <HAL_UART_Transmit+0x3e>
 8002d10:	2302      	movs	r3, #2
 8002d12:	e06e      	b.n	8002df2 <HAL_UART_Transmit+0x11c>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2221      	movs	r2, #33	; 0x21
 8002d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d2a:	f7fe fbeb 	bl	8001504 <HAL_GetTick>
 8002d2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	88fa      	ldrh	r2, [r7, #6]
 8002d34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	88fa      	ldrh	r2, [r7, #6]
 8002d3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d44:	d108      	bne.n	8002d58 <HAL_UART_Transmit+0x82>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d104      	bne.n	8002d58 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	61bb      	str	r3, [r7, #24]
 8002d56:	e003      	b.n	8002d60 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d68:	e02a      	b.n	8002dc0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	2200      	movs	r2, #0
 8002d72:	2180      	movs	r1, #128	; 0x80
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 faf9 	bl	800336c <UART_WaitOnFlagUntilTimeout>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e036      	b.n	8002df2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10b      	bne.n	8002da2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	3302      	adds	r3, #2
 8002d9e:	61bb      	str	r3, [r7, #24]
 8002da0:	e007      	b.n	8002db2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	781a      	ldrb	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	3301      	adds	r3, #1
 8002db0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1cf      	bne.n	8002d6a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	2140      	movs	r1, #64	; 0x40
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 fac9 	bl	800336c <UART_WaitOnFlagUntilTimeout>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e006      	b.n	8002df2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002dec:	2300      	movs	r3, #0
 8002dee:	e000      	b.n	8002df2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002df0:	2302      	movs	r3, #2
  }
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3720      	adds	r7, #32
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
	...

08002dfc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b0ba      	sub	sp, #232	; 0xe8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002e3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10f      	bne.n	8002e62 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e46:	f003 0320 	and.w	r3, r3, #32
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d009      	beq.n	8002e62 <HAL_UART_IRQHandler+0x66>
 8002e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e52:	f003 0320 	and.w	r3, r3, #32
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fbd3 	bl	8003606 <UART_Receive_IT>
      return;
 8002e60:	e256      	b.n	8003310 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 80de 	beq.w	8003028 <HAL_UART_IRQHandler+0x22c>
 8002e6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d106      	bne.n	8002e86 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e7c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 80d1 	beq.w	8003028 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00b      	beq.n	8002eaa <HAL_UART_IRQHandler+0xae>
 8002e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d005      	beq.n	8002eaa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	f043 0201 	orr.w	r2, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00b      	beq.n	8002ece <HAL_UART_IRQHandler+0xd2>
 8002eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d005      	beq.n	8002ece <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	f043 0202 	orr.w	r2, r3, #2
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00b      	beq.n	8002ef2 <HAL_UART_IRQHandler+0xf6>
 8002eda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d005      	beq.n	8002ef2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	f043 0204 	orr.w	r2, r3, #4
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d011      	beq.n	8002f22 <HAL_UART_IRQHandler+0x126>
 8002efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f02:	f003 0320 	and.w	r3, r3, #32
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d105      	bne.n	8002f16 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d005      	beq.n	8002f22 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f043 0208 	orr.w	r2, r3, #8
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f000 81ed 	beq.w	8003306 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f30:	f003 0320 	and.w	r3, r3, #32
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d008      	beq.n	8002f4a <HAL_UART_IRQHandler+0x14e>
 8002f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f3c:	f003 0320 	and.w	r3, r3, #32
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d002      	beq.n	8002f4a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 fb5e 	bl	8003606 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f54:	2b40      	cmp	r3, #64	; 0x40
 8002f56:	bf0c      	ite	eq
 8002f58:	2301      	moveq	r3, #1
 8002f5a:	2300      	movne	r3, #0
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d103      	bne.n	8002f76 <HAL_UART_IRQHandler+0x17a>
 8002f6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d04f      	beq.n	8003016 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 fa66 	bl	8003448 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f86:	2b40      	cmp	r3, #64	; 0x40
 8002f88:	d141      	bne.n	800300e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	3314      	adds	r3, #20
 8002f90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f98:	e853 3f00 	ldrex	r3, [r3]
 8002f9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002fa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	3314      	adds	r3, #20
 8002fb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002fb6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002fba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002fc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002fc6:	e841 2300 	strex	r3, r2, [r1]
 8002fca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002fce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1d9      	bne.n	8002f8a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d013      	beq.n	8003006 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe2:	4a7d      	ldr	r2, [pc, #500]	; (80031d8 <HAL_UART_IRQHandler+0x3dc>)
 8002fe4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fe fc34 	bl	8001858 <HAL_DMA_Abort_IT>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d016      	beq.n	8003024 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003000:	4610      	mov	r0, r2
 8003002:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003004:	e00e      	b.n	8003024 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f99a 	bl	8003340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800300c:	e00a      	b.n	8003024 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f996 	bl	8003340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003014:	e006      	b.n	8003024 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f992 	bl	8003340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003022:	e170      	b.n	8003306 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003024:	bf00      	nop
    return;
 8003026:	e16e      	b.n	8003306 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302c:	2b01      	cmp	r3, #1
 800302e:	f040 814a 	bne.w	80032c6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003036:	f003 0310 	and.w	r3, r3, #16
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 8143 	beq.w	80032c6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003044:	f003 0310 	and.w	r3, r3, #16
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 813c 	beq.w	80032c6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800304e:	2300      	movs	r3, #0
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	60bb      	str	r3, [r7, #8]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	60bb      	str	r3, [r7, #8]
 8003062:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306e:	2b40      	cmp	r3, #64	; 0x40
 8003070:	f040 80b4 	bne.w	80031dc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003080:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 8140 	beq.w	800330a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800308e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003092:	429a      	cmp	r2, r3
 8003094:	f080 8139 	bcs.w	800330a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800309e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030aa:	f000 8088 	beq.w	80031be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	330c      	adds	r3, #12
 80030b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030bc:	e853 3f00 	ldrex	r3, [r3]
 80030c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80030c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	330c      	adds	r3, #12
 80030d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80030da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80030de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80030e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80030ea:	e841 2300 	strex	r3, r2, [r1]
 80030ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80030f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1d9      	bne.n	80030ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	3314      	adds	r3, #20
 8003100:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003102:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003104:	e853 3f00 	ldrex	r3, [r3]
 8003108:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800310a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800310c:	f023 0301 	bic.w	r3, r3, #1
 8003110:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	3314      	adds	r3, #20
 800311a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800311e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003122:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003124:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003126:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800312a:	e841 2300 	strex	r3, r2, [r1]
 800312e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003130:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1e1      	bne.n	80030fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	3314      	adds	r3, #20
 800313c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800313e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003140:	e853 3f00 	ldrex	r3, [r3]
 8003144:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003146:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800314c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	3314      	adds	r3, #20
 8003156:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800315a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800315c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800315e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003160:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003162:	e841 2300 	strex	r3, r2, [r1]
 8003166:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003168:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1e3      	bne.n	8003136 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2220      	movs	r2, #32
 8003172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	330c      	adds	r3, #12
 8003182:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003186:	e853 3f00 	ldrex	r3, [r3]
 800318a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800318c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800318e:	f023 0310 	bic.w	r3, r3, #16
 8003192:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	330c      	adds	r3, #12
 800319c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80031a0:	65ba      	str	r2, [r7, #88]	; 0x58
 80031a2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80031a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031a8:	e841 2300 	strex	r3, r2, [r1]
 80031ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80031ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1e3      	bne.n	800317c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7fe fadd 	bl	8001778 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	4619      	mov	r1, r3
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f8c0 	bl	8003354 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031d4:	e099      	b.n	800330a <HAL_UART_IRQHandler+0x50e>
 80031d6:	bf00      	nop
 80031d8:	0800350f 	.word	0x0800350f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 808b 	beq.w	800330e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80031f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 8086 	beq.w	800330e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	330c      	adds	r3, #12
 8003208:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800320c:	e853 3f00 	ldrex	r3, [r3]
 8003210:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003214:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003218:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	330c      	adds	r3, #12
 8003222:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003226:	647a      	str	r2, [r7, #68]	; 0x44
 8003228:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800322c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800322e:	e841 2300 	strex	r3, r2, [r1]
 8003232:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1e3      	bne.n	8003202 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	3314      	adds	r3, #20
 8003240:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	e853 3f00 	ldrex	r3, [r3]
 8003248:	623b      	str	r3, [r7, #32]
   return(result);
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	f023 0301 	bic.w	r3, r3, #1
 8003250:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	3314      	adds	r3, #20
 800325a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800325e:	633a      	str	r2, [r7, #48]	; 0x30
 8003260:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003262:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003266:	e841 2300 	strex	r3, r2, [r1]
 800326a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800326c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1e3      	bne.n	800323a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2220      	movs	r2, #32
 8003276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	330c      	adds	r3, #12
 8003286:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	e853 3f00 	ldrex	r3, [r3]
 800328e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f023 0310 	bic.w	r3, r3, #16
 8003296:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	330c      	adds	r3, #12
 80032a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80032a4:	61fa      	str	r2, [r7, #28]
 80032a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a8:	69b9      	ldr	r1, [r7, #24]
 80032aa:	69fa      	ldr	r2, [r7, #28]
 80032ac:	e841 2300 	strex	r3, r2, [r1]
 80032b0:	617b      	str	r3, [r7, #20]
   return(result);
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1e3      	bne.n	8003280 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032bc:	4619      	mov	r1, r3
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f848 	bl	8003354 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80032c4:	e023      	b.n	800330e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d009      	beq.n	80032e6 <HAL_UART_IRQHandler+0x4ea>
 80032d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f929 	bl	8003536 <UART_Transmit_IT>
    return;
 80032e4:	e014      	b.n	8003310 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00e      	beq.n	8003310 <HAL_UART_IRQHandler+0x514>
 80032f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d008      	beq.n	8003310 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f969 	bl	80035d6 <UART_EndTransmit_IT>
    return;
 8003304:	e004      	b.n	8003310 <HAL_UART_IRQHandler+0x514>
    return;
 8003306:	bf00      	nop
 8003308:	e002      	b.n	8003310 <HAL_UART_IRQHandler+0x514>
      return;
 800330a:	bf00      	nop
 800330c:	e000      	b.n	8003310 <HAL_UART_IRQHandler+0x514>
      return;
 800330e:	bf00      	nop
  }
}
 8003310:	37e8      	adds	r7, #232	; 0xe8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop

08003318 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	460b      	mov	r3, r1
 800335e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b090      	sub	sp, #64	; 0x40
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	603b      	str	r3, [r7, #0]
 8003378:	4613      	mov	r3, r2
 800337a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800337c:	e050      	b.n	8003420 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800337e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003384:	d04c      	beq.n	8003420 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003388:	2b00      	cmp	r3, #0
 800338a:	d007      	beq.n	800339c <UART_WaitOnFlagUntilTimeout+0x30>
 800338c:	f7fe f8ba 	bl	8001504 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003398:	429a      	cmp	r2, r3
 800339a:	d241      	bcs.n	8003420 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	330c      	adds	r3, #12
 80033a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a6:	e853 3f00 	ldrex	r3, [r3]
 80033aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	330c      	adds	r3, #12
 80033ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033bc:	637a      	str	r2, [r7, #52]	; 0x34
 80033be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033c4:	e841 2300 	strex	r3, r2, [r1]
 80033c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80033ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1e5      	bne.n	800339c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	3314      	adds	r3, #20
 80033d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	e853 3f00 	ldrex	r3, [r3]
 80033de:	613b      	str	r3, [r7, #16]
   return(result);
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	f023 0301 	bic.w	r3, r3, #1
 80033e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	3314      	adds	r3, #20
 80033ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033f0:	623a      	str	r2, [r7, #32]
 80033f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f4:	69f9      	ldr	r1, [r7, #28]
 80033f6:	6a3a      	ldr	r2, [r7, #32]
 80033f8:	e841 2300 	strex	r3, r2, [r1]
 80033fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1e5      	bne.n	80033d0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2220      	movs	r2, #32
 8003410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e00f      	b.n	8003440 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	4013      	ands	r3, r2
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	429a      	cmp	r2, r3
 800342e:	bf0c      	ite	eq
 8003430:	2301      	moveq	r3, #1
 8003432:	2300      	movne	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	461a      	mov	r2, r3
 8003438:	79fb      	ldrb	r3, [r7, #7]
 800343a:	429a      	cmp	r2, r3
 800343c:	d09f      	beq.n	800337e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3740      	adds	r7, #64	; 0x40
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003448:	b480      	push	{r7}
 800344a:	b095      	sub	sp, #84	; 0x54
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	330c      	adds	r3, #12
 8003456:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800345a:	e853 3f00 	ldrex	r3, [r3]
 800345e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003462:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003466:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	330c      	adds	r3, #12
 800346e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003470:	643a      	str	r2, [r7, #64]	; 0x40
 8003472:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003474:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003476:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003478:	e841 2300 	strex	r3, r2, [r1]
 800347c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800347e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1e5      	bne.n	8003450 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	3314      	adds	r3, #20
 800348a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	e853 3f00 	ldrex	r3, [r3]
 8003492:	61fb      	str	r3, [r7, #28]
   return(result);
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	f023 0301 	bic.w	r3, r3, #1
 800349a:	64bb      	str	r3, [r7, #72]	; 0x48
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	3314      	adds	r3, #20
 80034a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034ac:	e841 2300 	strex	r3, r2, [r1]
 80034b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1e5      	bne.n	8003484 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d119      	bne.n	80034f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	330c      	adds	r3, #12
 80034c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	e853 3f00 	ldrex	r3, [r3]
 80034ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	f023 0310 	bic.w	r3, r3, #16
 80034d6:	647b      	str	r3, [r7, #68]	; 0x44
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	330c      	adds	r3, #12
 80034de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034e0:	61ba      	str	r2, [r7, #24]
 80034e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e4:	6979      	ldr	r1, [r7, #20]
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	e841 2300 	strex	r3, r2, [r1]
 80034ec:	613b      	str	r3, [r7, #16]
   return(result);
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1e5      	bne.n	80034c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2220      	movs	r2, #32
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003502:	bf00      	nop
 8003504:	3754      	adds	r7, #84	; 0x54
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b084      	sub	sp, #16
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f7ff ff09 	bl	8003340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800352e:	bf00      	nop
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003536:	b480      	push	{r7}
 8003538:	b085      	sub	sp, #20
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b21      	cmp	r3, #33	; 0x21
 8003548:	d13e      	bne.n	80035c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003552:	d114      	bne.n	800357e <UART_Transmit_IT+0x48>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d110      	bne.n	800357e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	461a      	mov	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003570:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	1c9a      	adds	r2, r3, #2
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	621a      	str	r2, [r3, #32]
 800357c:	e008      	b.n	8003590 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	1c59      	adds	r1, r3, #1
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	6211      	str	r1, [r2, #32]
 8003588:	781a      	ldrb	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003594:	b29b      	uxth	r3, r3
 8003596:	3b01      	subs	r3, #1
 8003598:	b29b      	uxth	r3, r3
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	4619      	mov	r1, r3
 800359e:	84d1      	strh	r1, [r2, #38]	; 0x26
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10f      	bne.n	80035c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68da      	ldr	r2, [r3, #12]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80035c4:	2300      	movs	r3, #0
 80035c6:	e000      	b.n	80035ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80035c8:	2302      	movs	r3, #2
  }
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3714      	adds	r7, #20
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b082      	sub	sp, #8
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68da      	ldr	r2, [r3, #12]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7ff fe8e 	bl	8003318 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b08c      	sub	sp, #48	; 0x30
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b22      	cmp	r3, #34	; 0x22
 8003618:	f040 80ab 	bne.w	8003772 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003624:	d117      	bne.n	8003656 <UART_Receive_IT+0x50>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d113      	bne.n	8003656 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800362e:	2300      	movs	r3, #0
 8003630:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003636:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	b29b      	uxth	r3, r3
 8003640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003644:	b29a      	uxth	r2, r3
 8003646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003648:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364e:	1c9a      	adds	r2, r3, #2
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	629a      	str	r2, [r3, #40]	; 0x28
 8003654:	e026      	b.n	80036a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800365c:	2300      	movs	r3, #0
 800365e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003668:	d007      	beq.n	800367a <UART_Receive_IT+0x74>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10a      	bne.n	8003688 <UART_Receive_IT+0x82>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d106      	bne.n	8003688 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	b2da      	uxtb	r2, r3
 8003682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003684:	701a      	strb	r2, [r3, #0]
 8003686:	e008      	b.n	800369a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	b2db      	uxtb	r3, r3
 8003690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003694:	b2da      	uxtb	r2, r3
 8003696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003698:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369e:	1c5a      	adds	r2, r3, #1
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	3b01      	subs	r3, #1
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	4619      	mov	r1, r3
 80036b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d15a      	bne.n	800376e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68da      	ldr	r2, [r3, #12]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0220 	bic.w	r2, r2, #32
 80036c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695a      	ldr	r2, [r3, #20]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0201 	bic.w	r2, r2, #1
 80036e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d135      	bne.n	8003764 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	330c      	adds	r3, #12
 8003704:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	e853 3f00 	ldrex	r3, [r3]
 800370c:	613b      	str	r3, [r7, #16]
   return(result);
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	f023 0310 	bic.w	r3, r3, #16
 8003714:	627b      	str	r3, [r7, #36]	; 0x24
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	330c      	adds	r3, #12
 800371c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800371e:	623a      	str	r2, [r7, #32]
 8003720:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003722:	69f9      	ldr	r1, [r7, #28]
 8003724:	6a3a      	ldr	r2, [r7, #32]
 8003726:	e841 2300 	strex	r3, r2, [r1]
 800372a:	61bb      	str	r3, [r7, #24]
   return(result);
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1e5      	bne.n	80036fe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0310 	and.w	r3, r3, #16
 800373c:	2b10      	cmp	r3, #16
 800373e:	d10a      	bne.n	8003756 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003740:	2300      	movs	r3, #0
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800375a:	4619      	mov	r1, r3
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7ff fdf9 	bl	8003354 <HAL_UARTEx_RxEventCallback>
 8003762:	e002      	b.n	800376a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7ff fde1 	bl	800332c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800376a:	2300      	movs	r3, #0
 800376c:	e002      	b.n	8003774 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800376e:	2300      	movs	r3, #0
 8003770:	e000      	b.n	8003774 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003772:	2302      	movs	r3, #2
  }
}
 8003774:	4618      	mov	r0, r3
 8003776:	3730      	adds	r7, #48	; 0x30
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800377c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003780:	b0c0      	sub	sp, #256	; 0x100
 8003782:	af00      	add	r7, sp, #0
 8003784:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003798:	68d9      	ldr	r1, [r3, #12]
 800379a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	ea40 0301 	orr.w	r3, r0, r1
 80037a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	431a      	orrs	r2, r3
 80037b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	431a      	orrs	r2, r3
 80037bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037d4:	f021 010c 	bic.w	r1, r1, #12
 80037d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80037e2:	430b      	orrs	r3, r1
 80037e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80037f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f6:	6999      	ldr	r1, [r3, #24]
 80037f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	ea40 0301 	orr.w	r3, r0, r1
 8003802:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	4b8f      	ldr	r3, [pc, #572]	; (8003a48 <UART_SetConfig+0x2cc>)
 800380c:	429a      	cmp	r2, r3
 800380e:	d005      	beq.n	800381c <UART_SetConfig+0xa0>
 8003810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	4b8d      	ldr	r3, [pc, #564]	; (8003a4c <UART_SetConfig+0x2d0>)
 8003818:	429a      	cmp	r2, r3
 800381a:	d104      	bne.n	8003826 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800381c:	f7fe fe78 	bl	8002510 <HAL_RCC_GetPCLK2Freq>
 8003820:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003824:	e003      	b.n	800382e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003826:	f7fe fe5f 	bl	80024e8 <HAL_RCC_GetPCLK1Freq>
 800382a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800382e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003838:	f040 810c 	bne.w	8003a54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800383c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003840:	2200      	movs	r2, #0
 8003842:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003846:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800384a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800384e:	4622      	mov	r2, r4
 8003850:	462b      	mov	r3, r5
 8003852:	1891      	adds	r1, r2, r2
 8003854:	65b9      	str	r1, [r7, #88]	; 0x58
 8003856:	415b      	adcs	r3, r3
 8003858:	65fb      	str	r3, [r7, #92]	; 0x5c
 800385a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800385e:	4621      	mov	r1, r4
 8003860:	eb12 0801 	adds.w	r8, r2, r1
 8003864:	4629      	mov	r1, r5
 8003866:	eb43 0901 	adc.w	r9, r3, r1
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	f04f 0300 	mov.w	r3, #0
 8003872:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003876:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800387a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800387e:	4690      	mov	r8, r2
 8003880:	4699      	mov	r9, r3
 8003882:	4623      	mov	r3, r4
 8003884:	eb18 0303 	adds.w	r3, r8, r3
 8003888:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800388c:	462b      	mov	r3, r5
 800388e:	eb49 0303 	adc.w	r3, r9, r3
 8003892:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80038a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80038a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80038aa:	460b      	mov	r3, r1
 80038ac:	18db      	adds	r3, r3, r3
 80038ae:	653b      	str	r3, [r7, #80]	; 0x50
 80038b0:	4613      	mov	r3, r2
 80038b2:	eb42 0303 	adc.w	r3, r2, r3
 80038b6:	657b      	str	r3, [r7, #84]	; 0x54
 80038b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80038bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80038c0:	f7fc fcd6 	bl	8000270 <__aeabi_uldivmod>
 80038c4:	4602      	mov	r2, r0
 80038c6:	460b      	mov	r3, r1
 80038c8:	4b61      	ldr	r3, [pc, #388]	; (8003a50 <UART_SetConfig+0x2d4>)
 80038ca:	fba3 2302 	umull	r2, r3, r3, r2
 80038ce:	095b      	lsrs	r3, r3, #5
 80038d0:	011c      	lsls	r4, r3, #4
 80038d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038d6:	2200      	movs	r2, #0
 80038d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80038e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80038e4:	4642      	mov	r2, r8
 80038e6:	464b      	mov	r3, r9
 80038e8:	1891      	adds	r1, r2, r2
 80038ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80038ec:	415b      	adcs	r3, r3
 80038ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80038f4:	4641      	mov	r1, r8
 80038f6:	eb12 0a01 	adds.w	sl, r2, r1
 80038fa:	4649      	mov	r1, r9
 80038fc:	eb43 0b01 	adc.w	fp, r3, r1
 8003900:	f04f 0200 	mov.w	r2, #0
 8003904:	f04f 0300 	mov.w	r3, #0
 8003908:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800390c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003910:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003914:	4692      	mov	sl, r2
 8003916:	469b      	mov	fp, r3
 8003918:	4643      	mov	r3, r8
 800391a:	eb1a 0303 	adds.w	r3, sl, r3
 800391e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003922:	464b      	mov	r3, r9
 8003924:	eb4b 0303 	adc.w	r3, fp, r3
 8003928:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800392c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003938:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800393c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003940:	460b      	mov	r3, r1
 8003942:	18db      	adds	r3, r3, r3
 8003944:	643b      	str	r3, [r7, #64]	; 0x40
 8003946:	4613      	mov	r3, r2
 8003948:	eb42 0303 	adc.w	r3, r2, r3
 800394c:	647b      	str	r3, [r7, #68]	; 0x44
 800394e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003952:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003956:	f7fc fc8b 	bl	8000270 <__aeabi_uldivmod>
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	4611      	mov	r1, r2
 8003960:	4b3b      	ldr	r3, [pc, #236]	; (8003a50 <UART_SetConfig+0x2d4>)
 8003962:	fba3 2301 	umull	r2, r3, r3, r1
 8003966:	095b      	lsrs	r3, r3, #5
 8003968:	2264      	movs	r2, #100	; 0x64
 800396a:	fb02 f303 	mul.w	r3, r2, r3
 800396e:	1acb      	subs	r3, r1, r3
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003976:	4b36      	ldr	r3, [pc, #216]	; (8003a50 <UART_SetConfig+0x2d4>)
 8003978:	fba3 2302 	umull	r2, r3, r3, r2
 800397c:	095b      	lsrs	r3, r3, #5
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003984:	441c      	add	r4, r3
 8003986:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800398a:	2200      	movs	r2, #0
 800398c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003990:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003994:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003998:	4642      	mov	r2, r8
 800399a:	464b      	mov	r3, r9
 800399c:	1891      	adds	r1, r2, r2
 800399e:	63b9      	str	r1, [r7, #56]	; 0x38
 80039a0:	415b      	adcs	r3, r3
 80039a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80039a8:	4641      	mov	r1, r8
 80039aa:	1851      	adds	r1, r2, r1
 80039ac:	6339      	str	r1, [r7, #48]	; 0x30
 80039ae:	4649      	mov	r1, r9
 80039b0:	414b      	adcs	r3, r1
 80039b2:	637b      	str	r3, [r7, #52]	; 0x34
 80039b4:	f04f 0200 	mov.w	r2, #0
 80039b8:	f04f 0300 	mov.w	r3, #0
 80039bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80039c0:	4659      	mov	r1, fp
 80039c2:	00cb      	lsls	r3, r1, #3
 80039c4:	4651      	mov	r1, sl
 80039c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039ca:	4651      	mov	r1, sl
 80039cc:	00ca      	lsls	r2, r1, #3
 80039ce:	4610      	mov	r0, r2
 80039d0:	4619      	mov	r1, r3
 80039d2:	4603      	mov	r3, r0
 80039d4:	4642      	mov	r2, r8
 80039d6:	189b      	adds	r3, r3, r2
 80039d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039dc:	464b      	mov	r3, r9
 80039de:	460a      	mov	r2, r1
 80039e0:	eb42 0303 	adc.w	r3, r2, r3
 80039e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80039f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80039f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80039fc:	460b      	mov	r3, r1
 80039fe:	18db      	adds	r3, r3, r3
 8003a00:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a02:	4613      	mov	r3, r2
 8003a04:	eb42 0303 	adc.w	r3, r2, r3
 8003a08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003a12:	f7fc fc2d 	bl	8000270 <__aeabi_uldivmod>
 8003a16:	4602      	mov	r2, r0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	4b0d      	ldr	r3, [pc, #52]	; (8003a50 <UART_SetConfig+0x2d4>)
 8003a1c:	fba3 1302 	umull	r1, r3, r3, r2
 8003a20:	095b      	lsrs	r3, r3, #5
 8003a22:	2164      	movs	r1, #100	; 0x64
 8003a24:	fb01 f303 	mul.w	r3, r1, r3
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	3332      	adds	r3, #50	; 0x32
 8003a2e:	4a08      	ldr	r2, [pc, #32]	; (8003a50 <UART_SetConfig+0x2d4>)
 8003a30:	fba2 2303 	umull	r2, r3, r2, r3
 8003a34:	095b      	lsrs	r3, r3, #5
 8003a36:	f003 0207 	and.w	r2, r3, #7
 8003a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4422      	add	r2, r4
 8003a42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a44:	e105      	b.n	8003c52 <UART_SetConfig+0x4d6>
 8003a46:	bf00      	nop
 8003a48:	40011000 	.word	0x40011000
 8003a4c:	40011400 	.word	0x40011400
 8003a50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a5e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a66:	4642      	mov	r2, r8
 8003a68:	464b      	mov	r3, r9
 8003a6a:	1891      	adds	r1, r2, r2
 8003a6c:	6239      	str	r1, [r7, #32]
 8003a6e:	415b      	adcs	r3, r3
 8003a70:	627b      	str	r3, [r7, #36]	; 0x24
 8003a72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a76:	4641      	mov	r1, r8
 8003a78:	1854      	adds	r4, r2, r1
 8003a7a:	4649      	mov	r1, r9
 8003a7c:	eb43 0501 	adc.w	r5, r3, r1
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	f04f 0300 	mov.w	r3, #0
 8003a88:	00eb      	lsls	r3, r5, #3
 8003a8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a8e:	00e2      	lsls	r2, r4, #3
 8003a90:	4614      	mov	r4, r2
 8003a92:	461d      	mov	r5, r3
 8003a94:	4643      	mov	r3, r8
 8003a96:	18e3      	adds	r3, r4, r3
 8003a98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a9c:	464b      	mov	r3, r9
 8003a9e:	eb45 0303 	adc.w	r3, r5, r3
 8003aa2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ab2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ab6:	f04f 0200 	mov.w	r2, #0
 8003aba:	f04f 0300 	mov.w	r3, #0
 8003abe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ac2:	4629      	mov	r1, r5
 8003ac4:	008b      	lsls	r3, r1, #2
 8003ac6:	4621      	mov	r1, r4
 8003ac8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003acc:	4621      	mov	r1, r4
 8003ace:	008a      	lsls	r2, r1, #2
 8003ad0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003ad4:	f7fc fbcc 	bl	8000270 <__aeabi_uldivmod>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	460b      	mov	r3, r1
 8003adc:	4b60      	ldr	r3, [pc, #384]	; (8003c60 <UART_SetConfig+0x4e4>)
 8003ade:	fba3 2302 	umull	r2, r3, r3, r2
 8003ae2:	095b      	lsrs	r3, r3, #5
 8003ae4:	011c      	lsls	r4, r3, #4
 8003ae6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aea:	2200      	movs	r2, #0
 8003aec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003af0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003af4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003af8:	4642      	mov	r2, r8
 8003afa:	464b      	mov	r3, r9
 8003afc:	1891      	adds	r1, r2, r2
 8003afe:	61b9      	str	r1, [r7, #24]
 8003b00:	415b      	adcs	r3, r3
 8003b02:	61fb      	str	r3, [r7, #28]
 8003b04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b08:	4641      	mov	r1, r8
 8003b0a:	1851      	adds	r1, r2, r1
 8003b0c:	6139      	str	r1, [r7, #16]
 8003b0e:	4649      	mov	r1, r9
 8003b10:	414b      	adcs	r3, r1
 8003b12:	617b      	str	r3, [r7, #20]
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	f04f 0300 	mov.w	r3, #0
 8003b1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b20:	4659      	mov	r1, fp
 8003b22:	00cb      	lsls	r3, r1, #3
 8003b24:	4651      	mov	r1, sl
 8003b26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b2a:	4651      	mov	r1, sl
 8003b2c:	00ca      	lsls	r2, r1, #3
 8003b2e:	4610      	mov	r0, r2
 8003b30:	4619      	mov	r1, r3
 8003b32:	4603      	mov	r3, r0
 8003b34:	4642      	mov	r2, r8
 8003b36:	189b      	adds	r3, r3, r2
 8003b38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b3c:	464b      	mov	r3, r9
 8003b3e:	460a      	mov	r2, r1
 8003b40:	eb42 0303 	adc.w	r3, r2, r3
 8003b44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b52:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b54:	f04f 0200 	mov.w	r2, #0
 8003b58:	f04f 0300 	mov.w	r3, #0
 8003b5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b60:	4649      	mov	r1, r9
 8003b62:	008b      	lsls	r3, r1, #2
 8003b64:	4641      	mov	r1, r8
 8003b66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b6a:	4641      	mov	r1, r8
 8003b6c:	008a      	lsls	r2, r1, #2
 8003b6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b72:	f7fc fb7d 	bl	8000270 <__aeabi_uldivmod>
 8003b76:	4602      	mov	r2, r0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	4b39      	ldr	r3, [pc, #228]	; (8003c60 <UART_SetConfig+0x4e4>)
 8003b7c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b80:	095b      	lsrs	r3, r3, #5
 8003b82:	2164      	movs	r1, #100	; 0x64
 8003b84:	fb01 f303 	mul.w	r3, r1, r3
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	3332      	adds	r3, #50	; 0x32
 8003b8e:	4a34      	ldr	r2, [pc, #208]	; (8003c60 <UART_SetConfig+0x4e4>)
 8003b90:	fba2 2303 	umull	r2, r3, r2, r3
 8003b94:	095b      	lsrs	r3, r3, #5
 8003b96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b9a:	441c      	add	r4, r3
 8003b9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	673b      	str	r3, [r7, #112]	; 0x70
 8003ba4:	677a      	str	r2, [r7, #116]	; 0x74
 8003ba6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003baa:	4642      	mov	r2, r8
 8003bac:	464b      	mov	r3, r9
 8003bae:	1891      	adds	r1, r2, r2
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	415b      	adcs	r3, r3
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bba:	4641      	mov	r1, r8
 8003bbc:	1851      	adds	r1, r2, r1
 8003bbe:	6039      	str	r1, [r7, #0]
 8003bc0:	4649      	mov	r1, r9
 8003bc2:	414b      	adcs	r3, r1
 8003bc4:	607b      	str	r3, [r7, #4]
 8003bc6:	f04f 0200 	mov.w	r2, #0
 8003bca:	f04f 0300 	mov.w	r3, #0
 8003bce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003bd2:	4659      	mov	r1, fp
 8003bd4:	00cb      	lsls	r3, r1, #3
 8003bd6:	4651      	mov	r1, sl
 8003bd8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bdc:	4651      	mov	r1, sl
 8003bde:	00ca      	lsls	r2, r1, #3
 8003be0:	4610      	mov	r0, r2
 8003be2:	4619      	mov	r1, r3
 8003be4:	4603      	mov	r3, r0
 8003be6:	4642      	mov	r2, r8
 8003be8:	189b      	adds	r3, r3, r2
 8003bea:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bec:	464b      	mov	r3, r9
 8003bee:	460a      	mov	r2, r1
 8003bf0:	eb42 0303 	adc.w	r3, r2, r3
 8003bf4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	663b      	str	r3, [r7, #96]	; 0x60
 8003c00:	667a      	str	r2, [r7, #100]	; 0x64
 8003c02:	f04f 0200 	mov.w	r2, #0
 8003c06:	f04f 0300 	mov.w	r3, #0
 8003c0a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003c0e:	4649      	mov	r1, r9
 8003c10:	008b      	lsls	r3, r1, #2
 8003c12:	4641      	mov	r1, r8
 8003c14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c18:	4641      	mov	r1, r8
 8003c1a:	008a      	lsls	r2, r1, #2
 8003c1c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003c20:	f7fc fb26 	bl	8000270 <__aeabi_uldivmod>
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	4b0d      	ldr	r3, [pc, #52]	; (8003c60 <UART_SetConfig+0x4e4>)
 8003c2a:	fba3 1302 	umull	r1, r3, r3, r2
 8003c2e:	095b      	lsrs	r3, r3, #5
 8003c30:	2164      	movs	r1, #100	; 0x64
 8003c32:	fb01 f303 	mul.w	r3, r1, r3
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	3332      	adds	r3, #50	; 0x32
 8003c3c:	4a08      	ldr	r2, [pc, #32]	; (8003c60 <UART_SetConfig+0x4e4>)
 8003c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c42:	095b      	lsrs	r3, r3, #5
 8003c44:	f003 020f 	and.w	r2, r3, #15
 8003c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4422      	add	r2, r4
 8003c50:	609a      	str	r2, [r3, #8]
}
 8003c52:	bf00      	nop
 8003c54:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c5e:	bf00      	nop
 8003c60:	51eb851f 	.word	0x51eb851f

08003c64 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003c72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c76:	2b84      	cmp	r3, #132	; 0x84
 8003c78:	d005      	beq.n	8003c86 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003c7a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	4413      	add	r3, r2
 8003c82:	3303      	adds	r3, #3
 8003c84:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003c86:	68fb      	ldr	r3, [r7, #12]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003c98:	f000 faea 	bl	8004270 <vTaskStartScheduler>
  
  return osOK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003ca2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ca4:	b089      	sub	sp, #36	; 0x24
 8003ca6:	af04      	add	r7, sp, #16
 8003ca8:	6078      	str	r0, [r7, #4]
 8003caa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d020      	beq.n	8003cf6 <osThreadCreate+0x54>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d01c      	beq.n	8003cf6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685c      	ldr	r4, [r3, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681d      	ldr	r5, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691e      	ldr	r6, [r3, #16]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff ffc8 	bl	8003c64 <makeFreeRtosPriority>
 8003cd4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cde:	9202      	str	r2, [sp, #8]
 8003ce0:	9301      	str	r3, [sp, #4]
 8003ce2:	9100      	str	r1, [sp, #0]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	4632      	mov	r2, r6
 8003ce8:	4629      	mov	r1, r5
 8003cea:	4620      	mov	r0, r4
 8003cec:	f000 f8f8 	bl	8003ee0 <xTaskCreateStatic>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	60fb      	str	r3, [r7, #12]
 8003cf4:	e01c      	b.n	8003d30 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685c      	ldr	r4, [r3, #4]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d02:	b29e      	uxth	r6, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff ffaa 	bl	8003c64 <makeFreeRtosPriority>
 8003d10:	4602      	mov	r2, r0
 8003d12:	f107 030c 	add.w	r3, r7, #12
 8003d16:	9301      	str	r3, [sp, #4]
 8003d18:	9200      	str	r2, [sp, #0]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	4632      	mov	r2, r6
 8003d1e:	4629      	mov	r1, r5
 8003d20:	4620      	mov	r0, r4
 8003d22:	f000 f93a 	bl	8003f9a <xTaskCreate>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d001      	beq.n	8003d30 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	e000      	b.n	8003d32 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003d30:	68fb      	ldr	r3, [r7, #12]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d3a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b084      	sub	sp, #16
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <osDelay+0x16>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	e000      	b.n	8003d52 <osDelay+0x18>
 8003d50:	2301      	movs	r3, #1
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fa58 	bl	8004208 <vTaskDelay>
  
  return osOK;
 8003d58:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003d66:	f000 fd77 	bl	8004858 <xTaskGetSchedulerState>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d001      	beq.n	8003d74 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8003d70:	f000 ffb2 	bl	8004cd8 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8003d74:	bf00      	nop
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f103 0208 	add.w	r2, r3, #8
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f103 0208 	add.w	r2, r3, #8
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f103 0208 	add.w	r2, r3, #8
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b085      	sub	sp, #20
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
 8003dda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	601a      	str	r2, [r3, #0]
}
 8003e0e:	bf00      	nop
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b085      	sub	sp, #20
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
 8003e22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e30:	d103      	bne.n	8003e3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	e00c      	b.n	8003e54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	3308      	adds	r3, #8
 8003e3e:	60fb      	str	r3, [r7, #12]
 8003e40:	e002      	b.n	8003e48 <vListInsert+0x2e>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d2f6      	bcs.n	8003e42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	601a      	str	r2, [r3, #0]
}
 8003e80:	bf00      	nop
 8003e82:	3714      	adds	r7, #20
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	6892      	ldr	r2, [r2, #8]
 8003ea2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6852      	ldr	r2, [r2, #4]
 8003eac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d103      	bne.n	8003ec0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	1e5a      	subs	r2, r3, #1
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b08e      	sub	sp, #56	; 0x38
 8003ee4:	af04      	add	r7, sp, #16
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
 8003eec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10a      	bne.n	8003f0a <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef8:	f383 8811 	msr	BASEPRI, r3
 8003efc:	f3bf 8f6f 	isb	sy
 8003f00:	f3bf 8f4f 	dsb	sy
 8003f04:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f06:	bf00      	nop
 8003f08:	e7fe      	b.n	8003f08 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10a      	bne.n	8003f26 <xTaskCreateStatic+0x46>
	__asm volatile
 8003f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f14:	f383 8811 	msr	BASEPRI, r3
 8003f18:	f3bf 8f6f 	isb	sy
 8003f1c:	f3bf 8f4f 	dsb	sy
 8003f20:	61fb      	str	r3, [r7, #28]
}
 8003f22:	bf00      	nop
 8003f24:	e7fe      	b.n	8003f24 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003f26:	2354      	movs	r3, #84	; 0x54
 8003f28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	2b54      	cmp	r3, #84	; 0x54
 8003f2e:	d00a      	beq.n	8003f46 <xTaskCreateStatic+0x66>
	__asm volatile
 8003f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f34:	f383 8811 	msr	BASEPRI, r3
 8003f38:	f3bf 8f6f 	isb	sy
 8003f3c:	f3bf 8f4f 	dsb	sy
 8003f40:	61bb      	str	r3, [r7, #24]
}
 8003f42:	bf00      	nop
 8003f44:	e7fe      	b.n	8003f44 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003f46:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d01e      	beq.n	8003f8c <xTaskCreateStatic+0xac>
 8003f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d01b      	beq.n	8003f8c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f56:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f5c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	2202      	movs	r2, #2
 8003f62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f66:	2300      	movs	r3, #0
 8003f68:	9303      	str	r3, [sp, #12]
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6c:	9302      	str	r3, [sp, #8]
 8003f6e:	f107 0314 	add.w	r3, r7, #20
 8003f72:	9301      	str	r3, [sp, #4]
 8003f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	68b9      	ldr	r1, [r7, #8]
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 f850 	bl	8004024 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f86:	f000 f8d5 	bl	8004134 <prvAddNewTaskToReadyList>
 8003f8a:	e001      	b.n	8003f90 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003f90:	697b      	ldr	r3, [r7, #20]
	}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3728      	adds	r7, #40	; 0x28
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b08c      	sub	sp, #48	; 0x30
 8003f9e:	af04      	add	r7, sp, #16
 8003fa0:	60f8      	str	r0, [r7, #12]
 8003fa2:	60b9      	str	r1, [r7, #8]
 8003fa4:	603b      	str	r3, [r7, #0]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003faa:	88fb      	ldrh	r3, [r7, #6]
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 fee2 	bl	8004d78 <pvPortMalloc>
 8003fb4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00e      	beq.n	8003fda <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003fbc:	2054      	movs	r0, #84	; 0x54
 8003fbe:	f000 fedb 	bl	8004d78 <pvPortMalloc>
 8003fc2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	631a      	str	r2, [r3, #48]	; 0x30
 8003fd0:	e005      	b.n	8003fde <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003fd2:	6978      	ldr	r0, [r7, #20]
 8003fd4:	f000 ff9c 	bl	8004f10 <vPortFree>
 8003fd8:	e001      	b.n	8003fde <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d017      	beq.n	8004014 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003fec:	88fa      	ldrh	r2, [r7, #6]
 8003fee:	2300      	movs	r3, #0
 8003ff0:	9303      	str	r3, [sp, #12]
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	9302      	str	r3, [sp, #8]
 8003ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff8:	9301      	str	r3, [sp, #4]
 8003ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	68b9      	ldr	r1, [r7, #8]
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 f80e 	bl	8004024 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004008:	69f8      	ldr	r0, [r7, #28]
 800400a:	f000 f893 	bl	8004134 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800400e:	2301      	movs	r3, #1
 8004010:	61bb      	str	r3, [r7, #24]
 8004012:	e002      	b.n	800401a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004014:	f04f 33ff 	mov.w	r3, #4294967295
 8004018:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800401a:	69bb      	ldr	r3, [r7, #24]
	}
 800401c:	4618      	mov	r0, r3
 800401e:	3720      	adds	r7, #32
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b088      	sub	sp, #32
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
 8004030:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800403c:	3b01      	subs	r3, #1
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	4413      	add	r3, r2
 8004042:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	f023 0307 	bic.w	r3, r3, #7
 800404a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	f003 0307 	and.w	r3, r3, #7
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00a      	beq.n	800406c <prvInitialiseNewTask+0x48>
	__asm volatile
 8004056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405a:	f383 8811 	msr	BASEPRI, r3
 800405e:	f3bf 8f6f 	isb	sy
 8004062:	f3bf 8f4f 	dsb	sy
 8004066:	617b      	str	r3, [r7, #20]
}
 8004068:	bf00      	nop
 800406a:	e7fe      	b.n	800406a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d01f      	beq.n	80040b2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004072:	2300      	movs	r3, #0
 8004074:	61fb      	str	r3, [r7, #28]
 8004076:	e012      	b.n	800409e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	4413      	add	r3, r2
 800407e:	7819      	ldrb	r1, [r3, #0]
 8004080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	4413      	add	r3, r2
 8004086:	3334      	adds	r3, #52	; 0x34
 8004088:	460a      	mov	r2, r1
 800408a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	4413      	add	r3, r2
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d006      	beq.n	80040a6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	3301      	adds	r3, #1
 800409c:	61fb      	str	r3, [r7, #28]
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	2b0f      	cmp	r3, #15
 80040a2:	d9e9      	bls.n	8004078 <prvInitialiseNewTask+0x54>
 80040a4:	e000      	b.n	80040a8 <prvInitialiseNewTask+0x84>
			{
				break;
 80040a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80040a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040b0:	e003      	b.n	80040ba <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80040b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80040ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040bc:	2b06      	cmp	r3, #6
 80040be:	d901      	bls.n	80040c4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80040c0:	2306      	movs	r3, #6
 80040c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80040c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80040ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040ce:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80040d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d2:	2200      	movs	r2, #0
 80040d4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80040d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d8:	3304      	adds	r3, #4
 80040da:	4618      	mov	r0, r3
 80040dc:	f7ff fe6c 	bl	8003db8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80040e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e2:	3318      	adds	r3, #24
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff fe67 	bl	8003db8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80040ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f2:	f1c3 0207 	rsb	r2, r3, #7
 80040f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80040fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004102:	2200      	movs	r2, #0
 8004104:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004108:	2200      	movs	r2, #0
 800410a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	68f9      	ldr	r1, [r7, #12]
 8004112:	69b8      	ldr	r0, [r7, #24]
 8004114:	f000 fc24 	bl	8004960 <pxPortInitialiseStack>
 8004118:	4602      	mov	r2, r0
 800411a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800411e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004120:	2b00      	cmp	r3, #0
 8004122:	d002      	beq.n	800412a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004126:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004128:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800412a:	bf00      	nop
 800412c:	3720      	adds	r7, #32
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
	...

08004134 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800413c:	f000 fd3a 	bl	8004bb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004140:	4b2a      	ldr	r3, [pc, #168]	; (80041ec <prvAddNewTaskToReadyList+0xb8>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	3301      	adds	r3, #1
 8004146:	4a29      	ldr	r2, [pc, #164]	; (80041ec <prvAddNewTaskToReadyList+0xb8>)
 8004148:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800414a:	4b29      	ldr	r3, [pc, #164]	; (80041f0 <prvAddNewTaskToReadyList+0xbc>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d109      	bne.n	8004166 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004152:	4a27      	ldr	r2, [pc, #156]	; (80041f0 <prvAddNewTaskToReadyList+0xbc>)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004158:	4b24      	ldr	r3, [pc, #144]	; (80041ec <prvAddNewTaskToReadyList+0xb8>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d110      	bne.n	8004182 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004160:	f000 fabc 	bl	80046dc <prvInitialiseTaskLists>
 8004164:	e00d      	b.n	8004182 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004166:	4b23      	ldr	r3, [pc, #140]	; (80041f4 <prvAddNewTaskToReadyList+0xc0>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d109      	bne.n	8004182 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800416e:	4b20      	ldr	r3, [pc, #128]	; (80041f0 <prvAddNewTaskToReadyList+0xbc>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004178:	429a      	cmp	r2, r3
 800417a:	d802      	bhi.n	8004182 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800417c:	4a1c      	ldr	r2, [pc, #112]	; (80041f0 <prvAddNewTaskToReadyList+0xbc>)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004182:	4b1d      	ldr	r3, [pc, #116]	; (80041f8 <prvAddNewTaskToReadyList+0xc4>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	3301      	adds	r3, #1
 8004188:	4a1b      	ldr	r2, [pc, #108]	; (80041f8 <prvAddNewTaskToReadyList+0xc4>)
 800418a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004190:	2201      	movs	r2, #1
 8004192:	409a      	lsls	r2, r3
 8004194:	4b19      	ldr	r3, [pc, #100]	; (80041fc <prvAddNewTaskToReadyList+0xc8>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4313      	orrs	r3, r2
 800419a:	4a18      	ldr	r2, [pc, #96]	; (80041fc <prvAddNewTaskToReadyList+0xc8>)
 800419c:	6013      	str	r3, [r2, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a2:	4613      	mov	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4413      	add	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	4a15      	ldr	r2, [pc, #84]	; (8004200 <prvAddNewTaskToReadyList+0xcc>)
 80041ac:	441a      	add	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	3304      	adds	r3, #4
 80041b2:	4619      	mov	r1, r3
 80041b4:	4610      	mov	r0, r2
 80041b6:	f7ff fe0c 	bl	8003dd2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80041ba:	f000 fd2b 	bl	8004c14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80041be:	4b0d      	ldr	r3, [pc, #52]	; (80041f4 <prvAddNewTaskToReadyList+0xc0>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00e      	beq.n	80041e4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80041c6:	4b0a      	ldr	r3, [pc, #40]	; (80041f0 <prvAddNewTaskToReadyList+0xbc>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d207      	bcs.n	80041e4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80041d4:	4b0b      	ldr	r3, [pc, #44]	; (8004204 <prvAddNewTaskToReadyList+0xd0>)
 80041d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	f3bf 8f4f 	dsb	sy
 80041e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041e4:	bf00      	nop
 80041e6:	3708      	adds	r7, #8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	20001ef8 	.word	0x20001ef8
 80041f0:	20001df8 	.word	0x20001df8
 80041f4:	20001f04 	.word	0x20001f04
 80041f8:	20001f14 	.word	0x20001f14
 80041fc:	20001f00 	.word	0x20001f00
 8004200:	20001dfc 	.word	0x20001dfc
 8004204:	e000ed04 	.word	0xe000ed04

08004208 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004210:	2300      	movs	r3, #0
 8004212:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d017      	beq.n	800424a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800421a:	4b13      	ldr	r3, [pc, #76]	; (8004268 <vTaskDelay+0x60>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00a      	beq.n	8004238 <vTaskDelay+0x30>
	__asm volatile
 8004222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004226:	f383 8811 	msr	BASEPRI, r3
 800422a:	f3bf 8f6f 	isb	sy
 800422e:	f3bf 8f4f 	dsb	sy
 8004232:	60bb      	str	r3, [r7, #8]
}
 8004234:	bf00      	nop
 8004236:	e7fe      	b.n	8004236 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004238:	f000 f87a 	bl	8004330 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800423c:	2100      	movs	r1, #0
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 fb28 	bl	8004894 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004244:	f000 f882 	bl	800434c <xTaskResumeAll>
 8004248:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d107      	bne.n	8004260 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004250:	4b06      	ldr	r3, [pc, #24]	; (800426c <vTaskDelay+0x64>)
 8004252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004260:	bf00      	nop
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	20001f20 	.word	0x20001f20
 800426c:	e000ed04 	.word	0xe000ed04

08004270 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b08a      	sub	sp, #40	; 0x28
 8004274:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004276:	2300      	movs	r3, #0
 8004278:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800427a:	2300      	movs	r3, #0
 800427c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800427e:	463a      	mov	r2, r7
 8004280:	1d39      	adds	r1, r7, #4
 8004282:	f107 0308 	add.w	r3, r7, #8
 8004286:	4618      	mov	r0, r3
 8004288:	f7fc f974 	bl	8000574 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800428c:	6839      	ldr	r1, [r7, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	9202      	str	r2, [sp, #8]
 8004294:	9301      	str	r3, [sp, #4]
 8004296:	2300      	movs	r3, #0
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	2300      	movs	r3, #0
 800429c:	460a      	mov	r2, r1
 800429e:	491e      	ldr	r1, [pc, #120]	; (8004318 <vTaskStartScheduler+0xa8>)
 80042a0:	481e      	ldr	r0, [pc, #120]	; (800431c <vTaskStartScheduler+0xac>)
 80042a2:	f7ff fe1d 	bl	8003ee0 <xTaskCreateStatic>
 80042a6:	4603      	mov	r3, r0
 80042a8:	4a1d      	ldr	r2, [pc, #116]	; (8004320 <vTaskStartScheduler+0xb0>)
 80042aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80042ac:	4b1c      	ldr	r3, [pc, #112]	; (8004320 <vTaskStartScheduler+0xb0>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d002      	beq.n	80042ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80042b4:	2301      	movs	r3, #1
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	e001      	b.n	80042be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80042ba:	2300      	movs	r3, #0
 80042bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d116      	bne.n	80042f2 <vTaskStartScheduler+0x82>
	__asm volatile
 80042c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c8:	f383 8811 	msr	BASEPRI, r3
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	613b      	str	r3, [r7, #16]
}
 80042d6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80042d8:	4b12      	ldr	r3, [pc, #72]	; (8004324 <vTaskStartScheduler+0xb4>)
 80042da:	f04f 32ff 	mov.w	r2, #4294967295
 80042de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80042e0:	4b11      	ldr	r3, [pc, #68]	; (8004328 <vTaskStartScheduler+0xb8>)
 80042e2:	2201      	movs	r2, #1
 80042e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80042e6:	4b11      	ldr	r3, [pc, #68]	; (800432c <vTaskStartScheduler+0xbc>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80042ec:	f000 fbc0 	bl	8004a70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80042f0:	e00e      	b.n	8004310 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f8:	d10a      	bne.n	8004310 <vTaskStartScheduler+0xa0>
	__asm volatile
 80042fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fe:	f383 8811 	msr	BASEPRI, r3
 8004302:	f3bf 8f6f 	isb	sy
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	60fb      	str	r3, [r7, #12]
}
 800430c:	bf00      	nop
 800430e:	e7fe      	b.n	800430e <vTaskStartScheduler+0x9e>
}
 8004310:	bf00      	nop
 8004312:	3718      	adds	r7, #24
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	08007794 	.word	0x08007794
 800431c:	080046ad 	.word	0x080046ad
 8004320:	20001f1c 	.word	0x20001f1c
 8004324:	20001f18 	.word	0x20001f18
 8004328:	20001f04 	.word	0x20001f04
 800432c:	20001efc 	.word	0x20001efc

08004330 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004334:	4b04      	ldr	r3, [pc, #16]	; (8004348 <vTaskSuspendAll+0x18>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3301      	adds	r3, #1
 800433a:	4a03      	ldr	r2, [pc, #12]	; (8004348 <vTaskSuspendAll+0x18>)
 800433c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800433e:	bf00      	nop
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	20001f20 	.word	0x20001f20

0800434c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004352:	2300      	movs	r3, #0
 8004354:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004356:	2300      	movs	r3, #0
 8004358:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800435a:	4b41      	ldr	r3, [pc, #260]	; (8004460 <xTaskResumeAll+0x114>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10a      	bne.n	8004378 <xTaskResumeAll+0x2c>
	__asm volatile
 8004362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004366:	f383 8811 	msr	BASEPRI, r3
 800436a:	f3bf 8f6f 	isb	sy
 800436e:	f3bf 8f4f 	dsb	sy
 8004372:	603b      	str	r3, [r7, #0]
}
 8004374:	bf00      	nop
 8004376:	e7fe      	b.n	8004376 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004378:	f000 fc1c 	bl	8004bb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800437c:	4b38      	ldr	r3, [pc, #224]	; (8004460 <xTaskResumeAll+0x114>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	3b01      	subs	r3, #1
 8004382:	4a37      	ldr	r2, [pc, #220]	; (8004460 <xTaskResumeAll+0x114>)
 8004384:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004386:	4b36      	ldr	r3, [pc, #216]	; (8004460 <xTaskResumeAll+0x114>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d161      	bne.n	8004452 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800438e:	4b35      	ldr	r3, [pc, #212]	; (8004464 <xTaskResumeAll+0x118>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d05d      	beq.n	8004452 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004396:	e02e      	b.n	80043f6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004398:	4b33      	ldr	r3, [pc, #204]	; (8004468 <xTaskResumeAll+0x11c>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	3318      	adds	r3, #24
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7ff fd71 	bl	8003e8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	3304      	adds	r3, #4
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7ff fd6c 	bl	8003e8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b8:	2201      	movs	r2, #1
 80043ba:	409a      	lsls	r2, r3
 80043bc:	4b2b      	ldr	r3, [pc, #172]	; (800446c <xTaskResumeAll+0x120>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	4a2a      	ldr	r2, [pc, #168]	; (800446c <xTaskResumeAll+0x120>)
 80043c4:	6013      	str	r3, [r2, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ca:	4613      	mov	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4a27      	ldr	r2, [pc, #156]	; (8004470 <xTaskResumeAll+0x124>)
 80043d4:	441a      	add	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	3304      	adds	r3, #4
 80043da:	4619      	mov	r1, r3
 80043dc:	4610      	mov	r0, r2
 80043de:	f7ff fcf8 	bl	8003dd2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e6:	4b23      	ldr	r3, [pc, #140]	; (8004474 <xTaskResumeAll+0x128>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d302      	bcc.n	80043f6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80043f0:	4b21      	ldr	r3, [pc, #132]	; (8004478 <xTaskResumeAll+0x12c>)
 80043f2:	2201      	movs	r2, #1
 80043f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043f6:	4b1c      	ldr	r3, [pc, #112]	; (8004468 <xTaskResumeAll+0x11c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1cc      	bne.n	8004398 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004404:	f000 fa08 	bl	8004818 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004408:	4b1c      	ldr	r3, [pc, #112]	; (800447c <xTaskResumeAll+0x130>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d010      	beq.n	8004436 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004414:	f000 f836 	bl	8004484 <xTaskIncrementTick>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800441e:	4b16      	ldr	r3, [pc, #88]	; (8004478 <xTaskResumeAll+0x12c>)
 8004420:	2201      	movs	r2, #1
 8004422:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3b01      	subs	r3, #1
 8004428:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1f1      	bne.n	8004414 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004430:	4b12      	ldr	r3, [pc, #72]	; (800447c <xTaskResumeAll+0x130>)
 8004432:	2200      	movs	r2, #0
 8004434:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004436:	4b10      	ldr	r3, [pc, #64]	; (8004478 <xTaskResumeAll+0x12c>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d009      	beq.n	8004452 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800443e:	2301      	movs	r3, #1
 8004440:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004442:	4b0f      	ldr	r3, [pc, #60]	; (8004480 <xTaskResumeAll+0x134>)
 8004444:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004448:	601a      	str	r2, [r3, #0]
 800444a:	f3bf 8f4f 	dsb	sy
 800444e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004452:	f000 fbdf 	bl	8004c14 <vPortExitCritical>

	return xAlreadyYielded;
 8004456:	68bb      	ldr	r3, [r7, #8]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	20001f20 	.word	0x20001f20
 8004464:	20001ef8 	.word	0x20001ef8
 8004468:	20001eb8 	.word	0x20001eb8
 800446c:	20001f00 	.word	0x20001f00
 8004470:	20001dfc 	.word	0x20001dfc
 8004474:	20001df8 	.word	0x20001df8
 8004478:	20001f0c 	.word	0x20001f0c
 800447c:	20001f08 	.word	0x20001f08
 8004480:	e000ed04 	.word	0xe000ed04

08004484 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800448a:	2300      	movs	r3, #0
 800448c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800448e:	4b4e      	ldr	r3, [pc, #312]	; (80045c8 <xTaskIncrementTick+0x144>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	f040 808e 	bne.w	80045b4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004498:	4b4c      	ldr	r3, [pc, #304]	; (80045cc <xTaskIncrementTick+0x148>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3301      	adds	r3, #1
 800449e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80044a0:	4a4a      	ldr	r2, [pc, #296]	; (80045cc <xTaskIncrementTick+0x148>)
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d120      	bne.n	80044ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80044ac:	4b48      	ldr	r3, [pc, #288]	; (80045d0 <xTaskIncrementTick+0x14c>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00a      	beq.n	80044cc <xTaskIncrementTick+0x48>
	__asm volatile
 80044b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ba:	f383 8811 	msr	BASEPRI, r3
 80044be:	f3bf 8f6f 	isb	sy
 80044c2:	f3bf 8f4f 	dsb	sy
 80044c6:	603b      	str	r3, [r7, #0]
}
 80044c8:	bf00      	nop
 80044ca:	e7fe      	b.n	80044ca <xTaskIncrementTick+0x46>
 80044cc:	4b40      	ldr	r3, [pc, #256]	; (80045d0 <xTaskIncrementTick+0x14c>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	60fb      	str	r3, [r7, #12]
 80044d2:	4b40      	ldr	r3, [pc, #256]	; (80045d4 <xTaskIncrementTick+0x150>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a3e      	ldr	r2, [pc, #248]	; (80045d0 <xTaskIncrementTick+0x14c>)
 80044d8:	6013      	str	r3, [r2, #0]
 80044da:	4a3e      	ldr	r2, [pc, #248]	; (80045d4 <xTaskIncrementTick+0x150>)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6013      	str	r3, [r2, #0]
 80044e0:	4b3d      	ldr	r3, [pc, #244]	; (80045d8 <xTaskIncrementTick+0x154>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	3301      	adds	r3, #1
 80044e6:	4a3c      	ldr	r2, [pc, #240]	; (80045d8 <xTaskIncrementTick+0x154>)
 80044e8:	6013      	str	r3, [r2, #0]
 80044ea:	f000 f995 	bl	8004818 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80044ee:	4b3b      	ldr	r3, [pc, #236]	; (80045dc <xTaskIncrementTick+0x158>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d348      	bcc.n	800458a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044f8:	4b35      	ldr	r3, [pc, #212]	; (80045d0 <xTaskIncrementTick+0x14c>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d104      	bne.n	800450c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004502:	4b36      	ldr	r3, [pc, #216]	; (80045dc <xTaskIncrementTick+0x158>)
 8004504:	f04f 32ff 	mov.w	r2, #4294967295
 8004508:	601a      	str	r2, [r3, #0]
					break;
 800450a:	e03e      	b.n	800458a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800450c:	4b30      	ldr	r3, [pc, #192]	; (80045d0 <xTaskIncrementTick+0x14c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	429a      	cmp	r2, r3
 8004522:	d203      	bcs.n	800452c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004524:	4a2d      	ldr	r2, [pc, #180]	; (80045dc <xTaskIncrementTick+0x158>)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800452a:	e02e      	b.n	800458a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	3304      	adds	r3, #4
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff fcab 	bl	8003e8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453a:	2b00      	cmp	r3, #0
 800453c:	d004      	beq.n	8004548 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	3318      	adds	r3, #24
 8004542:	4618      	mov	r0, r3
 8004544:	f7ff fca2 	bl	8003e8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454c:	2201      	movs	r2, #1
 800454e:	409a      	lsls	r2, r3
 8004550:	4b23      	ldr	r3, [pc, #140]	; (80045e0 <xTaskIncrementTick+0x15c>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4313      	orrs	r3, r2
 8004556:	4a22      	ldr	r2, [pc, #136]	; (80045e0 <xTaskIncrementTick+0x15c>)
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800455e:	4613      	mov	r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4413      	add	r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	4a1f      	ldr	r2, [pc, #124]	; (80045e4 <xTaskIncrementTick+0x160>)
 8004568:	441a      	add	r2, r3
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	3304      	adds	r3, #4
 800456e:	4619      	mov	r1, r3
 8004570:	4610      	mov	r0, r2
 8004572:	f7ff fc2e 	bl	8003dd2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800457a:	4b1b      	ldr	r3, [pc, #108]	; (80045e8 <xTaskIncrementTick+0x164>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004580:	429a      	cmp	r2, r3
 8004582:	d3b9      	bcc.n	80044f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004584:	2301      	movs	r3, #1
 8004586:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004588:	e7b6      	b.n	80044f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800458a:	4b17      	ldr	r3, [pc, #92]	; (80045e8 <xTaskIncrementTick+0x164>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004590:	4914      	ldr	r1, [pc, #80]	; (80045e4 <xTaskIncrementTick+0x160>)
 8004592:	4613      	mov	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4413      	add	r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	440b      	add	r3, r1
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d901      	bls.n	80045a6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80045a2:	2301      	movs	r3, #1
 80045a4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80045a6:	4b11      	ldr	r3, [pc, #68]	; (80045ec <xTaskIncrementTick+0x168>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d007      	beq.n	80045be <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80045ae:	2301      	movs	r3, #1
 80045b0:	617b      	str	r3, [r7, #20]
 80045b2:	e004      	b.n	80045be <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80045b4:	4b0e      	ldr	r3, [pc, #56]	; (80045f0 <xTaskIncrementTick+0x16c>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3301      	adds	r3, #1
 80045ba:	4a0d      	ldr	r2, [pc, #52]	; (80045f0 <xTaskIncrementTick+0x16c>)
 80045bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80045be:	697b      	ldr	r3, [r7, #20]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3718      	adds	r7, #24
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	20001f20 	.word	0x20001f20
 80045cc:	20001efc 	.word	0x20001efc
 80045d0:	20001eb0 	.word	0x20001eb0
 80045d4:	20001eb4 	.word	0x20001eb4
 80045d8:	20001f10 	.word	0x20001f10
 80045dc:	20001f18 	.word	0x20001f18
 80045e0:	20001f00 	.word	0x20001f00
 80045e4:	20001dfc 	.word	0x20001dfc
 80045e8:	20001df8 	.word	0x20001df8
 80045ec:	20001f0c 	.word	0x20001f0c
 80045f0:	20001f08 	.word	0x20001f08

080045f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80045f4:	b480      	push	{r7}
 80045f6:	b087      	sub	sp, #28
 80045f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80045fa:	4b27      	ldr	r3, [pc, #156]	; (8004698 <vTaskSwitchContext+0xa4>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004602:	4b26      	ldr	r3, [pc, #152]	; (800469c <vTaskSwitchContext+0xa8>)
 8004604:	2201      	movs	r2, #1
 8004606:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004608:	e03f      	b.n	800468a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800460a:	4b24      	ldr	r3, [pc, #144]	; (800469c <vTaskSwitchContext+0xa8>)
 800460c:	2200      	movs	r2, #0
 800460e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004610:	4b23      	ldr	r3, [pc, #140]	; (80046a0 <vTaskSwitchContext+0xac>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	fab3 f383 	clz	r3, r3
 800461c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800461e:	7afb      	ldrb	r3, [r7, #11]
 8004620:	f1c3 031f 	rsb	r3, r3, #31
 8004624:	617b      	str	r3, [r7, #20]
 8004626:	491f      	ldr	r1, [pc, #124]	; (80046a4 <vTaskSwitchContext+0xb0>)
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	4613      	mov	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4413      	add	r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	440b      	add	r3, r1
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10a      	bne.n	8004650 <vTaskSwitchContext+0x5c>
	__asm volatile
 800463a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463e:	f383 8811 	msr	BASEPRI, r3
 8004642:	f3bf 8f6f 	isb	sy
 8004646:	f3bf 8f4f 	dsb	sy
 800464a:	607b      	str	r3, [r7, #4]
}
 800464c:	bf00      	nop
 800464e:	e7fe      	b.n	800464e <vTaskSwitchContext+0x5a>
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	4613      	mov	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4a12      	ldr	r2, [pc, #72]	; (80046a4 <vTaskSwitchContext+0xb0>)
 800465c:	4413      	add	r3, r2
 800465e:	613b      	str	r3, [r7, #16]
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	605a      	str	r2, [r3, #4]
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	3308      	adds	r3, #8
 8004672:	429a      	cmp	r2, r3
 8004674:	d104      	bne.n	8004680 <vTaskSwitchContext+0x8c>
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	605a      	str	r2, [r3, #4]
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	4a08      	ldr	r2, [pc, #32]	; (80046a8 <vTaskSwitchContext+0xb4>)
 8004688:	6013      	str	r3, [r2, #0]
}
 800468a:	bf00      	nop
 800468c:	371c      	adds	r7, #28
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	20001f20 	.word	0x20001f20
 800469c:	20001f0c 	.word	0x20001f0c
 80046a0:	20001f00 	.word	0x20001f00
 80046a4:	20001dfc 	.word	0x20001dfc
 80046a8:	20001df8 	.word	0x20001df8

080046ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80046b4:	f000 f852 	bl	800475c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80046b8:	4b06      	ldr	r3, [pc, #24]	; (80046d4 <prvIdleTask+0x28>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d9f9      	bls.n	80046b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80046c0:	4b05      	ldr	r3, [pc, #20]	; (80046d8 <prvIdleTask+0x2c>)
 80046c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80046d0:	e7f0      	b.n	80046b4 <prvIdleTask+0x8>
 80046d2:	bf00      	nop
 80046d4:	20001dfc 	.word	0x20001dfc
 80046d8:	e000ed04 	.word	0xe000ed04

080046dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046e2:	2300      	movs	r3, #0
 80046e4:	607b      	str	r3, [r7, #4]
 80046e6:	e00c      	b.n	8004702 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	4613      	mov	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4413      	add	r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	4a12      	ldr	r2, [pc, #72]	; (800473c <prvInitialiseTaskLists+0x60>)
 80046f4:	4413      	add	r3, r2
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7ff fb3e 	bl	8003d78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3301      	adds	r3, #1
 8004700:	607b      	str	r3, [r7, #4]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b06      	cmp	r3, #6
 8004706:	d9ef      	bls.n	80046e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004708:	480d      	ldr	r0, [pc, #52]	; (8004740 <prvInitialiseTaskLists+0x64>)
 800470a:	f7ff fb35 	bl	8003d78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800470e:	480d      	ldr	r0, [pc, #52]	; (8004744 <prvInitialiseTaskLists+0x68>)
 8004710:	f7ff fb32 	bl	8003d78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004714:	480c      	ldr	r0, [pc, #48]	; (8004748 <prvInitialiseTaskLists+0x6c>)
 8004716:	f7ff fb2f 	bl	8003d78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800471a:	480c      	ldr	r0, [pc, #48]	; (800474c <prvInitialiseTaskLists+0x70>)
 800471c:	f7ff fb2c 	bl	8003d78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004720:	480b      	ldr	r0, [pc, #44]	; (8004750 <prvInitialiseTaskLists+0x74>)
 8004722:	f7ff fb29 	bl	8003d78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004726:	4b0b      	ldr	r3, [pc, #44]	; (8004754 <prvInitialiseTaskLists+0x78>)
 8004728:	4a05      	ldr	r2, [pc, #20]	; (8004740 <prvInitialiseTaskLists+0x64>)
 800472a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800472c:	4b0a      	ldr	r3, [pc, #40]	; (8004758 <prvInitialiseTaskLists+0x7c>)
 800472e:	4a05      	ldr	r2, [pc, #20]	; (8004744 <prvInitialiseTaskLists+0x68>)
 8004730:	601a      	str	r2, [r3, #0]
}
 8004732:	bf00      	nop
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	20001dfc 	.word	0x20001dfc
 8004740:	20001e88 	.word	0x20001e88
 8004744:	20001e9c 	.word	0x20001e9c
 8004748:	20001eb8 	.word	0x20001eb8
 800474c:	20001ecc 	.word	0x20001ecc
 8004750:	20001ee4 	.word	0x20001ee4
 8004754:	20001eb0 	.word	0x20001eb0
 8004758:	20001eb4 	.word	0x20001eb4

0800475c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004762:	e019      	b.n	8004798 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004764:	f000 fa26 	bl	8004bb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004768:	4b10      	ldr	r3, [pc, #64]	; (80047ac <prvCheckTasksWaitingTermination+0x50>)
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	3304      	adds	r3, #4
 8004774:	4618      	mov	r0, r3
 8004776:	f7ff fb89 	bl	8003e8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800477a:	4b0d      	ldr	r3, [pc, #52]	; (80047b0 <prvCheckTasksWaitingTermination+0x54>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	3b01      	subs	r3, #1
 8004780:	4a0b      	ldr	r2, [pc, #44]	; (80047b0 <prvCheckTasksWaitingTermination+0x54>)
 8004782:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004784:	4b0b      	ldr	r3, [pc, #44]	; (80047b4 <prvCheckTasksWaitingTermination+0x58>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	3b01      	subs	r3, #1
 800478a:	4a0a      	ldr	r2, [pc, #40]	; (80047b4 <prvCheckTasksWaitingTermination+0x58>)
 800478c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800478e:	f000 fa41 	bl	8004c14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f810 	bl	80047b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004798:	4b06      	ldr	r3, [pc, #24]	; (80047b4 <prvCheckTasksWaitingTermination+0x58>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1e1      	bne.n	8004764 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80047a0:	bf00      	nop
 80047a2:	bf00      	nop
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	20001ecc 	.word	0x20001ecc
 80047b0:	20001ef8 	.word	0x20001ef8
 80047b4:	20001ee0 	.word	0x20001ee0

080047b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d108      	bne.n	80047dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 fb9e 	bl	8004f10 <vPortFree>
				vPortFree( pxTCB );
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 fb9b 	bl	8004f10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80047da:	e018      	b.n	800480e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d103      	bne.n	80047ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 fb92 	bl	8004f10 <vPortFree>
	}
 80047ec:	e00f      	b.n	800480e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d00a      	beq.n	800480e <prvDeleteTCB+0x56>
	__asm volatile
 80047f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fc:	f383 8811 	msr	BASEPRI, r3
 8004800:	f3bf 8f6f 	isb	sy
 8004804:	f3bf 8f4f 	dsb	sy
 8004808:	60fb      	str	r3, [r7, #12]
}
 800480a:	bf00      	nop
 800480c:	e7fe      	b.n	800480c <prvDeleteTCB+0x54>
	}
 800480e:	bf00      	nop
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
	...

08004818 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800481e:	4b0c      	ldr	r3, [pc, #48]	; (8004850 <prvResetNextTaskUnblockTime+0x38>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d104      	bne.n	8004832 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004828:	4b0a      	ldr	r3, [pc, #40]	; (8004854 <prvResetNextTaskUnblockTime+0x3c>)
 800482a:	f04f 32ff 	mov.w	r2, #4294967295
 800482e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004830:	e008      	b.n	8004844 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004832:	4b07      	ldr	r3, [pc, #28]	; (8004850 <prvResetNextTaskUnblockTime+0x38>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	4a04      	ldr	r2, [pc, #16]	; (8004854 <prvResetNextTaskUnblockTime+0x3c>)
 8004842:	6013      	str	r3, [r2, #0]
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	20001eb0 	.word	0x20001eb0
 8004854:	20001f18 	.word	0x20001f18

08004858 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800485e:	4b0b      	ldr	r3, [pc, #44]	; (800488c <xTaskGetSchedulerState+0x34>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d102      	bne.n	800486c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004866:	2301      	movs	r3, #1
 8004868:	607b      	str	r3, [r7, #4]
 800486a:	e008      	b.n	800487e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800486c:	4b08      	ldr	r3, [pc, #32]	; (8004890 <xTaskGetSchedulerState+0x38>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d102      	bne.n	800487a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004874:	2302      	movs	r3, #2
 8004876:	607b      	str	r3, [r7, #4]
 8004878:	e001      	b.n	800487e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800487a:	2300      	movs	r3, #0
 800487c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800487e:	687b      	ldr	r3, [r7, #4]
	}
 8004880:	4618      	mov	r0, r3
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	20001f04 	.word	0x20001f04
 8004890:	20001f20 	.word	0x20001f20

08004894 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800489e:	4b29      	ldr	r3, [pc, #164]	; (8004944 <prvAddCurrentTaskToDelayedList+0xb0>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048a4:	4b28      	ldr	r3, [pc, #160]	; (8004948 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	3304      	adds	r3, #4
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff faee 	bl	8003e8c <uxListRemove>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10b      	bne.n	80048ce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80048b6:	4b24      	ldr	r3, [pc, #144]	; (8004948 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048bc:	2201      	movs	r2, #1
 80048be:	fa02 f303 	lsl.w	r3, r2, r3
 80048c2:	43da      	mvns	r2, r3
 80048c4:	4b21      	ldr	r3, [pc, #132]	; (800494c <prvAddCurrentTaskToDelayedList+0xb8>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4013      	ands	r3, r2
 80048ca:	4a20      	ldr	r2, [pc, #128]	; (800494c <prvAddCurrentTaskToDelayedList+0xb8>)
 80048cc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d4:	d10a      	bne.n	80048ec <prvAddCurrentTaskToDelayedList+0x58>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d007      	beq.n	80048ec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048dc:	4b1a      	ldr	r3, [pc, #104]	; (8004948 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3304      	adds	r3, #4
 80048e2:	4619      	mov	r1, r3
 80048e4:	481a      	ldr	r0, [pc, #104]	; (8004950 <prvAddCurrentTaskToDelayedList+0xbc>)
 80048e6:	f7ff fa74 	bl	8003dd2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80048ea:	e026      	b.n	800493a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4413      	add	r3, r2
 80048f2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80048f4:	4b14      	ldr	r3, [pc, #80]	; (8004948 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68ba      	ldr	r2, [r7, #8]
 80048fa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80048fc:	68ba      	ldr	r2, [r7, #8]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	429a      	cmp	r2, r3
 8004902:	d209      	bcs.n	8004918 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004904:	4b13      	ldr	r3, [pc, #76]	; (8004954 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	4b0f      	ldr	r3, [pc, #60]	; (8004948 <prvAddCurrentTaskToDelayedList+0xb4>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3304      	adds	r3, #4
 800490e:	4619      	mov	r1, r3
 8004910:	4610      	mov	r0, r2
 8004912:	f7ff fa82 	bl	8003e1a <vListInsert>
}
 8004916:	e010      	b.n	800493a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004918:	4b0f      	ldr	r3, [pc, #60]	; (8004958 <prvAddCurrentTaskToDelayedList+0xc4>)
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	4b0a      	ldr	r3, [pc, #40]	; (8004948 <prvAddCurrentTaskToDelayedList+0xb4>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	3304      	adds	r3, #4
 8004922:	4619      	mov	r1, r3
 8004924:	4610      	mov	r0, r2
 8004926:	f7ff fa78 	bl	8003e1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800492a:	4b0c      	ldr	r3, [pc, #48]	; (800495c <prvAddCurrentTaskToDelayedList+0xc8>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	429a      	cmp	r2, r3
 8004932:	d202      	bcs.n	800493a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004934:	4a09      	ldr	r2, [pc, #36]	; (800495c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	6013      	str	r3, [r2, #0]
}
 800493a:	bf00      	nop
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	20001efc 	.word	0x20001efc
 8004948:	20001df8 	.word	0x20001df8
 800494c:	20001f00 	.word	0x20001f00
 8004950:	20001ee4 	.word	0x20001ee4
 8004954:	20001eb4 	.word	0x20001eb4
 8004958:	20001eb0 	.word	0x20001eb0
 800495c:	20001f18 	.word	0x20001f18

08004960 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	3b04      	subs	r3, #4
 8004970:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004978:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	3b04      	subs	r3, #4
 800497e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f023 0201 	bic.w	r2, r3, #1
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	3b04      	subs	r3, #4
 800498e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004990:	4a0c      	ldr	r2, [pc, #48]	; (80049c4 <pxPortInitialiseStack+0x64>)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	3b14      	subs	r3, #20
 800499a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	3b04      	subs	r3, #4
 80049a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f06f 0202 	mvn.w	r2, #2
 80049ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	3b20      	subs	r3, #32
 80049b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80049b6:	68fb      	ldr	r3, [r7, #12]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	080049c9 	.word	0x080049c9

080049c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80049ce:	2300      	movs	r3, #0
 80049d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80049d2:	4b12      	ldr	r3, [pc, #72]	; (8004a1c <prvTaskExitError+0x54>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049da:	d00a      	beq.n	80049f2 <prvTaskExitError+0x2a>
	__asm volatile
 80049dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e0:	f383 8811 	msr	BASEPRI, r3
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	60fb      	str	r3, [r7, #12]
}
 80049ee:	bf00      	nop
 80049f0:	e7fe      	b.n	80049f0 <prvTaskExitError+0x28>
	__asm volatile
 80049f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f6:	f383 8811 	msr	BASEPRI, r3
 80049fa:	f3bf 8f6f 	isb	sy
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	60bb      	str	r3, [r7, #8]
}
 8004a04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a06:	bf00      	nop
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0fc      	beq.n	8004a08 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a0e:	bf00      	nop
 8004a10:	bf00      	nop
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	2000000c 	.word	0x2000000c

08004a20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a20:	4b07      	ldr	r3, [pc, #28]	; (8004a40 <pxCurrentTCBConst2>)
 8004a22:	6819      	ldr	r1, [r3, #0]
 8004a24:	6808      	ldr	r0, [r1, #0]
 8004a26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a2a:	f380 8809 	msr	PSP, r0
 8004a2e:	f3bf 8f6f 	isb	sy
 8004a32:	f04f 0000 	mov.w	r0, #0
 8004a36:	f380 8811 	msr	BASEPRI, r0
 8004a3a:	4770      	bx	lr
 8004a3c:	f3af 8000 	nop.w

08004a40 <pxCurrentTCBConst2>:
 8004a40:	20001df8 	.word	0x20001df8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a44:	bf00      	nop
 8004a46:	bf00      	nop

08004a48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004a48:	4808      	ldr	r0, [pc, #32]	; (8004a6c <prvPortStartFirstTask+0x24>)
 8004a4a:	6800      	ldr	r0, [r0, #0]
 8004a4c:	6800      	ldr	r0, [r0, #0]
 8004a4e:	f380 8808 	msr	MSP, r0
 8004a52:	f04f 0000 	mov.w	r0, #0
 8004a56:	f380 8814 	msr	CONTROL, r0
 8004a5a:	b662      	cpsie	i
 8004a5c:	b661      	cpsie	f
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	df00      	svc	0
 8004a68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a6a:	bf00      	nop
 8004a6c:	e000ed08 	.word	0xe000ed08

08004a70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004a76:	4b46      	ldr	r3, [pc, #280]	; (8004b90 <xPortStartScheduler+0x120>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a46      	ldr	r2, [pc, #280]	; (8004b94 <xPortStartScheduler+0x124>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d10a      	bne.n	8004a96 <xPortStartScheduler+0x26>
	__asm volatile
 8004a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	613b      	str	r3, [r7, #16]
}
 8004a92:	bf00      	nop
 8004a94:	e7fe      	b.n	8004a94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a96:	4b3e      	ldr	r3, [pc, #248]	; (8004b90 <xPortStartScheduler+0x120>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a3f      	ldr	r2, [pc, #252]	; (8004b98 <xPortStartScheduler+0x128>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d10a      	bne.n	8004ab6 <xPortStartScheduler+0x46>
	__asm volatile
 8004aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	60fb      	str	r3, [r7, #12]
}
 8004ab2:	bf00      	nop
 8004ab4:	e7fe      	b.n	8004ab4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004ab6:	4b39      	ldr	r3, [pc, #228]	; (8004b9c <xPortStartScheduler+0x12c>)
 8004ab8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	22ff      	movs	r2, #255	; 0xff
 8004ac6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ad0:	78fb      	ldrb	r3, [r7, #3]
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ad8:	b2da      	uxtb	r2, r3
 8004ada:	4b31      	ldr	r3, [pc, #196]	; (8004ba0 <xPortStartScheduler+0x130>)
 8004adc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ade:	4b31      	ldr	r3, [pc, #196]	; (8004ba4 <xPortStartScheduler+0x134>)
 8004ae0:	2207      	movs	r2, #7
 8004ae2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ae4:	e009      	b.n	8004afa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004ae6:	4b2f      	ldr	r3, [pc, #188]	; (8004ba4 <xPortStartScheduler+0x134>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	3b01      	subs	r3, #1
 8004aec:	4a2d      	ldr	r2, [pc, #180]	; (8004ba4 <xPortStartScheduler+0x134>)
 8004aee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004af0:	78fb      	ldrb	r3, [r7, #3]
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004afa:	78fb      	ldrb	r3, [r7, #3]
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b02:	2b80      	cmp	r3, #128	; 0x80
 8004b04:	d0ef      	beq.n	8004ae6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b06:	4b27      	ldr	r3, [pc, #156]	; (8004ba4 <xPortStartScheduler+0x134>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f1c3 0307 	rsb	r3, r3, #7
 8004b0e:	2b04      	cmp	r3, #4
 8004b10:	d00a      	beq.n	8004b28 <xPortStartScheduler+0xb8>
	__asm volatile
 8004b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b16:	f383 8811 	msr	BASEPRI, r3
 8004b1a:	f3bf 8f6f 	isb	sy
 8004b1e:	f3bf 8f4f 	dsb	sy
 8004b22:	60bb      	str	r3, [r7, #8]
}
 8004b24:	bf00      	nop
 8004b26:	e7fe      	b.n	8004b26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b28:	4b1e      	ldr	r3, [pc, #120]	; (8004ba4 <xPortStartScheduler+0x134>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	021b      	lsls	r3, r3, #8
 8004b2e:	4a1d      	ldr	r2, [pc, #116]	; (8004ba4 <xPortStartScheduler+0x134>)
 8004b30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b32:	4b1c      	ldr	r3, [pc, #112]	; (8004ba4 <xPortStartScheduler+0x134>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b3a:	4a1a      	ldr	r2, [pc, #104]	; (8004ba4 <xPortStartScheduler+0x134>)
 8004b3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b46:	4b18      	ldr	r3, [pc, #96]	; (8004ba8 <xPortStartScheduler+0x138>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a17      	ldr	r2, [pc, #92]	; (8004ba8 <xPortStartScheduler+0x138>)
 8004b4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004b52:	4b15      	ldr	r3, [pc, #84]	; (8004ba8 <xPortStartScheduler+0x138>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a14      	ldr	r2, [pc, #80]	; (8004ba8 <xPortStartScheduler+0x138>)
 8004b58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004b5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004b5e:	f000 f8dd 	bl	8004d1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b62:	4b12      	ldr	r3, [pc, #72]	; (8004bac <xPortStartScheduler+0x13c>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004b68:	f000 f8fc 	bl	8004d64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004b6c:	4b10      	ldr	r3, [pc, #64]	; (8004bb0 <xPortStartScheduler+0x140>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a0f      	ldr	r2, [pc, #60]	; (8004bb0 <xPortStartScheduler+0x140>)
 8004b72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004b76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004b78:	f7ff ff66 	bl	8004a48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b7c:	f7ff fd3a 	bl	80045f4 <vTaskSwitchContext>
	prvTaskExitError();
 8004b80:	f7ff ff22 	bl	80049c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3718      	adds	r7, #24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	e000ed00 	.word	0xe000ed00
 8004b94:	410fc271 	.word	0x410fc271
 8004b98:	410fc270 	.word	0x410fc270
 8004b9c:	e000e400 	.word	0xe000e400
 8004ba0:	20001f24 	.word	0x20001f24
 8004ba4:	20001f28 	.word	0x20001f28
 8004ba8:	e000ed20 	.word	0xe000ed20
 8004bac:	2000000c 	.word	0x2000000c
 8004bb0:	e000ef34 	.word	0xe000ef34

08004bb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
	__asm volatile
 8004bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbe:	f383 8811 	msr	BASEPRI, r3
 8004bc2:	f3bf 8f6f 	isb	sy
 8004bc6:	f3bf 8f4f 	dsb	sy
 8004bca:	607b      	str	r3, [r7, #4]
}
 8004bcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004bce:	4b0f      	ldr	r3, [pc, #60]	; (8004c0c <vPortEnterCritical+0x58>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	4a0d      	ldr	r2, [pc, #52]	; (8004c0c <vPortEnterCritical+0x58>)
 8004bd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004bd8:	4b0c      	ldr	r3, [pc, #48]	; (8004c0c <vPortEnterCritical+0x58>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d10f      	bne.n	8004c00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004be0:	4b0b      	ldr	r3, [pc, #44]	; (8004c10 <vPortEnterCritical+0x5c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00a      	beq.n	8004c00 <vPortEnterCritical+0x4c>
	__asm volatile
 8004bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bee:	f383 8811 	msr	BASEPRI, r3
 8004bf2:	f3bf 8f6f 	isb	sy
 8004bf6:	f3bf 8f4f 	dsb	sy
 8004bfa:	603b      	str	r3, [r7, #0]
}
 8004bfc:	bf00      	nop
 8004bfe:	e7fe      	b.n	8004bfe <vPortEnterCritical+0x4a>
	}
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	2000000c 	.word	0x2000000c
 8004c10:	e000ed04 	.word	0xe000ed04

08004c14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c1a:	4b12      	ldr	r3, [pc, #72]	; (8004c64 <vPortExitCritical+0x50>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10a      	bne.n	8004c38 <vPortExitCritical+0x24>
	__asm volatile
 8004c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	607b      	str	r3, [r7, #4]
}
 8004c34:	bf00      	nop
 8004c36:	e7fe      	b.n	8004c36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004c38:	4b0a      	ldr	r3, [pc, #40]	; (8004c64 <vPortExitCritical+0x50>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	4a09      	ldr	r2, [pc, #36]	; (8004c64 <vPortExitCritical+0x50>)
 8004c40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c42:	4b08      	ldr	r3, [pc, #32]	; (8004c64 <vPortExitCritical+0x50>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d105      	bne.n	8004c56 <vPortExitCritical+0x42>
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004c54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c56:	bf00      	nop
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	2000000c 	.word	0x2000000c
	...

08004c70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c70:	f3ef 8009 	mrs	r0, PSP
 8004c74:	f3bf 8f6f 	isb	sy
 8004c78:	4b15      	ldr	r3, [pc, #84]	; (8004cd0 <pxCurrentTCBConst>)
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	f01e 0f10 	tst.w	lr, #16
 8004c80:	bf08      	it	eq
 8004c82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c8a:	6010      	str	r0, [r2, #0]
 8004c8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004c90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004c94:	f380 8811 	msr	BASEPRI, r0
 8004c98:	f3bf 8f4f 	dsb	sy
 8004c9c:	f3bf 8f6f 	isb	sy
 8004ca0:	f7ff fca8 	bl	80045f4 <vTaskSwitchContext>
 8004ca4:	f04f 0000 	mov.w	r0, #0
 8004ca8:	f380 8811 	msr	BASEPRI, r0
 8004cac:	bc09      	pop	{r0, r3}
 8004cae:	6819      	ldr	r1, [r3, #0]
 8004cb0:	6808      	ldr	r0, [r1, #0]
 8004cb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cb6:	f01e 0f10 	tst.w	lr, #16
 8004cba:	bf08      	it	eq
 8004cbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004cc0:	f380 8809 	msr	PSP, r0
 8004cc4:	f3bf 8f6f 	isb	sy
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	f3af 8000 	nop.w

08004cd0 <pxCurrentTCBConst>:
 8004cd0:	20001df8 	.word	0x20001df8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004cd4:	bf00      	nop
 8004cd6:	bf00      	nop

08004cd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
	__asm volatile
 8004cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce2:	f383 8811 	msr	BASEPRI, r3
 8004ce6:	f3bf 8f6f 	isb	sy
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	607b      	str	r3, [r7, #4]
}
 8004cf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004cf2:	f7ff fbc7 	bl	8004484 <xTaskIncrementTick>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004cfc:	4b06      	ldr	r3, [pc, #24]	; (8004d18 <xPortSysTickHandler+0x40>)
 8004cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d02:	601a      	str	r2, [r3, #0]
 8004d04:	2300      	movs	r3, #0
 8004d06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	f383 8811 	msr	BASEPRI, r3
}
 8004d0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004d10:	bf00      	nop
 8004d12:	3708      	adds	r7, #8
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	e000ed04 	.word	0xe000ed04

08004d1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d20:	4b0b      	ldr	r3, [pc, #44]	; (8004d50 <vPortSetupTimerInterrupt+0x34>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d26:	4b0b      	ldr	r3, [pc, #44]	; (8004d54 <vPortSetupTimerInterrupt+0x38>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d2c:	4b0a      	ldr	r3, [pc, #40]	; (8004d58 <vPortSetupTimerInterrupt+0x3c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a0a      	ldr	r2, [pc, #40]	; (8004d5c <vPortSetupTimerInterrupt+0x40>)
 8004d32:	fba2 2303 	umull	r2, r3, r2, r3
 8004d36:	099b      	lsrs	r3, r3, #6
 8004d38:	4a09      	ldr	r2, [pc, #36]	; (8004d60 <vPortSetupTimerInterrupt+0x44>)
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d3e:	4b04      	ldr	r3, [pc, #16]	; (8004d50 <vPortSetupTimerInterrupt+0x34>)
 8004d40:	2207      	movs	r2, #7
 8004d42:	601a      	str	r2, [r3, #0]
}
 8004d44:	bf00      	nop
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	e000e010 	.word	0xe000e010
 8004d54:	e000e018 	.word	0xe000e018
 8004d58:	20000000 	.word	0x20000000
 8004d5c:	10624dd3 	.word	0x10624dd3
 8004d60:	e000e014 	.word	0xe000e014

08004d64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004d64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004d74 <vPortEnableVFP+0x10>
 8004d68:	6801      	ldr	r1, [r0, #0]
 8004d6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004d6e:	6001      	str	r1, [r0, #0]
 8004d70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004d72:	bf00      	nop
 8004d74:	e000ed88 	.word	0xe000ed88

08004d78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b08a      	sub	sp, #40	; 0x28
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004d80:	2300      	movs	r3, #0
 8004d82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004d84:	f7ff fad4 	bl	8004330 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004d88:	4b5b      	ldr	r3, [pc, #364]	; (8004ef8 <pvPortMalloc+0x180>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d101      	bne.n	8004d94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004d90:	f000 f920 	bl	8004fd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d94:	4b59      	ldr	r3, [pc, #356]	; (8004efc <pvPortMalloc+0x184>)
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f040 8093 	bne.w	8004ec8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d01d      	beq.n	8004de4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004da8:	2208      	movs	r2, #8
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4413      	add	r3, r2
 8004dae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d014      	beq.n	8004de4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f023 0307 	bic.w	r3, r3, #7
 8004dc0:	3308      	adds	r3, #8
 8004dc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f003 0307 	and.w	r3, r3, #7
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00a      	beq.n	8004de4 <pvPortMalloc+0x6c>
	__asm volatile
 8004dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd2:	f383 8811 	msr	BASEPRI, r3
 8004dd6:	f3bf 8f6f 	isb	sy
 8004dda:	f3bf 8f4f 	dsb	sy
 8004dde:	617b      	str	r3, [r7, #20]
}
 8004de0:	bf00      	nop
 8004de2:	e7fe      	b.n	8004de2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d06e      	beq.n	8004ec8 <pvPortMalloc+0x150>
 8004dea:	4b45      	ldr	r3, [pc, #276]	; (8004f00 <pvPortMalloc+0x188>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d869      	bhi.n	8004ec8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004df4:	4b43      	ldr	r3, [pc, #268]	; (8004f04 <pvPortMalloc+0x18c>)
 8004df6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004df8:	4b42      	ldr	r3, [pc, #264]	; (8004f04 <pvPortMalloc+0x18c>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004dfe:	e004      	b.n	8004e0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d903      	bls.n	8004e1c <pvPortMalloc+0xa4>
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1f1      	bne.n	8004e00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004e1c:	4b36      	ldr	r3, [pc, #216]	; (8004ef8 <pvPortMalloc+0x180>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d050      	beq.n	8004ec8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2208      	movs	r2, #8
 8004e2c:	4413      	add	r3, r2
 8004e2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	6a3b      	ldr	r3, [r7, #32]
 8004e36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	1ad2      	subs	r2, r2, r3
 8004e40:	2308      	movs	r3, #8
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d91f      	bls.n	8004e88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	f003 0307 	and.w	r3, r3, #7
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <pvPortMalloc+0xf8>
	__asm volatile
 8004e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5e:	f383 8811 	msr	BASEPRI, r3
 8004e62:	f3bf 8f6f 	isb	sy
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	613b      	str	r3, [r7, #16]
}
 8004e6c:	bf00      	nop
 8004e6e:	e7fe      	b.n	8004e6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	1ad2      	subs	r2, r2, r3
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e82:	69b8      	ldr	r0, [r7, #24]
 8004e84:	f000 f908 	bl	8005098 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e88:	4b1d      	ldr	r3, [pc, #116]	; (8004f00 <pvPortMalloc+0x188>)
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	4a1b      	ldr	r2, [pc, #108]	; (8004f00 <pvPortMalloc+0x188>)
 8004e94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e96:	4b1a      	ldr	r3, [pc, #104]	; (8004f00 <pvPortMalloc+0x188>)
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	4b1b      	ldr	r3, [pc, #108]	; (8004f08 <pvPortMalloc+0x190>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d203      	bcs.n	8004eaa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004ea2:	4b17      	ldr	r3, [pc, #92]	; (8004f00 <pvPortMalloc+0x188>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a18      	ldr	r2, [pc, #96]	; (8004f08 <pvPortMalloc+0x190>)
 8004ea8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	4b13      	ldr	r3, [pc, #76]	; (8004efc <pvPortMalloc+0x184>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eba:	2200      	movs	r2, #0
 8004ebc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004ebe:	4b13      	ldr	r3, [pc, #76]	; (8004f0c <pvPortMalloc+0x194>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	4a11      	ldr	r2, [pc, #68]	; (8004f0c <pvPortMalloc+0x194>)
 8004ec6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004ec8:	f7ff fa40 	bl	800434c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	f003 0307 	and.w	r3, r3, #7
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00a      	beq.n	8004eec <pvPortMalloc+0x174>
	__asm volatile
 8004ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eda:	f383 8811 	msr	BASEPRI, r3
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	f3bf 8f4f 	dsb	sy
 8004ee6:	60fb      	str	r3, [r7, #12]
}
 8004ee8:	bf00      	nop
 8004eea:	e7fe      	b.n	8004eea <pvPortMalloc+0x172>
	return pvReturn;
 8004eec:	69fb      	ldr	r3, [r7, #28]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3728      	adds	r7, #40	; 0x28
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	20005b34 	.word	0x20005b34
 8004efc:	20005b48 	.word	0x20005b48
 8004f00:	20005b38 	.word	0x20005b38
 8004f04:	20005b2c 	.word	0x20005b2c
 8004f08:	20005b3c 	.word	0x20005b3c
 8004f0c:	20005b40 	.word	0x20005b40

08004f10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d04d      	beq.n	8004fbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f22:	2308      	movs	r3, #8
 8004f24:	425b      	negs	r3, r3
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	4413      	add	r3, r2
 8004f2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	4b24      	ldr	r3, [pc, #144]	; (8004fc8 <vPortFree+0xb8>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4013      	ands	r3, r2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10a      	bne.n	8004f54 <vPortFree+0x44>
	__asm volatile
 8004f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f42:	f383 8811 	msr	BASEPRI, r3
 8004f46:	f3bf 8f6f 	isb	sy
 8004f4a:	f3bf 8f4f 	dsb	sy
 8004f4e:	60fb      	str	r3, [r7, #12]
}
 8004f50:	bf00      	nop
 8004f52:	e7fe      	b.n	8004f52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00a      	beq.n	8004f72 <vPortFree+0x62>
	__asm volatile
 8004f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f60:	f383 8811 	msr	BASEPRI, r3
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	60bb      	str	r3, [r7, #8]
}
 8004f6e:	bf00      	nop
 8004f70:	e7fe      	b.n	8004f70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	4b14      	ldr	r3, [pc, #80]	; (8004fc8 <vPortFree+0xb8>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d01e      	beq.n	8004fbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d11a      	bne.n	8004fbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	4b0e      	ldr	r3, [pc, #56]	; (8004fc8 <vPortFree+0xb8>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	43db      	mvns	r3, r3
 8004f92:	401a      	ands	r2, r3
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f98:	f7ff f9ca 	bl	8004330 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	685a      	ldr	r2, [r3, #4]
 8004fa0:	4b0a      	ldr	r3, [pc, #40]	; (8004fcc <vPortFree+0xbc>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	4a09      	ldr	r2, [pc, #36]	; (8004fcc <vPortFree+0xbc>)
 8004fa8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004faa:	6938      	ldr	r0, [r7, #16]
 8004fac:	f000 f874 	bl	8005098 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004fb0:	4b07      	ldr	r3, [pc, #28]	; (8004fd0 <vPortFree+0xc0>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	4a06      	ldr	r2, [pc, #24]	; (8004fd0 <vPortFree+0xc0>)
 8004fb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004fba:	f7ff f9c7 	bl	800434c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004fbe:	bf00      	nop
 8004fc0:	3718      	adds	r7, #24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20005b48 	.word	0x20005b48
 8004fcc:	20005b38 	.word	0x20005b38
 8004fd0:	20005b44 	.word	0x20005b44

08004fd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004fda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004fde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004fe0:	4b27      	ldr	r3, [pc, #156]	; (8005080 <prvHeapInit+0xac>)
 8004fe2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f003 0307 	and.w	r3, r3, #7
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00c      	beq.n	8005008 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	3307      	adds	r3, #7
 8004ff2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f023 0307 	bic.w	r3, r3, #7
 8004ffa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	4a1f      	ldr	r2, [pc, #124]	; (8005080 <prvHeapInit+0xac>)
 8005004:	4413      	add	r3, r2
 8005006:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800500c:	4a1d      	ldr	r2, [pc, #116]	; (8005084 <prvHeapInit+0xb0>)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005012:	4b1c      	ldr	r3, [pc, #112]	; (8005084 <prvHeapInit+0xb0>)
 8005014:	2200      	movs	r2, #0
 8005016:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	4413      	add	r3, r2
 800501e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005020:	2208      	movs	r2, #8
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	1a9b      	subs	r3, r3, r2
 8005026:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f023 0307 	bic.w	r3, r3, #7
 800502e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4a15      	ldr	r2, [pc, #84]	; (8005088 <prvHeapInit+0xb4>)
 8005034:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005036:	4b14      	ldr	r3, [pc, #80]	; (8005088 <prvHeapInit+0xb4>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2200      	movs	r2, #0
 800503c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800503e:	4b12      	ldr	r3, [pc, #72]	; (8005088 <prvHeapInit+0xb4>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2200      	movs	r2, #0
 8005044:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	1ad2      	subs	r2, r2, r3
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005054:	4b0c      	ldr	r3, [pc, #48]	; (8005088 <prvHeapInit+0xb4>)
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	4a0a      	ldr	r2, [pc, #40]	; (800508c <prvHeapInit+0xb8>)
 8005062:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	4a09      	ldr	r2, [pc, #36]	; (8005090 <prvHeapInit+0xbc>)
 800506a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800506c:	4b09      	ldr	r3, [pc, #36]	; (8005094 <prvHeapInit+0xc0>)
 800506e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005072:	601a      	str	r2, [r3, #0]
}
 8005074:	bf00      	nop
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr
 8005080:	20001f2c 	.word	0x20001f2c
 8005084:	20005b2c 	.word	0x20005b2c
 8005088:	20005b34 	.word	0x20005b34
 800508c:	20005b3c 	.word	0x20005b3c
 8005090:	20005b38 	.word	0x20005b38
 8005094:	20005b48 	.word	0x20005b48

08005098 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80050a0:	4b28      	ldr	r3, [pc, #160]	; (8005144 <prvInsertBlockIntoFreeList+0xac>)
 80050a2:	60fb      	str	r3, [r7, #12]
 80050a4:	e002      	b.n	80050ac <prvInsertBlockIntoFreeList+0x14>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	60fb      	str	r3, [r7, #12]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d8f7      	bhi.n	80050a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	4413      	add	r3, r2
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d108      	bne.n	80050da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	441a      	add	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	441a      	add	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d118      	bne.n	8005120 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	4b15      	ldr	r3, [pc, #84]	; (8005148 <prvInsertBlockIntoFreeList+0xb0>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d00d      	beq.n	8005116 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	441a      	add	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	601a      	str	r2, [r3, #0]
 8005114:	e008      	b.n	8005128 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005116:	4b0c      	ldr	r3, [pc, #48]	; (8005148 <prvInsertBlockIntoFreeList+0xb0>)
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	e003      	b.n	8005128 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	429a      	cmp	r2, r3
 800512e:	d002      	beq.n	8005136 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005136:	bf00      	nop
 8005138:	3714      	adds	r7, #20
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	20005b2c 	.word	0x20005b2c
 8005148:	20005b34 	.word	0x20005b34

0800514c <eMBMasterFuncReadCoils>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
    UCHAR          *ucMBFrame;
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucByteCount;

    eMBException    eStatus = MB_EX_NONE;
 8005156:	2300      	movs	r3, #0
 8005158:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 800515a:	f001 fa8f 	bl	800667c <xMBMasterRequestIsBroadcast>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d002      	beq.n	800516a <eMBMasterFuncReadCoils+0x1e>
    {
        eStatus = MB_EX_NONE;
 8005164:	2300      	movs	r3, #0
 8005166:	75bb      	strb	r3, [r7, #22]
 8005168:	e056      	b.n	8005218 <eMBMasterFuncReadCoils+0xcc>
    }
    else if ( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	881b      	ldrh	r3, [r3, #0]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d950      	bls.n	8005214 <eMBMasterFuncReadCoils+0xc8>
    {
        vMBMasterGetPDUSndBuf(&ucMBFrame);
 8005172:	f107 030c 	add.w	r3, r7, #12
 8005176:	4618      	mov	r0, r3
 8005178:	f001 fa54 	bl	8006624 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	3301      	adds	r3, #1
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	b29b      	uxth	r3, r3
 8005184:	021b      	lsls	r3, r3, #8
 8005186:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	3302      	adds	r3, #2
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	b29a      	uxth	r2, r3
 8005190:	8abb      	ldrh	r3, [r7, #20]
 8005192:	4313      	orrs	r3, r2
 8005194:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8005196:	8abb      	ldrh	r3, [r7, #20]
 8005198:	3301      	adds	r3, #1
 800519a:	82bb      	strh	r3, [r7, #20]

        usCoilCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_COILCNT_OFF] << 8 );
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	3303      	adds	r3, #3
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	021b      	lsls	r3, r3, #8
 80051a6:	827b      	strh	r3, [r7, #18]
        usCoilCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_COILCNT_OFF + 1] );
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	3304      	adds	r3, #4
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	8a7b      	ldrh	r3, [r7, #18]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	827b      	strh	r3, [r7, #18]

        /* Test if the quantity of coils is a multiple of 8. If not last
         * byte is only partially field with unused coils set to zero. */
        if( ( usCoilCount & 0x0007 ) != 0 )
 80051b6:	8a7b      	ldrh	r3, [r7, #18]
 80051b8:	f003 0307 	and.w	r3, r3, #7
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d006      	beq.n	80051ce <eMBMasterFuncReadCoils+0x82>
        {
            ucByteCount = ( UCHAR )( usCoilCount / 8 + 1 );
 80051c0:	8a7b      	ldrh	r3, [r7, #18]
 80051c2:	08db      	lsrs	r3, r3, #3
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	3301      	adds	r3, #1
 80051ca:	75fb      	strb	r3, [r7, #23]
 80051cc:	e003      	b.n	80051d6 <eMBMasterFuncReadCoils+0x8a>
        }
        else
        {
            ucByteCount = ( UCHAR )( usCoilCount / 8 );
 80051ce:	8a7b      	ldrh	r3, [r7, #18]
 80051d0:	08db      	lsrs	r3, r3, #3
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	75fb      	strb	r3, [r7, #23]
        }

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception.
         */
        if( ( usCoilCount >= 1 ) &&
 80051d6:	8a7b      	ldrh	r3, [r7, #18]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d018      	beq.n	800520e <eMBMasterFuncReadCoils+0xc2>
            ( ucByteCount == pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] ) )
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	3301      	adds	r3, #1
 80051e0:	781b      	ldrb	r3, [r3, #0]
        if( ( usCoilCount >= 1 ) &&
 80051e2:	7dfa      	ldrb	r2, [r7, #23]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d112      	bne.n	800520e <eMBMasterFuncReadCoils+0xc2>
        {
            /* Make callback to fill the buffer. */
            eRegStatus = eMBMasterRegCoilsCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usCoilCount, MB_REG_READ );
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	1c98      	adds	r0, r3, #2
 80051ec:	8a7a      	ldrh	r2, [r7, #18]
 80051ee:	8ab9      	ldrh	r1, [r7, #20]
 80051f0:	2300      	movs	r3, #0
 80051f2:	f7fb fda5 	bl	8000d40 <eMBMasterRegCoilsCB>
 80051f6:	4603      	mov	r3, r0
 80051f8:	747b      	strb	r3, [r7, #17]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80051fa:	7c7b      	ldrb	r3, [r7, #17]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00b      	beq.n	8005218 <eMBMasterFuncReadCoils+0xcc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8005200:	7c7b      	ldrb	r3, [r7, #17]
 8005202:	4618      	mov	r0, r3
 8005204:	f000 fc16 	bl	8005a34 <prveMBError2Exception>
 8005208:	4603      	mov	r3, r0
 800520a:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 800520c:	e004      	b.n	8005218 <eMBMasterFuncReadCoils+0xcc>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800520e:	2303      	movs	r3, #3
 8005210:	75bb      	strb	r3, [r7, #22]
 8005212:	e001      	b.n	8005218 <eMBMasterFuncReadCoils+0xcc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8005214:	2303      	movs	r3, #3
 8005216:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8005218:	7dbb      	ldrb	r3, [r7, #22]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3718      	adds	r7, #24
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <eMBMasterReqWriteCoil>:
 *
 * @see eMBMasterReqWriteMultipleCoils
 */
eMBMasterReqErrCode
eMBMasterReqWriteCoil( UCHAR ucSndAddr, USHORT usCoilAddr, USHORT usCoilData, LONG lTimeOut )
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b086      	sub	sp, #24
 8005226:	af00      	add	r7, sp, #0
 8005228:	607b      	str	r3, [r7, #4]
 800522a:	4603      	mov	r3, r0
 800522c:	73fb      	strb	r3, [r7, #15]
 800522e:	460b      	mov	r3, r1
 8005230:	81bb      	strh	r3, [r7, #12]
 8005232:	4613      	mov	r3, r2
 8005234:	817b      	strh	r3, [r7, #10]
    UCHAR                 *ucMBFrame;
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;
 8005236:	2300      	movs	r3, #0
 8005238:	75fb      	strb	r3, [r7, #23]

    if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
 800523a:	7bfb      	ldrb	r3, [r7, #15]
 800523c:	2b10      	cmp	r3, #16
 800523e:	d902      	bls.n	8005246 <eMBMasterReqWriteCoil+0x24>
 8005240:	2302      	movs	r3, #2
 8005242:	75fb      	strb	r3, [r7, #23]
 8005244:	e040      	b.n	80052c8 <eMBMasterReqWriteCoil+0xa6>
    else if ( ( usCoilData != 0xFF00 ) && ( usCoilData != 0x0000 ) ) eErrStatus = MB_MRE_ILL_ARG;
 8005246:	897b      	ldrh	r3, [r7, #10]
 8005248:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800524c:	d005      	beq.n	800525a <eMBMasterReqWriteCoil+0x38>
 800524e:	897b      	ldrh	r3, [r7, #10]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d002      	beq.n	800525a <eMBMasterReqWriteCoil+0x38>
 8005254:	2302      	movs	r3, #2
 8005256:	75fb      	strb	r3, [r7, #23]
 8005258:	e036      	b.n	80052c8 <eMBMasterReqWriteCoil+0xa6>
    else if ( xMBMasterRunResTake( lTimeOut ) == FALSE ) eErrStatus = MB_MRE_MASTER_BUSY;
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 fe6c 	bl	8005f38 <xMBMasterRunResTake>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d102      	bne.n	800526c <eMBMasterReqWriteCoil+0x4a>
 8005266:	2305      	movs	r3, #5
 8005268:	75fb      	strb	r3, [r7, #23]
 800526a:	e02d      	b.n	80052c8 <eMBMasterReqWriteCoil+0xa6>
    else
    {
        vMBMasterGetPDUSndBuf(&ucMBFrame);
 800526c:	f107 0310 	add.w	r3, r7, #16
 8005270:	4618      	mov	r0, r3
 8005272:	f001 f9d7 	bl	8006624 <vMBMasterGetPDUSndBuf>
        vMBMasterSetDestAddress(ucSndAddr);
 8005276:	7bfb      	ldrb	r3, [r7, #15]
 8005278:	4618      	mov	r0, r3
 800527a:	f000 fdeb 	bl	8005e54 <vMBMasterSetDestAddress>
        ucMBFrame[MB_PDU_FUNC_OFF]                = MB_FUNC_WRITE_SINGLE_COIL;
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	2205      	movs	r2, #5
 8005282:	701a      	strb	r2, [r3, #0]
        ucMBFrame[MB_PDU_REQ_WRITE_ADDR_OFF]      = usCoilAddr >> 8;
 8005284:	89bb      	ldrh	r3, [r7, #12]
 8005286:	0a1b      	lsrs	r3, r3, #8
 8005288:	b29a      	uxth	r2, r3
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	3301      	adds	r3, #1
 800528e:	b2d2      	uxtb	r2, r2
 8005290:	701a      	strb	r2, [r3, #0]
        ucMBFrame[MB_PDU_REQ_WRITE_ADDR_OFF + 1]  = usCoilAddr;
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	3302      	adds	r3, #2
 8005296:	89ba      	ldrh	r2, [r7, #12]
 8005298:	b2d2      	uxtb	r2, r2
 800529a:	701a      	strb	r2, [r3, #0]
        ucMBFrame[MB_PDU_REQ_WRITE_VALUE_OFF ]    = usCoilData >> 8;
 800529c:	897b      	ldrh	r3, [r7, #10]
 800529e:	0a1b      	lsrs	r3, r3, #8
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	3303      	adds	r3, #3
 80052a6:	b2d2      	uxtb	r2, r2
 80052a8:	701a      	strb	r2, [r3, #0]
        ucMBFrame[MB_PDU_REQ_WRITE_VALUE_OFF + 1] = usCoilData;
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	3304      	adds	r3, #4
 80052ae:	897a      	ldrh	r2, [r7, #10]
 80052b0:	b2d2      	uxtb	r2, r2
 80052b2:	701a      	strb	r2, [r3, #0]
        vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_WRITE_SIZE );
 80052b4:	2005      	movs	r0, #5
 80052b6:	f001 f9c5 	bl	8006644 <vMBMasterSetPDUSndLength>
        ( void ) xMBMasterPortEventPost( EV_MASTER_FRAME_SENT );
 80052ba:	2008      	movs	r0, #8
 80052bc:	f000 fe04 	bl	8005ec8 <xMBMasterPortEventPost>
        eErrStatus = eMBMasterWaitRequestFinish( );
 80052c0:	f000 fe7d 	bl	8005fbe <eMBMasterWaitRequestFinish>
 80052c4:	4603      	mov	r3, r0
 80052c6:	75fb      	strb	r3, [r7, #23]
    }
    return eErrStatus;
 80052c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3718      	adds	r7, #24
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <eMBMasterFuncWriteCoil>:

eMBException
eMBMasterFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b084      	sub	sp, #16
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
 80052da:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 80052dc:	2300      	movs	r3, #0
 80052de:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	881b      	ldrh	r3, [r3, #0]
 80052e4:	2b05      	cmp	r3, #5
 80052e6:	d140      	bne.n	800536a <eMBMasterFuncWriteCoil+0x98>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	3301      	adds	r3, #1
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	021b      	lsls	r3, r3, #8
 80052f2:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	3302      	adds	r3, #2
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	89bb      	ldrh	r3, [r7, #12]
 80052fe:	4313      	orrs	r3, r2
 8005300:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8005302:	89bb      	ldrh	r3, [r7, #12]
 8005304:	3301      	adds	r3, #1
 8005306:	81bb      	strh	r3, [r7, #12]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	3304      	adds	r3, #4
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d128      	bne.n	8005364 <eMBMasterFuncWriteCoil+0x92>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	3303      	adds	r3, #3
 8005316:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8005318:	2bff      	cmp	r3, #255	; 0xff
 800531a:	d004      	beq.n	8005326 <eMBMasterFuncWriteCoil+0x54>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	3303      	adds	r3, #3
 8005320:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8005322:	2b00      	cmp	r3, #0
 8005324:	d11e      	bne.n	8005364 <eMBMasterFuncWriteCoil+0x92>
        {
            ucBuf[1] = 0;
 8005326:	2300      	movs	r3, #0
 8005328:	727b      	strb	r3, [r7, #9]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	3303      	adds	r3, #3
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	2bff      	cmp	r3, #255	; 0xff
 8005332:	d102      	bne.n	800533a <eMBMasterFuncWriteCoil+0x68>
            {
                ucBuf[0] = 1;
 8005334:	2301      	movs	r3, #1
 8005336:	723b      	strb	r3, [r7, #8]
 8005338:	e001      	b.n	800533e <eMBMasterFuncWriteCoil+0x6c>
            }
            else
            {
                ucBuf[0] = 0;
 800533a:	2300      	movs	r3, #0
 800533c:	723b      	strb	r3, [r7, #8]
            }
            eRegStatus =
                eMBMasterRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 800533e:	89b9      	ldrh	r1, [r7, #12]
 8005340:	f107 0008 	add.w	r0, r7, #8
 8005344:	2301      	movs	r3, #1
 8005346:	2201      	movs	r2, #1
 8005348:	f7fb fcfa 	bl	8000d40 <eMBMasterRegCoilsCB>
 800534c:	4603      	mov	r3, r0
 800534e:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8005350:	7afb      	ldrb	r3, [r7, #11]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00b      	beq.n	800536e <eMBMasterFuncWriteCoil+0x9c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8005356:	7afb      	ldrb	r3, [r7, #11]
 8005358:	4618      	mov	r0, r3
 800535a:	f000 fb6b 	bl	8005a34 <prveMBError2Exception>
 800535e:	4603      	mov	r3, r0
 8005360:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 8005362:	e004      	b.n	800536e <eMBMasterFuncWriteCoil+0x9c>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8005364:	2303      	movs	r3, #3
 8005366:	73fb      	strb	r3, [r7, #15]
 8005368:	e001      	b.n	800536e <eMBMasterFuncWriteCoil+0x9c>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800536a:	2303      	movs	r3, #3
 800536c:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 800536e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005370:	4618      	mov	r0, r3
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <eMBMasterFuncWriteMultipleCoils>:
    return eErrStatus;
}

eMBException
eMBMasterFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;
    UCHAR          *ucMBFrame;

    eMBException    eStatus = MB_EX_NONE;
 8005382:	2300      	movs	r3, #0
 8005384:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	881b      	ldrh	r3, [r3, #0]
 800538a:	2b05      	cmp	r3, #5
 800538c:	d004      	beq.n	8005398 <eMBMasterFuncWriteMultipleCoils+0x20>
 800538e:	f001 f975 	bl	800667c <xMBMasterRequestIsBroadcast>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d052      	beq.n	800543e <eMBMasterFuncWriteMultipleCoils+0xc6>
    {
        vMBMasterGetPDUSndBuf(&ucMBFrame);
 8005398:	f107 030c 	add.w	r3, r7, #12
 800539c:	4618      	mov	r0, r3
 800539e:	f001 f941 	bl	8006624 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	3301      	adds	r3, #1
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	021b      	lsls	r3, r3, #8
 80053ac:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	3302      	adds	r3, #2
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	8abb      	ldrh	r3, [r7, #20]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 80053bc:	8abb      	ldrh	r3, [r7, #20]
 80053be:	3301      	adds	r3, #1
 80053c0:	82bb      	strh	r3, [r7, #20]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	3303      	adds	r3, #3
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	021b      	lsls	r3, r3, #8
 80053cc:	827b      	strh	r3, [r7, #18]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	3304      	adds	r3, #4
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	8a7b      	ldrh	r3, [r7, #18]
 80053d8:	4313      	orrs	r3, r2
 80053da:	827b      	strh	r3, [r7, #18]

        ucByteCount = ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF];
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	795b      	ldrb	r3, [r3, #5]
 80053e0:	747b      	strb	r3, [r7, #17]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 80053e2:	8a7b      	ldrh	r3, [r7, #18]
 80053e4:	f003 0307 	and.w	r3, r3, #7
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d006      	beq.n	80053fa <eMBMasterFuncWriteMultipleCoils+0x82>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 80053ec:	8a7b      	ldrh	r3, [r7, #18]
 80053ee:	08db      	lsrs	r3, r3, #3
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	3301      	adds	r3, #1
 80053f6:	75fb      	strb	r3, [r7, #23]
 80053f8:	e003      	b.n	8005402 <eMBMasterFuncWriteMultipleCoils+0x8a>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 80053fa:	8a7b      	ldrh	r3, [r7, #18]
 80053fc:	08db      	lsrs	r3, r3, #3
 80053fe:	b29b      	uxth	r3, r3
 8005400:	75fb      	strb	r3, [r7, #23]
        }

        if( ( usCoilCnt >= 1 ) && ( ucByteCountVerify == ucByteCount ) )
 8005402:	8a7b      	ldrh	r3, [r7, #18]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d016      	beq.n	8005436 <eMBMasterFuncWriteMultipleCoils+0xbe>
 8005408:	7dfa      	ldrb	r2, [r7, #23]
 800540a:	7c7b      	ldrb	r3, [r7, #17]
 800540c:	429a      	cmp	r2, r3
 800540e:	d112      	bne.n	8005436 <eMBMasterFuncWriteMultipleCoils+0xbe>
        {
            eRegStatus =
                eMBMasterRegCoilsCB( &ucMBFrame[MB_PDU_REQ_WRITE_MUL_VALUES_OFF],
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	1d98      	adds	r0, r3, #6
 8005414:	8a7a      	ldrh	r2, [r7, #18]
 8005416:	8ab9      	ldrh	r1, [r7, #20]
 8005418:	2301      	movs	r3, #1
 800541a:	f7fb fc91 	bl	8000d40 <eMBMasterRegCoilsCB>
 800541e:	4603      	mov	r3, r0
 8005420:	743b      	strb	r3, [r7, #16]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8005422:	7c3b      	ldrb	r3, [r7, #16]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d009      	beq.n	800543c <eMBMasterFuncWriteMultipleCoils+0xc4>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8005428:	7c3b      	ldrb	r3, [r7, #16]
 800542a:	4618      	mov	r0, r3
 800542c:	f000 fb02 	bl	8005a34 <prveMBError2Exception>
 8005430:	4603      	mov	r3, r0
 8005432:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8005434:	e002      	b.n	800543c <eMBMasterFuncWriteMultipleCoils+0xc4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8005436:	2303      	movs	r3, #3
 8005438:	75bb      	strb	r3, [r7, #22]
        if( ( usCoilCnt >= 1 ) && ( ucByteCountVerify == ucByteCount ) )
 800543a:	e002      	b.n	8005442 <eMBMasterFuncWriteMultipleCoils+0xca>
 800543c:	e001      	b.n	8005442 <eMBMasterFuncWriteMultipleCoils+0xca>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800543e:	2303      	movs	r3, #3
 8005440:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8005442:	7dbb      	ldrb	r3, [r7, #22]
}
 8005444:	4618      	mov	r0, r3
 8005446:	3718      	adds	r7, #24
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <eMBMasterFuncReadDiscreteInputs>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *ucMBFrame;

    eMBException    eStatus = MB_EX_NONE;
 8005456:	2300      	movs	r3, #0
 8005458:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 800545a:	f001 f90f 	bl	800667c <xMBMasterRequestIsBroadcast>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d002      	beq.n	800546a <eMBMasterFuncReadDiscreteInputs+0x1e>
    {
        eStatus = MB_EX_NONE;
 8005464:	2300      	movs	r3, #0
 8005466:	75bb      	strb	r3, [r7, #22]
 8005468:	e056      	b.n	8005518 <eMBMasterFuncReadDiscreteInputs+0xcc>
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	881b      	ldrh	r3, [r3, #0]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d950      	bls.n	8005514 <eMBMasterFuncReadDiscreteInputs+0xc8>
    {
        vMBMasterGetPDUSndBuf(&ucMBFrame);
 8005472:	f107 030c 	add.w	r3, r7, #12
 8005476:	4618      	mov	r0, r3
 8005478:	f001 f8d4 	bl	8006624 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	3301      	adds	r3, #1
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	b29b      	uxth	r3, r3
 8005484:	021b      	lsls	r3, r3, #8
 8005486:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	3302      	adds	r3, #2
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	b29a      	uxth	r2, r3
 8005490:	8abb      	ldrh	r3, [r7, #20]
 8005492:	4313      	orrs	r3, r2
 8005494:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8005496:	8abb      	ldrh	r3, [r7, #20]
 8005498:	3301      	adds	r3, #1
 800549a:	82bb      	strh	r3, [r7, #20]

        usDiscreteCnt = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF] << 8 );
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	3303      	adds	r3, #3
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	021b      	lsls	r3, r3, #8
 80054a6:	827b      	strh	r3, [r7, #18]
        usDiscreteCnt |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF + 1] );
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	3304      	adds	r3, #4
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	8a7b      	ldrh	r3, [r7, #18]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	827b      	strh	r3, [r7, #18]

        /* Test if the quantity of coils is a multiple of 8. If not last
         * byte is only partially field with unused coils set to zero. */
        if( ( usDiscreteCnt & 0x0007 ) != 0 )
 80054b6:	8a7b      	ldrh	r3, [r7, #18]
 80054b8:	f003 0307 	and.w	r3, r3, #7
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d006      	beq.n	80054ce <eMBMasterFuncReadDiscreteInputs+0x82>
        {
            ucNBytes = ( UCHAR )( usDiscreteCnt / 8 + 1 );
 80054c0:	8a7b      	ldrh	r3, [r7, #18]
 80054c2:	08db      	lsrs	r3, r3, #3
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	3301      	adds	r3, #1
 80054ca:	75fb      	strb	r3, [r7, #23]
 80054cc:	e003      	b.n	80054d6 <eMBMasterFuncReadDiscreteInputs+0x8a>
        }
        else
        {
            ucNBytes = ( UCHAR )( usDiscreteCnt / 8 );
 80054ce:	8a7b      	ldrh	r3, [r7, #18]
 80054d0:	08db      	lsrs	r3, r3, #3
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	75fb      	strb	r3, [r7, #23]
        }

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception.
         */
        if ((usDiscreteCnt >= 1) && ucNBytes == pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF])
 80054d6:	8a7b      	ldrh	r3, [r7, #18]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d018      	beq.n	800550e <eMBMasterFuncReadDiscreteInputs+0xc2>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	3301      	adds	r3, #1
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	7dfa      	ldrb	r2, [r7, #23]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d112      	bne.n	800550e <eMBMasterFuncReadDiscreteInputs+0xc2>
        {
            /* Make callback to fill the buffer. */
            eRegStatus = eMBMasterRegDiscreteCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usDiscreteCnt );
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3302      	adds	r3, #2
 80054ec:	8a7a      	ldrh	r2, [r7, #18]
 80054ee:	8ab9      	ldrh	r1, [r7, #20]
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7fb fcdb 	bl	8000eac <eMBMasterRegDiscreteCB>
 80054f6:	4603      	mov	r3, r0
 80054f8:	747b      	strb	r3, [r7, #17]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80054fa:	7c7b      	ldrb	r3, [r7, #17]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00b      	beq.n	8005518 <eMBMasterFuncReadDiscreteInputs+0xcc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8005500:	7c7b      	ldrb	r3, [r7, #17]
 8005502:	4618      	mov	r0, r3
 8005504:	f000 fa96 	bl	8005a34 <prveMBError2Exception>
 8005508:	4603      	mov	r3, r0
 800550a:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 800550c:	e004      	b.n	8005518 <eMBMasterFuncReadDiscreteInputs+0xcc>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800550e:	2303      	movs	r3, #3
 8005510:	75bb      	strb	r3, [r7, #22]
 8005512:	e001      	b.n	8005518 <eMBMasterFuncReadDiscreteInputs+0xcc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8005514:	2303      	movs	r3, #3
 8005516:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8005518:	7dbb      	ldrb	r3, [r7, #22]
}
 800551a:	4618      	mov	r0, r3
 800551c:	3718      	adds	r7, #24
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <eMBMasterFuncWriteHoldingRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b084      	sub	sp, #16
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
 800552a:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 800552c:	2300      	movs	r3, #0
 800552e:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_SIZE ) )
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	2b05      	cmp	r3, #5
 8005536:	d122      	bne.n	800557e <eMBMasterFuncWriteHoldingRegister+0x5c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	3301      	adds	r3, #1
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	b29b      	uxth	r3, r3
 8005540:	021b      	lsls	r3, r3, #8
 8005542:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	3302      	adds	r3, #2
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	b29a      	uxth	r2, r3
 800554c:	89bb      	ldrh	r3, [r7, #12]
 800554e:	4313      	orrs	r3, r2
 8005550:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8005552:	89bb      	ldrh	r3, [r7, #12]
 8005554:	3301      	adds	r3, #1
 8005556:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBMasterRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	1cd8      	adds	r0, r3, #3
 800555c:	89b9      	ldrh	r1, [r7, #12]
 800555e:	2301      	movs	r3, #1
 8005560:	2201      	movs	r2, #1
 8005562:	f7fb fb5f 	bl	8000c24 <eMBMasterRegHoldingCB>
 8005566:	4603      	mov	r3, r0
 8005568:	72fb      	strb	r3, [r7, #11]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 800556a:	7afb      	ldrb	r3, [r7, #11]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d008      	beq.n	8005582 <eMBMasterFuncWriteHoldingRegister+0x60>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 8005570:	7afb      	ldrb	r3, [r7, #11]
 8005572:	4618      	mov	r0, r3
 8005574:	f000 fa5e 	bl	8005a34 <prveMBError2Exception>
 8005578:	4603      	mov	r3, r0
 800557a:	73fb      	strb	r3, [r7, #15]
 800557c:	e001      	b.n	8005582 <eMBMasterFuncWriteHoldingRegister+0x60>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800557e:	2303      	movs	r3, #3
 8005580:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8005582:	7bfb      	ldrb	r3, [r7, #15]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <eMBMasterFuncWriteMultipleHoldingRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b086      	sub	sp, #24
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
    UCHAR          *ucMBFrame;
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 8005596:	2300      	movs	r3, #0
 8005598:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	881b      	ldrh	r3, [r3, #0]
 800559e:	2b05      	cmp	r3, #5
 80055a0:	d004      	beq.n	80055ac <eMBMasterFuncWriteMultipleHoldingRegister+0x20>
 80055a2:	f001 f86b 	bl	800667c <xMBMasterRequestIsBroadcast>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d03f      	beq.n	800562c <eMBMasterFuncWriteMultipleHoldingRegister+0xa0>
    {
        vMBMasterGetPDUSndBuf(&ucMBFrame);
 80055ac:	f107 030c 	add.w	r3, r7, #12
 80055b0:	4618      	mov	r0, r3
 80055b2:	f001 f837 	bl	8006624 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF] << 8 );
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	3301      	adds	r3, #1
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	b29b      	uxth	r3, r3
 80055be:	021b      	lsls	r3, r3, #8
 80055c0:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF + 1] );
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	3302      	adds	r3, #2
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	8abb      	ldrh	r3, [r7, #20]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 80055d0:	8abb      	ldrh	r3, [r7, #20]
 80055d2:	3301      	adds	r3, #1
 80055d4:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF] << 8 );
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	3303      	adds	r3, #3
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	b29b      	uxth	r3, r3
 80055de:	021b      	lsls	r3, r3, #8
 80055e0:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF + 1] );
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	3304      	adds	r3, #4
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	8a7b      	ldrh	r3, [r7, #18]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	827b      	strh	r3, [r7, #18]

        ucRegByteCount = ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF];
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	795b      	ldrb	r3, [r3, #5]
 80055f4:	747b      	strb	r3, [r7, #17]

        if( ucRegByteCount == 2 * usRegCount )
 80055f6:	7c7a      	ldrb	r2, [r7, #17]
 80055f8:	8a7b      	ldrh	r3, [r7, #18]
 80055fa:	005b      	lsls	r3, r3, #1
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d112      	bne.n	8005626 <eMBMasterFuncWriteMultipleHoldingRegister+0x9a>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBMasterRegHoldingCB( &ucMBFrame[MB_PDU_REQ_WRITE_MUL_VALUES_OFF],
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	1d98      	adds	r0, r3, #6
 8005604:	8a7a      	ldrh	r2, [r7, #18]
 8005606:	8ab9      	ldrh	r1, [r7, #20]
 8005608:	2301      	movs	r3, #1
 800560a:	f7fb fb0b 	bl	8000c24 <eMBMasterRegHoldingCB>
 800560e:	4603      	mov	r3, r0
 8005610:	743b      	strb	r3, [r7, #16]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8005612:	7c3b      	ldrb	r3, [r7, #16]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00c      	beq.n	8005632 <eMBMasterFuncWriteMultipleHoldingRegister+0xa6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8005618:	7c3b      	ldrb	r3, [r7, #16]
 800561a:	4618      	mov	r0, r3
 800561c:	f000 fa0a 	bl	8005a34 <prveMBError2Exception>
 8005620:	4603      	mov	r3, r0
 8005622:	75fb      	strb	r3, [r7, #23]
        if( ucRegByteCount == 2 * usRegCount )
 8005624:	e005      	b.n	8005632 <eMBMasterFuncWriteMultipleHoldingRegister+0xa6>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8005626:	2303      	movs	r3, #3
 8005628:	75fb      	strb	r3, [r7, #23]
        if( ucRegByteCount == 2 * usRegCount )
 800562a:	e002      	b.n	8005632 <eMBMasterFuncWriteMultipleHoldingRegister+0xa6>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800562c:	2303      	movs	r3, #3
 800562e:	75fb      	strb	r3, [r7, #23]
 8005630:	e000      	b.n	8005634 <eMBMasterFuncWriteMultipleHoldingRegister+0xa8>
        if( ucRegByteCount == 2 * usRegCount )
 8005632:	bf00      	nop
    }
    return eStatus;
 8005634:	7dfb      	ldrb	r3, [r7, #23]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3718      	adds	r7, #24
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <eMBMasterFuncReadHoldingRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b086      	sub	sp, #24
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
 8005646:	6039      	str	r1, [r7, #0]
    UCHAR          *ucMBFrame;
    USHORT          usRegAddress;
    USHORT          usRegCount;

    eMBException    eStatus = MB_EX_NONE;
 8005648:	2300      	movs	r3, #0
 800564a:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 800564c:	f001 f816 	bl	800667c <xMBMasterRequestIsBroadcast>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d002      	beq.n	800565c <eMBMasterFuncReadHoldingRegister+0x1e>
    {
        eStatus = MB_EX_NONE;
 8005656:	2300      	movs	r3, #0
 8005658:	75fb      	strb	r3, [r7, #23]
 800565a:	e047      	b.n	80056ec <eMBMasterFuncReadHoldingRegister+0xae>
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	881b      	ldrh	r3, [r3, #0]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d941      	bls.n	80056e8 <eMBMasterFuncReadHoldingRegister+0xaa>
    {
        vMBMasterGetPDUSndBuf(&ucMBFrame);
 8005664:	f107 030c 	add.w	r3, r7, #12
 8005668:	4618      	mov	r0, r3
 800566a:	f000 ffdb 	bl	8006624 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	3301      	adds	r3, #1
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	b29b      	uxth	r3, r3
 8005676:	021b      	lsls	r3, r3, #8
 8005678:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	3302      	adds	r3, #2
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	b29a      	uxth	r2, r3
 8005682:	8abb      	ldrh	r3, [r7, #20]
 8005684:	4313      	orrs	r3, r2
 8005686:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8005688:	8abb      	ldrh	r3, [r7, #20]
 800568a:	3301      	adds	r3, #1
 800568c:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF] << 8 );
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	3303      	adds	r3, #3
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	b29b      	uxth	r3, r3
 8005696:	021b      	lsls	r3, r3, #8
 8005698:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] );
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	3304      	adds	r3, #4
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	8a7b      	ldrh	r3, [r7, #18]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception.
         */
        if( ( usRegCount >= 1 ) && ( 2 * usRegCount == pucFrame[MB_PDU_FUNC_READ_BYTECNT_OFF] ) )
 80056a8:	8a7b      	ldrh	r3, [r7, #18]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d019      	beq.n	80056e2 <eMBMasterFuncReadHoldingRegister+0xa4>
 80056ae:	8a7b      	ldrh	r3, [r7, #18]
 80056b0:	005b      	lsls	r3, r3, #1
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	3201      	adds	r2, #1
 80056b6:	7812      	ldrb	r2, [r2, #0]
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d112      	bne.n	80056e2 <eMBMasterFuncReadHoldingRegister+0xa4>
        {
            /* Make callback to fill the buffer. */
            eRegStatus = eMBMasterRegHoldingCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usRegCount, MB_REG_READ );
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	1c98      	adds	r0, r3, #2
 80056c0:	8a7a      	ldrh	r2, [r7, #18]
 80056c2:	8ab9      	ldrh	r1, [r7, #20]
 80056c4:	2300      	movs	r3, #0
 80056c6:	f7fb faad 	bl	8000c24 <eMBMasterRegHoldingCB>
 80056ca:	4603      	mov	r3, r0
 80056cc:	747b      	strb	r3, [r7, #17]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80056ce:	7c7b      	ldrb	r3, [r7, #17]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00b      	beq.n	80056ec <eMBMasterFuncReadHoldingRegister+0xae>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80056d4:	7c7b      	ldrb	r3, [r7, #17]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 f9ac 	bl	8005a34 <prveMBError2Exception>
 80056dc:	4603      	mov	r3, r0
 80056de:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 80056e0:	e004      	b.n	80056ec <eMBMasterFuncReadHoldingRegister+0xae>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80056e2:	2303      	movs	r3, #3
 80056e4:	75fb      	strb	r3, [r7, #23]
 80056e6:	e001      	b.n	80056ec <eMBMasterFuncReadHoldingRegister+0xae>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80056e8:	2303      	movs	r3, #3
 80056ea:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 80056ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3718      	adds	r7, #24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <eMBMasterFuncReadWriteMultipleHoldingRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b086      	sub	sp, #24
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
 80056fe:	6039      	str	r1, [r7, #0]
    USHORT          usRegReadCount;
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR          *ucMBFrame;

    eMBException    eStatus = MB_EX_NONE;
 8005700:	2300      	movs	r3, #0
 8005702:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 8005704:	f000 ffba 	bl	800667c <xMBMasterRequestIsBroadcast>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d002      	beq.n	8005714 <eMBMasterFuncReadWriteMultipleHoldingRegister+0x1e>
    {
        eStatus = MB_EX_NONE;
 800570e:	2300      	movs	r3, #0
 8005710:	75fb      	strb	r3, [r7, #23]
 8005712:	e06b      	b.n	80057ec <eMBMasterFuncReadWriteMultipleHoldingRegister+0xf6>
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READWRITE_SIZE_MIN )
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	881b      	ldrh	r3, [r3, #0]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d967      	bls.n	80057ec <eMBMasterFuncReadWriteMultipleHoldingRegister+0xf6>
    {
        vMBMasterGetPDUSndBuf(&ucMBFrame);
 800571c:	f107 0308 	add.w	r3, r7, #8
 8005720:	4618      	mov	r0, r3
 8005722:	f000 ff7f 	bl	8006624 <vMBMasterGetPDUSndBuf>
        usRegReadAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF] << 8U );
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	3301      	adds	r3, #1
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	b29b      	uxth	r3, r3
 800572e:	021b      	lsls	r3, r3, #8
 8005730:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF + 1] );
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	3302      	adds	r3, #2
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	b29a      	uxth	r2, r3
 800573a:	8abb      	ldrh	r3, [r7, #20]
 800573c:	4313      	orrs	r3, r2
 800573e:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress++;
 8005740:	8abb      	ldrh	r3, [r7, #20]
 8005742:	3301      	adds	r3, #1
 8005744:	82bb      	strh	r3, [r7, #20]

        usRegReadCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF] << 8U );
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	3303      	adds	r3, #3
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	b29b      	uxth	r3, r3
 800574e:	021b      	lsls	r3, r3, #8
 8005750:	827b      	strh	r3, [r7, #18]
        usRegReadCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF + 1] );
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	3304      	adds	r3, #4
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	b29a      	uxth	r2, r3
 800575a:	8a7b      	ldrh	r3, [r7, #18]
 800575c:	4313      	orrs	r3, r2
 800575e:	827b      	strh	r3, [r7, #18]

        usRegWriteAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_ADDR_OFF] << 8U );
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	3305      	adds	r3, #5
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	b29b      	uxth	r3, r3
 8005768:	021b      	lsls	r3, r3, #8
 800576a:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_ADDR_OFF + 1] );
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	3306      	adds	r3, #6
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	b29a      	uxth	r2, r3
 8005774:	8a3b      	ldrh	r3, [r7, #16]
 8005776:	4313      	orrs	r3, r2
 8005778:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress++;
 800577a:	8a3b      	ldrh	r3, [r7, #16]
 800577c:	3301      	adds	r3, #1
 800577e:	823b      	strh	r3, [r7, #16]

        usRegWriteCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	3307      	adds	r3, #7
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	b29b      	uxth	r3, r3
 8005788:	021b      	lsls	r3, r3, #8
 800578a:	81fb      	strh	r3, [r7, #14]
        usRegWriteCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF + 1] );
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	3308      	adds	r3, #8
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	b29a      	uxth	r2, r3
 8005794:	89fb      	ldrh	r3, [r7, #14]
 8005796:	4313      	orrs	r3, r2
 8005798:	81fb      	strh	r3, [r7, #14]

        if( ( 2 * usRegReadCount ) == pucFrame[MB_PDU_FUNC_READWRITE_READ_BYTECNT_OFF] )
 800579a:	8a7b      	ldrh	r3, [r7, #18]
 800579c:	005b      	lsls	r3, r3, #1
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	3201      	adds	r2, #1
 80057a2:	7812      	ldrb	r2, [r2, #0]
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d11f      	bne.n	80057e8 <eMBMasterFuncReadWriteMultipleHoldingRegister+0xf2>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBMasterRegHoldingCB( &ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_VALUES_OFF],
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	f103 000a 	add.w	r0, r3, #10
 80057ae:	89fa      	ldrh	r2, [r7, #14]
 80057b0:	8a39      	ldrh	r1, [r7, #16]
 80057b2:	2301      	movs	r3, #1
 80057b4:	f7fb fa36 	bl	8000c24 <eMBMasterRegHoldingCB>
 80057b8:	4603      	mov	r3, r0
 80057ba:	75bb      	strb	r3, [r7, #22]
                                           usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 80057bc:	7dbb      	ldrb	r3, [r7, #22]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d108      	bne.n	80057d4 <eMBMasterFuncReadWriteMultipleHoldingRegister+0xde>
            {
                /* Make the read callback. */
                eRegStatus = eMBMasterRegHoldingCB(&pucFrame[MB_PDU_FUNC_READWRITE_READ_VALUES_OFF],
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	1c98      	adds	r0, r3, #2
 80057c6:	8a7a      	ldrh	r2, [r7, #18]
 80057c8:	8ab9      	ldrh	r1, [r7, #20]
 80057ca:	2300      	movs	r3, #0
 80057cc:	f7fb fa2a 	bl	8000c24 <eMBMasterRegHoldingCB>
 80057d0:	4603      	mov	r3, r0
 80057d2:	75bb      	strb	r3, [r7, #22]
                                              usRegReadAddress, usRegReadCount, MB_REG_READ);
            }
            if( eRegStatus != MB_ENOERR )
 80057d4:	7dbb      	ldrb	r3, [r7, #22]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d008      	beq.n	80057ec <eMBMasterFuncReadWriteMultipleHoldingRegister+0xf6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80057da:	7dbb      	ldrb	r3, [r7, #22]
 80057dc:	4618      	mov	r0, r3
 80057de:	f000 f929 	bl	8005a34 <prveMBError2Exception>
 80057e2:	4603      	mov	r3, r0
 80057e4:	75fb      	strb	r3, [r7, #23]
 80057e6:	e001      	b.n	80057ec <eMBMasterFuncReadWriteMultipleHoldingRegister+0xf6>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80057e8:	2303      	movs	r3, #3
 80057ea:	75fb      	strb	r3, [r7, #23]
        }
    }
    return eStatus;
 80057ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3718      	adds	r7, #24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <eMBMasterFuncReadInputRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b086      	sub	sp, #24
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	6039      	str	r1, [r7, #0]
    UCHAR          *ucMBFrame;
    USHORT          usRegAddress;
    USHORT          usRegCount;

    eMBException    eStatus = MB_EX_NONE;
 8005800:	2300      	movs	r3, #0
 8005802:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 8005804:	f000 ff3a 	bl	800667c <xMBMasterRequestIsBroadcast>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d002      	beq.n	8005814 <eMBMasterFuncReadInputRegister+0x1e>
    {
        eStatus = MB_EX_NONE;
 800580e:	2300      	movs	r3, #0
 8005810:	75fb      	strb	r3, [r7, #23]
 8005812:	e047      	b.n	80058a4 <eMBMasterFuncReadInputRegister+0xae>
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	881b      	ldrh	r3, [r3, #0]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d941      	bls.n	80058a0 <eMBMasterFuncReadInputRegister+0xaa>
    {
        vMBMasterGetPDUSndBuf(&ucMBFrame);
 800581c:	f107 030c 	add.w	r3, r7, #12
 8005820:	4618      	mov	r0, r3
 8005822:	f000 feff 	bl	8006624 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	3301      	adds	r3, #1
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	b29b      	uxth	r3, r3
 800582e:	021b      	lsls	r3, r3, #8
 8005830:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	3302      	adds	r3, #2
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	b29a      	uxth	r2, r3
 800583a:	8abb      	ldrh	r3, [r7, #20]
 800583c:	4313      	orrs	r3, r2
 800583e:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8005840:	8abb      	ldrh	r3, [r7, #20]
 8005842:	3301      	adds	r3, #1
 8005844:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF] << 8 );
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	3303      	adds	r3, #3
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	b29b      	uxth	r3, r3
 800584e:	021b      	lsls	r3, r3, #8
 8005850:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] );
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	3304      	adds	r3, #4
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	b29a      	uxth	r2, r3
 800585a:	8a7b      	ldrh	r3, [r7, #18]
 800585c:	4313      	orrs	r3, r2
 800585e:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception.
         */
        if( ( usRegCount >= 1 ) && ( 2 * usRegCount == pucFrame[MB_PDU_FUNC_READ_BYTECNT_OFF] ) )
 8005860:	8a7b      	ldrh	r3, [r7, #18]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d019      	beq.n	800589a <eMBMasterFuncReadInputRegister+0xa4>
 8005866:	8a7b      	ldrh	r3, [r7, #18]
 8005868:	005b      	lsls	r3, r3, #1
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	3201      	adds	r2, #1
 800586e:	7812      	ldrb	r2, [r2, #0]
 8005870:	4293      	cmp	r3, r2
 8005872:	d112      	bne.n	800589a <eMBMasterFuncReadInputRegister+0xa4>
        {
            /* Make callback to fill the buffer. */
            eRegStatus = eMBMasterRegInputCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usRegCount );
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	3302      	adds	r3, #2
 8005878:	8a7a      	ldrh	r2, [r7, #18]
 800587a:	8ab9      	ldrh	r1, [r7, #20]
 800587c:	4618      	mov	r0, r3
 800587e:	f7fb f96f 	bl	8000b60 <eMBMasterRegInputCB>
 8005882:	4603      	mov	r3, r0
 8005884:	747b      	strb	r3, [r7, #17]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8005886:	7c7b      	ldrb	r3, [r7, #17]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00b      	beq.n	80058a4 <eMBMasterFuncReadInputRegister+0xae>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800588c:	7c7b      	ldrb	r3, [r7, #17]
 800588e:	4618      	mov	r0, r3
 8005890:	f000 f8d0 	bl	8005a34 <prveMBError2Exception>
 8005894:	4603      	mov	r3, r0
 8005896:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8005898:	e004      	b.n	80058a4 <eMBMasterFuncReadInputRegister+0xae>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800589a:	2303      	movs	r3, #3
 800589c:	75fb      	strb	r3, [r7, #23]
 800589e:	e001      	b.n	80058a4 <eMBMasterFuncReadInputRegister+0xae>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80058a0:	2303      	movs	r3, #3
 80058a2:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 80058a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
	...

080058b0 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	3301      	adds	r3, #1
 80058be:	4a08      	ldr	r2, [pc, #32]	; (80058e0 <eMBFuncReportSlaveID+0x30>)
 80058c0:	8812      	ldrh	r2, [r2, #0]
 80058c2:	4908      	ldr	r1, [pc, #32]	; (80058e4 <eMBFuncReportSlaveID+0x34>)
 80058c4:	4618      	mov	r0, r3
 80058c6:	f000 ff3f 	bl	8006748 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 80058ca:	4b05      	ldr	r3, [pc, #20]	; (80058e0 <eMBFuncReportSlaveID+0x30>)
 80058cc:	881b      	ldrh	r3, [r3, #0]
 80058ce:	3301      	adds	r3, #1
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3708      	adds	r7, #8
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	20005b6c 	.word	0x20005b6c
 80058e4:	20005b4c 	.word	0x20005b4c

080058e8 <xMBUtilSetBits>:

/* ----------------------- Start implementation -----------------------------*/
void
xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
                UCHAR ucValue )
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	4608      	mov	r0, r1
 80058f2:	4611      	mov	r1, r2
 80058f4:	461a      	mov	r2, r3
 80058f6:	4603      	mov	r3, r0
 80058f8:	807b      	strh	r3, [r7, #2]
 80058fa:	460b      	mov	r3, r1
 80058fc:	707b      	strb	r3, [r7, #1]
 80058fe:	4613      	mov	r3, r2
 8005900:	703b      	strb	r3, [r7, #0]
    USHORT          usWordBuf;
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;
 8005902:	783b      	ldrb	r3, [r7, #0]
 8005904:	82fb      	strh	r3, [r7, #22]

    assert( ucNBits <= 8 );
 8005906:	787b      	ldrb	r3, [r7, #1]
 8005908:	2b08      	cmp	r3, #8
 800590a:	d905      	bls.n	8005918 <xMBUtilSetBits+0x30>
 800590c:	4b29      	ldr	r3, [pc, #164]	; (80059b4 <xMBUtilSetBits+0xcc>)
 800590e:	4a2a      	ldr	r2, [pc, #168]	; (80059b8 <xMBUtilSetBits+0xd0>)
 8005910:	2139      	movs	r1, #57	; 0x39
 8005912:	482a      	ldr	r0, [pc, #168]	; (80059bc <xMBUtilSetBits+0xd4>)
 8005914:	f000 febe 	bl	8006694 <__assert_func>
    assert( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8005918:	887b      	ldrh	r3, [r7, #2]
 800591a:	08db      	lsrs	r3, r3, #3
 800591c:	82bb      	strh	r3, [r7, #20]

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
 800591e:	8abb      	ldrh	r3, [r7, #20]
 8005920:	00db      	lsls	r3, r3, #3
 8005922:	b29b      	uxth	r3, r3
 8005924:	887a      	ldrh	r2, [r7, #2]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	827b      	strh	r3, [r7, #18]

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;
 800592a:	8afa      	ldrh	r2, [r7, #22]
 800592c:	8a7b      	ldrh	r3, [r7, #18]
 800592e:	fa02 f303 	lsl.w	r3, r2, r3
 8005932:	82fb      	strh	r3, [r7, #22]

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8005934:	787b      	ldrb	r3, [r7, #1]
 8005936:	2201      	movs	r2, #1
 8005938:	fa02 f303 	lsl.w	r3, r2, r3
 800593c:	b29b      	uxth	r3, r3
 800593e:	3b01      	subs	r3, #1
 8005940:	823b      	strh	r3, [r7, #16]
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
 8005942:	8a3a      	ldrh	r2, [r7, #16]
 8005944:	8879      	ldrh	r1, [r7, #2]
 8005946:	8abb      	ldrh	r3, [r7, #20]
 8005948:	00db      	lsls	r3, r3, #3
 800594a:	1acb      	subs	r3, r1, r3
 800594c:	fa02 f303 	lsl.w	r3, r2, r3
 8005950:	823b      	strh	r3, [r7, #16]

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 8005952:	8abb      	ldrh	r3, [r7, #20]
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	4413      	add	r3, r2
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	81fb      	strh	r3, [r7, #14]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 800595c:	8abb      	ldrh	r3, [r7, #20]
 800595e:	3301      	adds	r3, #1
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	4413      	add	r3, r2
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	021b      	lsls	r3, r3, #8
 8005968:	b21a      	sxth	r2, r3
 800596a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800596e:	4313      	orrs	r3, r2
 8005970:	b21b      	sxth	r3, r3
 8005972:	81fb      	strh	r3, [r7, #14]

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 8005974:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005978:	43db      	mvns	r3, r3
 800597a:	b21a      	sxth	r2, r3
 800597c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005980:	4013      	ands	r3, r2
 8005982:	b21a      	sxth	r2, r3
 8005984:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005988:	4313      	orrs	r3, r2
 800598a:	b21b      	sxth	r3, r3
 800598c:	81fb      	strh	r3, [r7, #14]

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
 800598e:	8abb      	ldrh	r3, [r7, #20]
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	4413      	add	r3, r2
 8005994:	89fa      	ldrh	r2, [r7, #14]
 8005996:	b2d2      	uxtb	r2, r2
 8005998:	701a      	strb	r2, [r3, #0]
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
 800599a:	89fb      	ldrh	r3, [r7, #14]
 800599c:	0a1b      	lsrs	r3, r3, #8
 800599e:	b299      	uxth	r1, r3
 80059a0:	8abb      	ldrh	r3, [r7, #20]
 80059a2:	3301      	adds	r3, #1
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	4413      	add	r3, r2
 80059a8:	b2ca      	uxtb	r2, r1
 80059aa:	701a      	strb	r2, [r3, #0]
}
 80059ac:	bf00      	nop
 80059ae:	3718      	adds	r7, #24
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	0800779c 	.word	0x0800779c
 80059b8:	080077fc 	.word	0x080077fc
 80059bc:	080077ac 	.word	0x080077ac

080059c0 <xMBUtilGetBits>:

UCHAR
xMBUtilGetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits )
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	460b      	mov	r3, r1
 80059ca:	807b      	strh	r3, [r7, #2]
 80059cc:	4613      	mov	r3, r2
 80059ce:	707b      	strb	r3, [r7, #1]
    USHORT          usByteOffset;
    USHORT          usNPreBits;

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 80059d0:	887b      	ldrh	r3, [r7, #2]
 80059d2:	08db      	lsrs	r3, r3, #3
 80059d4:	81fb      	strh	r3, [r7, #14]

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
 80059d6:	89fb      	ldrh	r3, [r7, #14]
 80059d8:	00db      	lsls	r3, r3, #3
 80059da:	b29b      	uxth	r3, r3
 80059dc:	887a      	ldrh	r2, [r7, #2]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	81bb      	strh	r3, [r7, #12]

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 80059e2:	787b      	ldrb	r3, [r7, #1]
 80059e4:	2201      	movs	r2, #1
 80059e6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	3b01      	subs	r3, #1
 80059ee:	817b      	strh	r3, [r7, #10]

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 80059f0:	89fb      	ldrh	r3, [r7, #14]
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	4413      	add	r3, r2
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	813b      	strh	r3, [r7, #8]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 80059fa:	89fb      	ldrh	r3, [r7, #14]
 80059fc:	3301      	adds	r3, #1
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	4413      	add	r3, r2
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	021b      	lsls	r3, r3, #8
 8005a06:	b21a      	sxth	r2, r3
 8005a08:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	b21b      	sxth	r3, r3
 8005a10:	813b      	strh	r3, [r7, #8]

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
 8005a12:	893a      	ldrh	r2, [r7, #8]
 8005a14:	89bb      	ldrh	r3, [r7, #12]
 8005a16:	fa42 f303 	asr.w	r3, r2, r3
 8005a1a:	813b      	strh	r3, [r7, #8]

    /* mask away bits above the requested bitfield. */
    usWordBuf &= usMask;
 8005a1c:	893a      	ldrh	r2, [r7, #8]
 8005a1e:	897b      	ldrh	r3, [r7, #10]
 8005a20:	4013      	ands	r3, r2
 8005a22:	813b      	strh	r3, [r7, #8]

    return ( UCHAR ) usWordBuf;
 8005a24:	893b      	ldrh	r3, [r7, #8]
 8005a26:	b2db      	uxtb	r3, r3
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3714      	adds	r7, #20
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <prveMBError2Exception>:

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	71fb      	strb	r3, [r7, #7]
    eMBException    eStatus;

    switch ( eErrorCode )
 8005a3e:	79fb      	ldrb	r3, [r7, #7]
 8005a40:	2b07      	cmp	r3, #7
 8005a42:	d00c      	beq.n	8005a5e <prveMBError2Exception+0x2a>
 8005a44:	2b07      	cmp	r3, #7
 8005a46:	dc0d      	bgt.n	8005a64 <prveMBError2Exception+0x30>
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d002      	beq.n	8005a52 <prveMBError2Exception+0x1e>
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d003      	beq.n	8005a58 <prveMBError2Exception+0x24>
 8005a50:	e008      	b.n	8005a64 <prveMBError2Exception+0x30>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 8005a52:	2300      	movs	r3, #0
 8005a54:	73fb      	strb	r3, [r7, #15]
            break;
 8005a56:	e008      	b.n	8005a6a <prveMBError2Exception+0x36>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 8005a58:	2302      	movs	r3, #2
 8005a5a:	73fb      	strb	r3, [r7, #15]
            break;
 8005a5c:	e005      	b.n	8005a6a <prveMBError2Exception+0x36>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 8005a5e:	2306      	movs	r3, #6
 8005a60:	73fb      	strb	r3, [r7, #15]
            break;
 8005a62:	e002      	b.n	8005a6a <prveMBError2Exception+0x36>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 8005a64:	2304      	movs	r3, #4
 8005a66:	73fb      	strb	r3, [r7, #15]
            break;
 8005a68:	bf00      	nop
    }

    return eStatus;
 8005a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3714      	adds	r7, #20
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <eMBMasterInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBMasterInit( eMBMode eMode, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	603a      	str	r2, [r7, #0]
 8005a80:	461a      	mov	r2, r3
 8005a82:	4603      	mov	r3, r0
 8005a84:	71fb      	strb	r3, [r7, #7]
 8005a86:	460b      	mov	r3, r1
 8005a88:	71bb      	strb	r3, [r7, #6]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	73fb      	strb	r3, [r7, #15]

    switch (eMode)
 8005a92:	79fb      	ldrb	r3, [r7, #7]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d120      	bne.n	8005ada <eMBMasterInit+0x62>
    {
#if MB_MASTER_RTU_ENABLED > 0
    case MB_RTU:
        pvMBMasterFrameStartCur = eMBMasterRTUStart;
 8005a98:	4b1b      	ldr	r3, [pc, #108]	; (8005b08 <eMBMasterInit+0x90>)
 8005a9a:	4a1c      	ldr	r2, [pc, #112]	; (8005b0c <eMBMasterInit+0x94>)
 8005a9c:	601a      	str	r2, [r3, #0]
        pvMBMasterFrameStopCur = eMBMasterRTUStop;
 8005a9e:	4b1c      	ldr	r3, [pc, #112]	; (8005b10 <eMBMasterInit+0x98>)
 8005aa0:	4a1c      	ldr	r2, [pc, #112]	; (8005b14 <eMBMasterInit+0x9c>)
 8005aa2:	601a      	str	r2, [r3, #0]
        peMBMasterFrameSendCur = eMBMasterRTUSend;
 8005aa4:	4b1c      	ldr	r3, [pc, #112]	; (8005b18 <eMBMasterInit+0xa0>)
 8005aa6:	4a1d      	ldr	r2, [pc, #116]	; (8005b1c <eMBMasterInit+0xa4>)
 8005aa8:	601a      	str	r2, [r3, #0]
        peMBMasterFrameReceiveCur = eMBMasterRTUReceive;
 8005aaa:	4b1d      	ldr	r3, [pc, #116]	; (8005b20 <eMBMasterInit+0xa8>)
 8005aac:	4a1d      	ldr	r2, [pc, #116]	; (8005b24 <eMBMasterInit+0xac>)
 8005aae:	601a      	str	r2, [r3, #0]
        pvMBMasterFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 8005ab0:	4b1d      	ldr	r3, [pc, #116]	; (8005b28 <eMBMasterInit+0xb0>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	601a      	str	r2, [r3, #0]
        pxMBMasterFrameCBByteReceived = xMBMasterRTUReceiveFSM;
 8005ab6:	4b1d      	ldr	r3, [pc, #116]	; (8005b2c <eMBMasterInit+0xb4>)
 8005ab8:	4a1d      	ldr	r2, [pc, #116]	; (8005b30 <eMBMasterInit+0xb8>)
 8005aba:	601a      	str	r2, [r3, #0]
        pxMBMasterFrameCBTransmitterEmpty = xMBMasterRTUTransmitFSM;
 8005abc:	4b1d      	ldr	r3, [pc, #116]	; (8005b34 <eMBMasterInit+0xbc>)
 8005abe:	4a1e      	ldr	r2, [pc, #120]	; (8005b38 <eMBMasterInit+0xc0>)
 8005ac0:	601a      	str	r2, [r3, #0]
        pxMBMasterPortCBTimerExpired = xMBMasterRTUTimerExpired;
 8005ac2:	4b1e      	ldr	r3, [pc, #120]	; (8005b3c <eMBMasterInit+0xc4>)
 8005ac4:	4a1e      	ldr	r2, [pc, #120]	; (8005b40 <eMBMasterInit+0xc8>)
 8005ac6:	601a      	str	r2, [r3, #0]

        eStatus = eMBMasterRTUInit(ucPort, ulBaudRate, eParity);
 8005ac8:	797a      	ldrb	r2, [r7, #5]
 8005aca:	79bb      	ldrb	r3, [r7, #6]
 8005acc:	6839      	ldr	r1, [r7, #0]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f000 fb9a 	bl	8006208 <eMBMasterRTUInit>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	73fb      	strb	r3, [r7, #15]
        break;
 8005ad8:	e002      	b.n	8005ae0 <eMBMasterInit+0x68>

        eStatus = eMBMasterASCIIInit(ucPort, ulBaudRate, eParity );
        break;
#endif
    default:
        eStatus = MB_EINVAL;
 8005ada:	2302      	movs	r3, #2
 8005adc:	73fb      	strb	r3, [r7, #15]
        break;
 8005ade:	bf00      	nop
    }

    if (eStatus == MB_ENOERR)
 8005ae0:	7bfb      	ldrb	r3, [r7, #15]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10a      	bne.n	8005afc <eMBMasterInit+0x84>
    {
        if (!xMBMasterPortEventInit())
 8005ae6:	f000 f9e1 	bl	8005eac <xMBMasterPortEventInit>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d102      	bne.n	8005af6 <eMBMasterInit+0x7e>
        {
            /* port dependent event module initalization failed. */
            eStatus = MB_EPORTERR;
 8005af0:	2303      	movs	r3, #3
 8005af2:	73fb      	strb	r3, [r7, #15]
 8005af4:	e002      	b.n	8005afc <eMBMasterInit+0x84>
        }
        else
        {
            eMBState = STATE_DISABLED;
 8005af6:	4b13      	ldr	r3, [pc, #76]	; (8005b44 <eMBMasterInit+0xcc>)
 8005af8:	2201      	movs	r2, #1
 8005afa:	701a      	strb	r2, [r3, #0]
        }
    }
    return eStatus;
 8005afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	20005b78 	.word	0x20005b78
 8005b0c:	08006279 	.word	0x08006279
 8005b10:	20005b7c 	.word	0x20005b7c
 8005b14:	080062a1 	.word	0x080062a1
 8005b18:	20005b74 	.word	0x20005b74
 8005b1c:	0800632d 	.word	0x0800632d
 8005b20:	20005b80 	.word	0x20005b80
 8005b24:	080062bd 	.word	0x080062bd
 8005b28:	20005b84 	.word	0x20005b84
 8005b2c:	20005b88 	.word	0x20005b88
 8005b30:	08006401 	.word	0x08006401
 8005b34:	20005b8c 	.word	0x20005b8c
 8005b38:	080064bd 	.word	0x080064bd
 8005b3c:	20005b90 	.word	0x20005b90
 8005b40:	0800656d 	.word	0x0800656d
 8005b44:	20000010 	.word	0x20000010

08005b48 <eMBMasterEnable>:
    return eStatus;
}

eMBErrorCode
eMBMasterEnable( void )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 8005b52:	4b09      	ldr	r3, [pc, #36]	; (8005b78 <eMBMasterEnable+0x30>)
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d106      	bne.n	8005b68 <eMBMasterEnable+0x20>
    {
        /* Activate the protocol stack. */
        pvMBMasterFrameStartCur(  );
 8005b5a:	4b08      	ldr	r3, [pc, #32]	; (8005b7c <eMBMasterEnable+0x34>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8005b60:	4b05      	ldr	r3, [pc, #20]	; (8005b78 <eMBMasterEnable+0x30>)
 8005b62:	2200      	movs	r2, #0
 8005b64:	701a      	strb	r2, [r3, #0]
 8005b66:	e001      	b.n	8005b6c <eMBMasterEnable+0x24>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8005b68:	2306      	movs	r3, #6
 8005b6a:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 8005b6c:	79fb      	ldrb	r3, [r7, #7]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	20000010 	.word	0x20000010
 8005b7c:	20005b78 	.word	0x20005b78

08005b80 <eMBMasterPoll>:
}


eMBErrorCode
eMBMasterPoll( void )
{
 8005b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i , j;
    eMBErrorCode    eStatus = MB_ENOERR;
 8005b86:	2300      	movs	r3, #0
 8005b88:	71fb      	strb	r3, [r7, #7]
    eMBMasterEventType    eEvent;
    eMBMasterErrorEventType errorType;

    /* Check if the protocol stack is ready. */
    if(( eMBState != STATE_ENABLED ) && ( eMBState != STATE_ESTABLISHED))
 8005b8a:	4b9b      	ldr	r3, [pc, #620]	; (8005df8 <eMBMasterPoll+0x278>)
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d005      	beq.n	8005b9e <eMBMasterPoll+0x1e>
 8005b92:	4b99      	ldr	r3, [pc, #612]	; (8005df8 <eMBMasterPoll+0x278>)
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	2b03      	cmp	r3, #3
 8005b98:	d001      	beq.n	8005b9e <eMBMasterPoll+0x1e>
    {
        return MB_EILLSTATE;
 8005b9a:	2306      	movs	r3, #6
 8005b9c:	e127      	b.n	8005dee <eMBMasterPoll+0x26e>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBMasterPortEventGet( &eEvent ) == TRUE )
 8005b9e:	1d3b      	adds	r3, r7, #4
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f000 f9a9 	bl	8005ef8 <xMBMasterPortEventGet>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	f040 811c 	bne.w	8005de6 <eMBMasterPoll+0x266>
    {
        switch ( eEvent )
 8005bae:	88bb      	ldrh	r3, [r7, #4]
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	2b0f      	cmp	r3, #15
 8005bb4:	f200 8119 	bhi.w	8005dea <eMBMasterPoll+0x26a>
 8005bb8:	a201      	add	r2, pc, #4	; (adr r2, 8005bc0 <eMBMasterPoll+0x40>)
 8005bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bbe:	bf00      	nop
 8005bc0:	08005c01 	.word	0x08005c01
 8005bc4:	08005c09 	.word	0x08005c09
 8005bc8:	08005deb 	.word	0x08005deb
 8005bcc:	08005c47 	.word	0x08005c47
 8005bd0:	08005deb 	.word	0x08005deb
 8005bd4:	08005deb 	.word	0x08005deb
 8005bd8:	08005deb 	.word	0x08005deb
 8005bdc:	08005d3b 	.word	0x08005d3b
 8005be0:	08005deb 	.word	0x08005deb
 8005be4:	08005deb 	.word	0x08005deb
 8005be8:	08005deb 	.word	0x08005deb
 8005bec:	08005deb 	.word	0x08005deb
 8005bf0:	08005deb 	.word	0x08005deb
 8005bf4:	08005deb 	.word	0x08005deb
 8005bf8:	08005deb 	.word	0x08005deb
 8005bfc:	08005d65 	.word	0x08005d65
        {
        case EV_MASTER_READY:
            eMBState = STATE_ESTABLISHED;
 8005c00:	4b7d      	ldr	r3, [pc, #500]	; (8005df8 <eMBMasterPoll+0x278>)
 8005c02:	2203      	movs	r2, #3
 8005c04:	701a      	strb	r2, [r3, #0]
            break;
 8005c06:	e0f1      	b.n	8005dec <eMBMasterPoll+0x26c>

        case EV_MASTER_FRAME_RECEIVED:
            eStatus = peMBMasterFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8005c08:	4b7c      	ldr	r3, [pc, #496]	; (8005dfc <eMBMasterPoll+0x27c>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a7c      	ldr	r2, [pc, #496]	; (8005e00 <eMBMasterPoll+0x280>)
 8005c0e:	497d      	ldr	r1, [pc, #500]	; (8005e04 <eMBMasterPoll+0x284>)
 8005c10:	487d      	ldr	r0, [pc, #500]	; (8005e08 <eMBMasterPoll+0x288>)
 8005c12:	4798      	blx	r3
 8005c14:	4603      	mov	r3, r0
 8005c16:	71fb      	strb	r3, [r7, #7]
            /* Check if the frame is for us. If not ,send an error process event. */
            if ( ( eStatus == MB_ENOERR ) && ( ucRcvAddress == ucMBMasterGetDestAddress() ) )
 8005c18:	79fb      	ldrb	r3, [r7, #7]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10c      	bne.n	8005c38 <eMBMasterPoll+0xb8>
 8005c1e:	f000 f90d 	bl	8005e3c <ucMBMasterGetDestAddress>
 8005c22:	4603      	mov	r3, r0
 8005c24:	461a      	mov	r2, r3
 8005c26:	4b78      	ldr	r3, [pc, #480]	; (8005e08 <eMBMasterPoll+0x288>)
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d104      	bne.n	8005c38 <eMBMasterPoll+0xb8>
            {
                ( void ) xMBMasterPortEventPost( EV_MASTER_EXECUTE );
 8005c2e:	2004      	movs	r0, #4
 8005c30:	f000 f94a 	bl	8005ec8 <xMBMasterPortEventPost>
 8005c34:	bf00      	nop
            else
            {
                vMBMasterSetErrorType(EV_ERROR_RECEIVE_DATA);
                ( void ) xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
            }
            break;
 8005c36:	e0d9      	b.n	8005dec <eMBMasterPoll+0x26c>
                vMBMasterSetErrorType(EV_ERROR_RECEIVE_DATA);
 8005c38:	2001      	movs	r0, #1
 8005c3a:	f000 f927 	bl	8005e8c <vMBMasterSetErrorType>
                ( void ) xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
 8005c3e:	2010      	movs	r0, #16
 8005c40:	f000 f942 	bl	8005ec8 <xMBMasterPortEventPost>
            break;
 8005c44:	e0d2      	b.n	8005dec <eMBMasterPoll+0x26c>

        case EV_MASTER_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8005c46:	4b6f      	ldr	r3, [pc, #444]	; (8005e04 <eMBMasterPoll+0x284>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	781a      	ldrb	r2, [r3, #0]
 8005c4c:	4b6f      	ldr	r3, [pc, #444]	; (8005e0c <eMBMasterPoll+0x28c>)
 8005c4e:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 8005c50:	4b6f      	ldr	r3, [pc, #444]	; (8005e10 <eMBMasterPoll+0x290>)
 8005c52:	2201      	movs	r2, #1
 8005c54:	701a      	strb	r2, [r3, #0]
            /* If receive frame has exception .The receive function code highest bit is 1.*/
            if(ucFunctionCode >> 7) {
 8005c56:	4b6d      	ldr	r3, [pc, #436]	; (8005e0c <eMBMasterPoll+0x28c>)
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	b25b      	sxtb	r3, r3
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	da06      	bge.n	8005c6e <eMBMasterPoll+0xee>
                eException = (eMBException)ucMBFrame[MB_PDU_DATA_OFF];
 8005c60:	4b68      	ldr	r3, [pc, #416]	; (8005e04 <eMBMasterPoll+0x284>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	3301      	adds	r3, #1
 8005c66:	781a      	ldrb	r2, [r3, #0]
 8005c68:	4b69      	ldr	r3, [pc, #420]	; (8005e10 <eMBMasterPoll+0x290>)
 8005c6a:	701a      	strb	r2, [r3, #0]
 8005c6c:	e055      	b.n	8005d1a <eMBMasterPoll+0x19a>
            }
            else
            {
                for (i = 0; i < MB_FUNC_HANDLERS_MAX; i++)
 8005c6e:	2300      	movs	r3, #0
 8005c70:	60fb      	str	r3, [r7, #12]
 8005c72:	e04d      	b.n	8005d10 <eMBMasterPoll+0x190>
                {
                    /* No more function handlers registered. Abort. */
                    if (xMasterFuncHandlers[i].ucFunctionCode == 0) {
 8005c74:	4a67      	ldr	r2, [pc, #412]	; (8005e14 <eMBMasterPoll+0x294>)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d04b      	beq.n	8005d18 <eMBMasterPoll+0x198>
                        break;
                    }
                    else if (xMasterFuncHandlers[i].ucFunctionCode == ucFunctionCode) {
 8005c80:	4a64      	ldr	r2, [pc, #400]	; (8005e14 <eMBMasterPoll+0x294>)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8005c88:	4b60      	ldr	r3, [pc, #384]	; (8005e0c <eMBMasterPoll+0x28c>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d13c      	bne.n	8005d0a <eMBMasterPoll+0x18a>
                        vMBMasterSetCBRunInMasterMode(TRUE);
 8005c90:	2001      	movs	r0, #1
 8005c92:	f000 f8c3 	bl	8005e1c <vMBMasterSetCBRunInMasterMode>
                        /* If master request is broadcast,
                         * the master need execute function for all slave.
                         */
                        if ( xMBMasterRequestIsBroadcast() ) {
 8005c96:	f000 fcf1 	bl	800667c <xMBMasterRequestIsBroadcast>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d022      	beq.n	8005ce6 <eMBMasterPoll+0x166>
                            usLength = usMBMasterGetPDUSndLength();
 8005ca0:	f000 fce0 	bl	8006664 <usMBMasterGetPDUSndLength>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	4b55      	ldr	r3, [pc, #340]	; (8005e00 <eMBMasterPoll+0x280>)
 8005caa:	801a      	strh	r2, [r3, #0]
                            for(j = 1; j <= MB_MASTER_TOTAL_SLAVE_NUM; j++){
 8005cac:	2301      	movs	r3, #1
 8005cae:	60bb      	str	r3, [r7, #8]
 8005cb0:	e015      	b.n	8005cde <eMBMasterPoll+0x15e>
                                vMBMasterSetDestAddress(j);
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 f8cc 	bl	8005e54 <vMBMasterSetDestAddress>
                                eException = xMasterFuncHandlers[i].pxHandler(ucMBFrame, &usLength);
 8005cbc:	4a55      	ldr	r2, [pc, #340]	; (8005e14 <eMBMasterPoll+0x294>)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	00db      	lsls	r3, r3, #3
 8005cc2:	4413      	add	r3, r2
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	4a4f      	ldr	r2, [pc, #316]	; (8005e04 <eMBMasterPoll+0x284>)
 8005cc8:	6812      	ldr	r2, [r2, #0]
 8005cca:	494d      	ldr	r1, [pc, #308]	; (8005e00 <eMBMasterPoll+0x280>)
 8005ccc:	4610      	mov	r0, r2
 8005cce:	4798      	blx	r3
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	4b4e      	ldr	r3, [pc, #312]	; (8005e10 <eMBMasterPoll+0x290>)
 8005cd6:	701a      	strb	r2, [r3, #0]
                            for(j = 1; j <= MB_MASTER_TOTAL_SLAVE_NUM; j++){
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	60bb      	str	r3, [r7, #8]
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	2b10      	cmp	r3, #16
 8005ce2:	dde6      	ble.n	8005cb2 <eMBMasterPoll+0x132>
 8005ce4:	e00d      	b.n	8005d02 <eMBMasterPoll+0x182>
                            }
                        }
                        else {
                            eException = xMasterFuncHandlers[i].pxHandler(ucMBFrame, &usLength);
 8005ce6:	4a4b      	ldr	r2, [pc, #300]	; (8005e14 <eMBMasterPoll+0x294>)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	00db      	lsls	r3, r3, #3
 8005cec:	4413      	add	r3, r2
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	4a44      	ldr	r2, [pc, #272]	; (8005e04 <eMBMasterPoll+0x284>)
 8005cf2:	6812      	ldr	r2, [r2, #0]
 8005cf4:	4942      	ldr	r1, [pc, #264]	; (8005e00 <eMBMasterPoll+0x280>)
 8005cf6:	4610      	mov	r0, r2
 8005cf8:	4798      	blx	r3
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	4b44      	ldr	r3, [pc, #272]	; (8005e10 <eMBMasterPoll+0x290>)
 8005d00:	701a      	strb	r2, [r3, #0]
                        }
                        vMBMasterSetCBRunInMasterMode(FALSE);
 8005d02:	2000      	movs	r0, #0
 8005d04:	f000 f88a 	bl	8005e1c <vMBMasterSetCBRunInMasterMode>
                        break;
 8005d08:	e007      	b.n	8005d1a <eMBMasterPoll+0x19a>
                for (i = 0; i < MB_FUNC_HANDLERS_MAX; i++)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	60fb      	str	r3, [r7, #12]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2b0f      	cmp	r3, #15
 8005d14:	ddae      	ble.n	8005c74 <eMBMasterPoll+0xf4>
 8005d16:	e000      	b.n	8005d1a <eMBMasterPoll+0x19a>
                        break;
 8005d18:	bf00      	nop
                    }
                }
            }
            /* If master has exception ,Master will send error process.Otherwise the Master is idle.*/
            if (eException != MB_EX_NONE) {
 8005d1a:	4b3d      	ldr	r3, [pc, #244]	; (8005e10 <eMBMasterPoll+0x290>)
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d006      	beq.n	8005d30 <eMBMasterPoll+0x1b0>
                vMBMasterSetErrorType(EV_ERROR_EXECUTE_FUNCTION);
 8005d22:	2002      	movs	r0, #2
 8005d24:	f000 f8b2 	bl	8005e8c <vMBMasterSetErrorType>
                ( void ) xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
 8005d28:	2010      	movs	r0, #16
 8005d2a:	f000 f8cd 	bl	8005ec8 <xMBMasterPortEventPost>
            }
            else {
                vMBMasterCBRequestScuuess( );
                vMBMasterRunResRelease( );
            }
            break;
 8005d2e:	e05d      	b.n	8005dec <eMBMasterPoll+0x26c>
                vMBMasterCBRequestScuuess( );
 8005d30:	f000 f93e 	bl	8005fb0 <vMBMasterCBRequestScuuess>
                vMBMasterRunResRelease( );
 8005d34:	f000 f90b 	bl	8005f4e <vMBMasterRunResRelease>
            break;
 8005d38:	e058      	b.n	8005dec <eMBMasterPoll+0x26c>

        case EV_MASTER_FRAME_SENT:
            /* Master is busy now. */
            vMBMasterGetPDUSndBuf( &ucMBFrame );
 8005d3a:	4832      	ldr	r0, [pc, #200]	; (8005e04 <eMBMasterPoll+0x284>)
 8005d3c:	f000 fc72 	bl	8006624 <vMBMasterGetPDUSndBuf>
            eStatus = peMBMasterFrameSendCur( ucMBMasterGetDestAddress(), ucMBFrame, usMBMasterGetPDUSndLength() );
 8005d40:	4b35      	ldr	r3, [pc, #212]	; (8005e18 <eMBMasterPoll+0x298>)
 8005d42:	681c      	ldr	r4, [r3, #0]
 8005d44:	f000 f87a 	bl	8005e3c <ucMBMasterGetDestAddress>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	461e      	mov	r6, r3
 8005d4c:	4b2d      	ldr	r3, [pc, #180]	; (8005e04 <eMBMasterPoll+0x284>)
 8005d4e:	681d      	ldr	r5, [r3, #0]
 8005d50:	f000 fc88 	bl	8006664 <usMBMasterGetPDUSndLength>
 8005d54:	4603      	mov	r3, r0
 8005d56:	461a      	mov	r2, r3
 8005d58:	4629      	mov	r1, r5
 8005d5a:	4630      	mov	r0, r6
 8005d5c:	47a0      	blx	r4
 8005d5e:	4603      	mov	r3, r0
 8005d60:	71fb      	strb	r3, [r7, #7]
            break;
 8005d62:	e043      	b.n	8005dec <eMBMasterPoll+0x26c>

        case EV_MASTER_ERROR_PROCESS:
            /* Execute specified error process callback function. */
            errorType = eMBMasterGetErrorType();
 8005d64:	f000 f886 	bl	8005e74 <eMBMasterGetErrorType>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	71bb      	strb	r3, [r7, #6]
            vMBMasterGetPDUSndBuf( &ucMBFrame );
 8005d6c:	4825      	ldr	r0, [pc, #148]	; (8005e04 <eMBMasterPoll+0x284>)
 8005d6e:	f000 fc59 	bl	8006624 <vMBMasterGetPDUSndBuf>
            switch (errorType) {
 8005d72:	79bb      	ldrb	r3, [r7, #6]
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d024      	beq.n	8005dc2 <eMBMasterPoll+0x242>
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	dc31      	bgt.n	8005de0 <eMBMasterPoll+0x260>
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d002      	beq.n	8005d86 <eMBMasterPoll+0x206>
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d00f      	beq.n	8005da4 <eMBMasterPoll+0x224>
 8005d84:	e02c      	b.n	8005de0 <eMBMasterPoll+0x260>
            case EV_ERROR_RESPOND_TIMEOUT:
                vMBMasterErrorCBRespondTimeout(ucMBMasterGetDestAddress(),
 8005d86:	f000 f859 	bl	8005e3c <ucMBMasterGetDestAddress>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	461d      	mov	r5, r3
 8005d8e:	4b1d      	ldr	r3, [pc, #116]	; (8005e04 <eMBMasterPoll+0x284>)
 8005d90:	681c      	ldr	r4, [r3, #0]
 8005d92:	f000 fc67 	bl	8006664 <usMBMasterGetPDUSndLength>
 8005d96:	4603      	mov	r3, r0
 8005d98:	461a      	mov	r2, r3
 8005d9a:	4621      	mov	r1, r4
 8005d9c:	4628      	mov	r0, r5
 8005d9e:	f000 f8dd 	bl	8005f5c <vMBMasterErrorCBRespondTimeout>
                        ucMBFrame, usMBMasterGetPDUSndLength());
                break;
 8005da2:	e01d      	b.n	8005de0 <eMBMasterPoll+0x260>
            case EV_ERROR_RECEIVE_DATA:
                vMBMasterErrorCBReceiveData(ucMBMasterGetDestAddress(),
 8005da4:	f000 f84a 	bl	8005e3c <ucMBMasterGetDestAddress>
 8005da8:	4603      	mov	r3, r0
 8005daa:	461d      	mov	r5, r3
 8005dac:	4b15      	ldr	r3, [pc, #84]	; (8005e04 <eMBMasterPoll+0x284>)
 8005dae:	681c      	ldr	r4, [r3, #0]
 8005db0:	f000 fc58 	bl	8006664 <usMBMasterGetPDUSndLength>
 8005db4:	4603      	mov	r3, r0
 8005db6:	461a      	mov	r2, r3
 8005db8:	4621      	mov	r1, r4
 8005dba:	4628      	mov	r0, r5
 8005dbc:	f000 f8dc 	bl	8005f78 <vMBMasterErrorCBReceiveData>
                        ucMBFrame, usMBMasterGetPDUSndLength());
                break;
 8005dc0:	e00e      	b.n	8005de0 <eMBMasterPoll+0x260>
            case EV_ERROR_EXECUTE_FUNCTION:
                vMBMasterErrorCBExecuteFunction(ucMBMasterGetDestAddress(),
 8005dc2:	f000 f83b 	bl	8005e3c <ucMBMasterGetDestAddress>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	461d      	mov	r5, r3
 8005dca:	4b0e      	ldr	r3, [pc, #56]	; (8005e04 <eMBMasterPoll+0x284>)
 8005dcc:	681c      	ldr	r4, [r3, #0]
 8005dce:	f000 fc49 	bl	8006664 <usMBMasterGetPDUSndLength>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	4621      	mov	r1, r4
 8005dd8:	4628      	mov	r0, r5
 8005dda:	f000 f8db 	bl	8005f94 <vMBMasterErrorCBExecuteFunction>
                        ucMBFrame, usMBMasterGetPDUSndLength());
                break;
 8005dde:	bf00      	nop
            }
            vMBMasterRunResRelease();
 8005de0:	f000 f8b5 	bl	8005f4e <vMBMasterRunResRelease>
            break;
 8005de4:	e002      	b.n	8005dec <eMBMasterPoll+0x26c>

        default:
            break;
        }

    }
 8005de6:	bf00      	nop
 8005de8:	e000      	b.n	8005dec <eMBMasterPoll+0x26c>
            break;
 8005dea:	bf00      	nop
    return MB_ENOERR;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005df6:	bf00      	nop
 8005df8:	20000010 	.word	0x20000010
 8005dfc:	20005b80 	.word	0x20005b80
 8005e00:	20005b9c 	.word	0x20005b9c
 8005e04:	20005b98 	.word	0x20005b98
 8005e08:	20005b94 	.word	0x20005b94
 8005e0c:	20005b9e 	.word	0x20005b9e
 8005e10:	20005b9f 	.word	0x20005b9f
 8005e14:	20000014 	.word	0x20000014
 8005e18:	20005b74 	.word	0x20005b74

08005e1c <vMBMasterSetCBRunInMasterMode>:
{
    return xMBRunInMasterMode;
}
/* Set whether the Modbus Master is run in master mode.*/
void vMBMasterSetCBRunInMasterMode( BOOL IsMasterMode )
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	4603      	mov	r3, r0
 8005e24:	71fb      	strb	r3, [r7, #7]
    xMBRunInMasterMode = IsMasterMode;
 8005e26:	4a04      	ldr	r2, [pc, #16]	; (8005e38 <vMBMasterSetCBRunInMasterMode+0x1c>)
 8005e28:	79fb      	ldrb	r3, [r7, #7]
 8005e2a:	7013      	strb	r3, [r2, #0]
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr
 8005e38:	20005b6f 	.word	0x20005b6f

08005e3c <ucMBMasterGetDestAddress>:
/* Get Modbus Master send destination address. */
UCHAR ucMBMasterGetDestAddress( void )
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	af00      	add	r7, sp, #0
    return ucMBMasterDestAddress;
 8005e40:	4b03      	ldr	r3, [pc, #12]	; (8005e50 <ucMBMasterGetDestAddress+0x14>)
 8005e42:	781b      	ldrb	r3, [r3, #0]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	20005b6e 	.word	0x20005b6e

08005e54 <vMBMasterSetDestAddress>:
/* Set Modbus Master send destination address. */
void vMBMasterSetDestAddress( UCHAR Address )
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	71fb      	strb	r3, [r7, #7]
    ucMBMasterDestAddress = Address;
 8005e5e:	4a04      	ldr	r2, [pc, #16]	; (8005e70 <vMBMasterSetDestAddress+0x1c>)
 8005e60:	79fb      	ldrb	r3, [r7, #7]
 8005e62:	7013      	strb	r3, [r2, #0]
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr
 8005e70:	20005b6e 	.word	0x20005b6e

08005e74 <eMBMasterGetErrorType>:
/* Get Modbus Master current error event type. */
eMBMasterErrorEventType eMBMasterGetErrorType( void )
{
 8005e74:	b480      	push	{r7}
 8005e76:	af00      	add	r7, sp, #0
    return eMBMasterCurErrorType;
 8005e78:	4b03      	ldr	r3, [pc, #12]	; (8005e88 <eMBMasterGetErrorType+0x14>)
 8005e7a:	781b      	ldrb	r3, [r3, #0]
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	20005b70 	.word	0x20005b70

08005e8c <vMBMasterSetErrorType>:
/* Set Modbus Master current error event type. */
void vMBMasterSetErrorType( eMBMasterErrorEventType errorType )
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	4603      	mov	r3, r0
 8005e94:	71fb      	strb	r3, [r7, #7]
    eMBMasterCurErrorType = errorType;
 8005e96:	4a04      	ldr	r2, [pc, #16]	; (8005ea8 <vMBMasterSetErrorType+0x1c>)
 8005e98:	79fb      	ldrb	r3, [r7, #7]
 8005e9a:	7013      	strb	r3, [r2, #0]
}
 8005e9c:	bf00      	nop
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr
 8005ea8:	20005b70 	.word	0x20005b70

08005eac <xMBMasterPortEventInit>:
//static struct rt_event     xMasterOsEvent;
/* ----------------------- Start implementation -----------------------------*/

BOOL
xMBMasterPortEventInit( void )
{
 8005eac:	b480      	push	{r7}
 8005eae:	af00      	add	r7, sp, #0
    xEventInQueue = FALSE;
 8005eb0:	4b04      	ldr	r3, [pc, #16]	; (8005ec4 <xMBMasterPortEventInit+0x18>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	701a      	strb	r2, [r3, #0]
    return TRUE;
 8005eb6:	2301      	movs	r3, #1
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	20005ba1 	.word	0x20005ba1

08005ec8 <xMBMasterPortEventPost>:

BOOL xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	4603      	mov	r3, r0
 8005ed0:	80fb      	strh	r3, [r7, #6]
    xEventInQueue = TRUE;
 8005ed2:	4b07      	ldr	r3, [pc, #28]	; (8005ef0 <xMBMasterPortEventPost+0x28>)
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	701a      	strb	r2, [r3, #0]
    eQueuedEvent = eEvent;
 8005ed8:	88fb      	ldrh	r3, [r7, #6]
 8005eda:	b2da      	uxtb	r2, r3
 8005edc:	4b05      	ldr	r3, [pc, #20]	; (8005ef4 <xMBMasterPortEventPost+0x2c>)
 8005ede:	701a      	strb	r2, [r3, #0]
    return TRUE;
 8005ee0:	2301      	movs	r3, #1
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	370c      	adds	r7, #12
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	20005ba1 	.word	0x20005ba1
 8005ef4:	20005ba0 	.word	0x20005ba0

08005ef8 <xMBMasterPortEventGet>:

BOOL xMBMasterPortEventGet( eMBMasterEventType * eEvent )
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
    BOOL            xEventHappened = FALSE;
 8005f00:	2300      	movs	r3, #0
 8005f02:	73fb      	strb	r3, [r7, #15]

    if( xEventInQueue )
 8005f04:	4b0a      	ldr	r3, [pc, #40]	; (8005f30 <xMBMasterPortEventGet+0x38>)
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d009      	beq.n	8005f20 <xMBMasterPortEventGet+0x28>
    {
        *eEvent = eQueuedEvent;
 8005f0c:	4b09      	ldr	r3, [pc, #36]	; (8005f34 <xMBMasterPortEventGet+0x3c>)
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	801a      	strh	r2, [r3, #0]
        xEventInQueue = FALSE;
 8005f16:	4b06      	ldr	r3, [pc, #24]	; (8005f30 <xMBMasterPortEventGet+0x38>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	701a      	strb	r2, [r3, #0]
        xEventHappened = TRUE;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	73fb      	strb	r3, [r7, #15]
    }
    return xEventHappened;
 8005f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	20005ba1 	.word	0x20005ba1
 8005f34:	20005ba0 	.word	0x20005ba0

08005f38 <xMBMasterRunResTake>:
 * @param lTimeOut the waiting time.
 *
 * @return resource taked result
 */
BOOL xMBMasterRunResTake( LONG lTimeOut )
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
    /*If waiting time is -1 .It will wait forever */
//    return rt_sem_take(&xMasterRunRes, lTimeOut) ? FALSE : TRUE ;
	return 1;
 8005f40:	2301      	movs	r3, #1
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <vMBMasterRunResRelease>:
 * This function is release Mobus Master running resource.
 * Note:The resource is define by Operating System.If you not use OS this function can be empty.
 *
 */
void vMBMasterRunResRelease( void )
{
 8005f4e:	b480      	push	{r7}
 8005f50:	af00      	add	r7, sp, #0
    /* release resource */
//    rt_sem_release(&xMasterRunRes);
}
 8005f52:	bf00      	nop
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <vMBMasterErrorCBRespondTimeout>:
 * @param pucPDUData PDU buffer data
 * @param ucPDULength PDU buffer length
 *
 */
void vMBMasterErrorCBRespondTimeout(UCHAR ucDestAddress, const UCHAR* pucPDUData,
        USHORT ucPDULength) {
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	4603      	mov	r3, r0
 8005f64:	6039      	str	r1, [r7, #0]
 8005f66:	71fb      	strb	r3, [r7, #7]
 8005f68:	4613      	mov	r3, r2
 8005f6a:	80bb      	strh	r3, [r7, #4]
     */
//    rt_event_send(&xMasterOsEvent, EV_MASTER_ERROR_RESPOND_TIMEOUT);

    /* You can add your code under here. */

}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <vMBMasterErrorCBReceiveData>:
 * @param pucPDUData PDU buffer data
 * @param ucPDULength PDU buffer length
 *
 */
void vMBMasterErrorCBReceiveData(UCHAR ucDestAddress, const UCHAR* pucPDUData,
        USHORT ucPDULength) {
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	4603      	mov	r3, r0
 8005f80:	6039      	str	r1, [r7, #0]
 8005f82:	71fb      	strb	r3, [r7, #7]
 8005f84:	4613      	mov	r3, r2
 8005f86:	80bb      	strh	r3, [r7, #4]
     */
//    rt_event_send(&xMasterOsEvent, EV_MASTER_ERROR_RECEIVE_DATA);

    /* You can add your code under here. */

}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <vMBMasterErrorCBExecuteFunction>:
 * @param pucPDUData PDU buffer data
 * @param ucPDULength PDU buffer length
 *
 */
void vMBMasterErrorCBExecuteFunction(UCHAR ucDestAddress, const UCHAR* pucPDUData,
        USHORT ucPDULength) {
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	6039      	str	r1, [r7, #0]
 8005f9e:	71fb      	strb	r3, [r7, #7]
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	80bb      	strh	r3, [r7, #4]
     */
//    rt_event_send(&xMasterOsEvent, EV_MASTER_ERROR_EXECUTE_FUNCTION);

    /* You can add your code under here. */

}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <vMBMasterCBRequestScuuess>:
 * This is modbus master request process success callback function.
 * @note There functions will block modbus master poll while execute OS waiting.
 * So,for real-time of system.Do not execute too much waiting process.
 *
 */
void vMBMasterCBRequestScuuess( void ) {
 8005fb0:	b480      	push	{r7}
 8005fb2:	af00      	add	r7, sp, #0
     */
 //   rt_event_send(&xMasterOsEvent, EV_MASTER_PROCESS_SUCESS);

    /* You can add your code under here. */

}
 8005fb4:	bf00      	nop
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <eMBMasterWaitRequestFinish>:
 * @note If you are use OS, you can use OS's event mechanism. Otherwise you have to run
 * much user custom delay for waiting.
 *
 * @return request error code
 */
eMBMasterReqErrCode eMBMasterWaitRequestFinish( void ) {
 8005fbe:	b480      	push	{r7}
 8005fc0:	b083      	sub	sp, #12
 8005fc2:	af00      	add	r7, sp, #0
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	71fb      	strb	r3, [r7, #7]
//    {
//        eErrStatus = MB_MRE_EXE_FUN;
//        break;
//    }
//    }
    return eErrStatus;
 8005fc8:	79fb      	ldrb	r3, [r7, #7]
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
	...

08005fd8 <vMBMasterPortSerialEnable>:
/* ----------------------- static functions ---------------------------------*/

/* ----------------------- Start implementation -----------------------------*/

void vMBMasterPortSerialEnable(BOOL xRxEnable, BOOL xTxEnable)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	4603      	mov	r3, r0
 8005fe0:	460a      	mov	r2, r1
 8005fe2:	71fb      	strb	r3, [r7, #7]
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	71bb      	strb	r3, [r7, #6]
	  /* If xRXEnable enable serial receive interrupts. If xTxENable enable
	  * transmitter empty interrupts.
	  */

	  if (xRxEnable) {
 8005fe8:	79fb      	ldrb	r3, [r7, #7]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d008      	beq.n	8006000 <vMBMasterPortSerialEnable+0x28>
	    __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8005fee:	4b15      	ldr	r3, [pc, #84]	; (8006044 <vMBMasterPortSerialEnable+0x6c>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68da      	ldr	r2, [r3, #12]
 8005ff4:	4b13      	ldr	r3, [pc, #76]	; (8006044 <vMBMasterPortSerialEnable+0x6c>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f042 0220 	orr.w	r2, r2, #32
 8005ffc:	60da      	str	r2, [r3, #12]
 8005ffe:	e007      	b.n	8006010 <vMBMasterPortSerialEnable+0x38>
	  } else {
	    __HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 8006000:	4b10      	ldr	r3, [pc, #64]	; (8006044 <vMBMasterPortSerialEnable+0x6c>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68da      	ldr	r2, [r3, #12]
 8006006:	4b0f      	ldr	r3, [pc, #60]	; (8006044 <vMBMasterPortSerialEnable+0x6c>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f022 0220 	bic.w	r2, r2, #32
 800600e:	60da      	str	r2, [r3, #12]
	  }

	  if (xTxEnable) {
 8006010:	79bb      	ldrb	r3, [r7, #6]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d008      	beq.n	8006028 <vMBMasterPortSerialEnable+0x50>
	    __HAL_UART_ENABLE_IT(&huart2, UART_IT_TXE);
 8006016:	4b0b      	ldr	r3, [pc, #44]	; (8006044 <vMBMasterPortSerialEnable+0x6c>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68da      	ldr	r2, [r3, #12]
 800601c:	4b09      	ldr	r3, [pc, #36]	; (8006044 <vMBMasterPortSerialEnable+0x6c>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006024:	60da      	str	r2, [r3, #12]
	  } else {
	    __HAL_UART_DISABLE_IT(&huart2, UART_IT_TXE);
	  }
}
 8006026:	e007      	b.n	8006038 <vMBMasterPortSerialEnable+0x60>
	    __HAL_UART_DISABLE_IT(&huart2, UART_IT_TXE);
 8006028:	4b06      	ldr	r3, [pc, #24]	; (8006044 <vMBMasterPortSerialEnable+0x6c>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68da      	ldr	r2, [r3, #12]
 800602e:	4b05      	ldr	r3, [pc, #20]	; (8006044 <vMBMasterPortSerialEnable+0x6c>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006036:	60da      	str	r2, [r3, #12]
}
 8006038:	bf00      	nop
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr
 8006044:	200003b0 	.word	0x200003b0

08006048 <xMBMasterPortSerialInit>:

BOOL xMBMasterPortSerialInit(UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits,
        eMBParity eParity)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6039      	str	r1, [r7, #0]
 8006050:	4611      	mov	r1, r2
 8006052:	461a      	mov	r2, r3
 8006054:	4603      	mov	r3, r0
 8006056:	71fb      	strb	r3, [r7, #7]
 8006058:	460b      	mov	r3, r1
 800605a:	71bb      	strb	r3, [r7, #6]
 800605c:	4613      	mov	r3, r2
 800605e:	717b      	strb	r3, [r7, #5]
	  /*
	  Do nothing, Initialization is handled by MX_USART3_UART_Init()
	  Fixed port, baudrate, databit and parity
	  */
	  return TRUE;
 8006060:	2301      	movs	r3, #1
}
 8006062:	4618      	mov	r0, r3
 8006064:	370c      	adds	r7, #12
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
	...

08006070 <xMBMasterPortSerialPutByte>:

BOOL xMBMasterPortSerialPutByte(CHAR ucByte)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	4603      	mov	r3, r0
 8006078:	71fb      	strb	r3, [r7, #7]
	  /* Put a byte in the UARTs transmit buffer. This function is called
	  * by the protocol stack if pxMBFrameCBTransmitterEmpty( ) has been
	  * called. */
	  return (HAL_OK == HAL_UART_Transmit(&huart2, (uint8_t*)&ucByte, 1, 10));
 800607a:	1df9      	adds	r1, r7, #7
 800607c:	230a      	movs	r3, #10
 800607e:	2201      	movs	r2, #1
 8006080:	4806      	ldr	r0, [pc, #24]	; (800609c <xMBMasterPortSerialPutByte+0x2c>)
 8006082:	f7fc fe28 	bl	8002cd6 <HAL_UART_Transmit>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	bf0c      	ite	eq
 800608c:	2301      	moveq	r3, #1
 800608e:	2300      	movne	r3, #0
 8006090:	b2db      	uxtb	r3, r3
}
 8006092:	4618      	mov	r0, r3
 8006094:	3708      	adds	r7, #8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	200003b0 	.word	0x200003b0

080060a0 <xMBMasterPortSerialGetByte>:

BOOL xMBMasterPortSerialGetByte(CHAR * pucByte)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
	  /* Return the byte in the UARTs receive buffer. This function is called
	  * by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
	  */
	  *pucByte = (uint8_t)(huart2.Instance->DR & (uint8_t)0x00FF);
 80060a8:	4b06      	ldr	r3, [pc, #24]	; (80060c4 <xMBMasterPortSerialGetByte+0x24>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	b2da      	uxtb	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	701a      	strb	r2, [r3, #0]
	  return TRUE;
 80060b4:	2301      	movs	r3, #1
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	200003b0 	.word	0x200003b0

080060c8 <xMBMasterPortTimersInit>:
/* ----------------------- static functions ---------------------------------*/
//static void prvvTIMERExpiredISR(void);

/* ----------------------- Start implementation -----------------------------*/
BOOL xMBMasterPortTimersInit(USHORT usTim1Timerout50us)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	4603      	mov	r3, r0
 80060d0:	80fb      	strh	r3, [r7, #6]
	  TIM_MasterConfigTypeDef sMasterConfig;

	  htim7.Instance = TIM7;
 80060d2:	4b19      	ldr	r3, [pc, #100]	; (8006138 <xMBMasterPortTimersInit+0x70>)
 80060d4:	4a19      	ldr	r2, [pc, #100]	; (800613c <xMBMasterPortTimersInit+0x74>)
 80060d6:	601a      	str	r2, [r3, #0]
	  htim7.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() / 1000000) - 1;
 80060d8:	f7fc fa06 	bl	80024e8 <HAL_RCC_GetPCLK1Freq>
 80060dc:	4603      	mov	r3, r0
 80060de:	4a18      	ldr	r2, [pc, #96]	; (8006140 <xMBMasterPortTimersInit+0x78>)
 80060e0:	fba2 2303 	umull	r2, r3, r2, r3
 80060e4:	0c9b      	lsrs	r3, r3, #18
 80060e6:	3b01      	subs	r3, #1
 80060e8:	4a13      	ldr	r2, [pc, #76]	; (8006138 <xMBMasterPortTimersInit+0x70>)
 80060ea:	6053      	str	r3, [r2, #4]
	  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80060ec:	4b12      	ldr	r3, [pc, #72]	; (8006138 <xMBMasterPortTimersInit+0x70>)
 80060ee:	2200      	movs	r2, #0
 80060f0:	609a      	str	r2, [r3, #8]
	  htim7.Init.Period = 50 - 1;
 80060f2:	4b11      	ldr	r3, [pc, #68]	; (8006138 <xMBMasterPortTimersInit+0x70>)
 80060f4:	2231      	movs	r2, #49	; 0x31
 80060f6:	60da      	str	r2, [r3, #12]

	  timeout = usTim1Timerout50us;
 80060f8:	4a12      	ldr	r2, [pc, #72]	; (8006144 <xMBMasterPortTimersInit+0x7c>)
 80060fa:	88fb      	ldrh	r3, [r7, #6]
 80060fc:	8013      	strh	r3, [r2, #0]

	  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80060fe:	480e      	ldr	r0, [pc, #56]	; (8006138 <xMBMasterPortTimersInit+0x70>)
 8006100:	f7fc fa4c 	bl	800259c <HAL_TIM_Base_Init>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d001      	beq.n	800610e <xMBMasterPortTimersInit+0x46>
	  {
	    return FALSE;
 800610a:	2300      	movs	r3, #0
 800610c:	e00f      	b.n	800612e <xMBMasterPortTimersInit+0x66>
	  }

	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800610e:	2320      	movs	r3, #32
 8006110:	60bb      	str	r3, [r7, #8]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006112:	2300      	movs	r3, #0
 8006114:	60fb      	str	r3, [r7, #12]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006116:	f107 0308 	add.w	r3, r7, #8
 800611a:	4619      	mov	r1, r3
 800611c:	4806      	ldr	r0, [pc, #24]	; (8006138 <xMBMasterPortTimersInit+0x70>)
 800611e:	f7fc fcfd 	bl	8002b1c <HAL_TIMEx_MasterConfigSynchronization>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d001      	beq.n	800612c <xMBMasterPortTimersInit+0x64>
	  {
	    return FALSE;
 8006128:	2300      	movs	r3, #0
 800612a:	e000      	b.n	800612e <xMBMasterPortTimersInit+0x66>
	  }

	  return TRUE;
 800612c:	2301      	movs	r3, #1
}
 800612e:	4618      	mov	r0, r3
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	20000368 	.word	0x20000368
 800613c:	40001400 	.word	0x40001400
 8006140:	431bde83 	.word	0x431bde83
 8006144:	20005ba2 	.word	0x20005ba2

08006148 <vMBMasterPortTimersT35Enable>:

void vMBMasterPortTimersT35Enable()
{
 8006148:	b580      	push	{r7, lr}
 800614a:	af00      	add	r7, sp, #0
	  /* Enable the timer with the timeout passed to xMBPortTimersInit( ) */
	  downcounter = timeout;
 800614c:	4b04      	ldr	r3, [pc, #16]	; (8006160 <vMBMasterPortTimersT35Enable+0x18>)
 800614e:	881a      	ldrh	r2, [r3, #0]
 8006150:	4b04      	ldr	r3, [pc, #16]	; (8006164 <vMBMasterPortTimersT35Enable+0x1c>)
 8006152:	801a      	strh	r2, [r3, #0]
	  HAL_TIM_Base_Start_IT(&htim7);
 8006154:	4804      	ldr	r0, [pc, #16]	; (8006168 <vMBMasterPortTimersT35Enable+0x20>)
 8006156:	f7fc fa71 	bl	800263c <HAL_TIM_Base_Start_IT>
}
 800615a:	bf00      	nop
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	20005ba2 	.word	0x20005ba2
 8006164:	20005ba4 	.word	0x20005ba4
 8006168:	20000368 	.word	0x20000368

0800616c <vMBMasterPortTimersConvertDelayEnable>:

void vMBMasterPortTimersConvertDelayEnable()
{
 800616c:	b480      	push	{r7}
 800616e:	af00      	add	r7, sp, #0
//    vMBMasterSetCurTimerMode(MB_TMODE_CONVERT_DELAY);
//
//    rt_timer_control(&timer, RT_TIMER_CTRL_SET_TIME, &timer_tick);
//
//    rt_timer_start(&timer);
}
 8006170:	bf00      	nop
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <vMBMasterPortTimersRespondTimeoutEnable>:

void vMBMasterPortTimersRespondTimeoutEnable()
{
 800617a:	b480      	push	{r7}
 800617c:	af00      	add	r7, sp, #0
//    vMBMasterSetCurTimerMode(MB_TMODE_RESPOND_TIMEOUT);
//
//    rt_timer_control(&timer, RT_TIMER_CTRL_SET_TIME, &timer_tick);
//
//    rt_timer_start(&timer);
}
 800617e:	bf00      	nop
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <vMBMasterPortTimersDisable>:

void vMBMasterPortTimersDisable()
{
 8006188:	b580      	push	{r7, lr}
 800618a:	af00      	add	r7, sp, #0
	  /* Disable any pending timers. */
	  HAL_TIM_Base_Stop_IT(&htim7);
 800618c:	4802      	ldr	r0, [pc, #8]	; (8006198 <vMBMasterPortTimersDisable+0x10>)
 800618e:	f7fc fac5 	bl	800271c <HAL_TIM_Base_Stop_IT>
}
 8006192:	bf00      	nop
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	20000368 	.word	0x20000368

0800619c <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	460b      	mov	r3, r1
 80061a6:	807b      	strh	r3, [r7, #2]
    UCHAR           ucCRCHi = 0xFF;
 80061a8:	23ff      	movs	r3, #255	; 0xff
 80061aa:	73fb      	strb	r3, [r7, #15]
    UCHAR           ucCRCLo = 0xFF;
 80061ac:	23ff      	movs	r3, #255	; 0xff
 80061ae:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 80061b0:	e013      	b.n	80061da <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	1c5a      	adds	r2, r3, #1
 80061b6:	607a      	str	r2, [r7, #4]
 80061b8:	781a      	ldrb	r2, [r3, #0]
 80061ba:	7bbb      	ldrb	r3, [r7, #14]
 80061bc:	4053      	eors	r3, r2
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 80061c2:	4a0f      	ldr	r2, [pc, #60]	; (8006200 <usMBCRC16+0x64>)
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	4413      	add	r3, r2
 80061c8:	781a      	ldrb	r2, [r3, #0]
 80061ca:	7bfb      	ldrb	r3, [r7, #15]
 80061cc:	4053      	eors	r3, r2
 80061ce:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 80061d0:	4a0c      	ldr	r2, [pc, #48]	; (8006204 <usMBCRC16+0x68>)
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	4413      	add	r3, r2
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 80061da:	887b      	ldrh	r3, [r7, #2]
 80061dc:	1e5a      	subs	r2, r3, #1
 80061de:	807a      	strh	r2, [r7, #2]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1e6      	bne.n	80061b2 <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 80061e4:	7bfb      	ldrb	r3, [r7, #15]
 80061e6:	021b      	lsls	r3, r3, #8
 80061e8:	b21a      	sxth	r2, r3
 80061ea:	7bbb      	ldrb	r3, [r7, #14]
 80061ec:	b21b      	sxth	r3, r3
 80061ee:	4313      	orrs	r3, r2
 80061f0:	b21b      	sxth	r3, r3
 80061f2:	b29b      	uxth	r3, r3
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3714      	adds	r7, #20
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	0800780c 	.word	0x0800780c
 8006204:	0800790c 	.word	0x0800790c

08006208 <eMBMasterRTUInit>:
static volatile eMBMasterTimerMode eMasterCurTimerMode;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBMasterRTUInit(UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	4603      	mov	r3, r0
 8006210:	6039      	str	r1, [r7, #0]
 8006212:	71fb      	strb	r3, [r7, #7]
 8006214:	4613      	mov	r3, r2
 8006216:	71bb      	strb	r3, [r7, #6]
    eMBErrorCode    eStatus = MB_ENOERR;
 8006218:	2300      	movs	r3, #0
 800621a:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 800621c:	b672      	cpsid	i
}
 800621e:	bf00      	nop
    ULONG           usTimerT35_50us;

    ENTER_CRITICAL_SECTION(  );

    /* Modbus RTU uses 8 Databits. */
    if( xMBMasterPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 8006220:	79bb      	ldrb	r3, [r7, #6]
 8006222:	79f8      	ldrb	r0, [r7, #7]
 8006224:	2208      	movs	r2, #8
 8006226:	6839      	ldr	r1, [r7, #0]
 8006228:	f7ff ff0e 	bl	8006048 <xMBMasterPortSerialInit>
 800622c:	4603      	mov	r3, r0
 800622e:	2b01      	cmp	r3, #1
 8006230:	d002      	beq.n	8006238 <eMBMasterRTUInit+0x30>
    {
        eStatus = MB_EPORTERR;
 8006232:	2303      	movs	r3, #3
 8006234:	73fb      	strb	r3, [r7, #15]
 8006236:	e016      	b.n	8006266 <eMBMasterRTUInit+0x5e>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 800623e:	d902      	bls.n	8006246 <eMBMasterRTUInit+0x3e>
        {
            usTimerT35_50us = 35;       /* 1800us. */
 8006240:	2323      	movs	r3, #35	; 0x23
 8006242:	60bb      	str	r3, [r7, #8]
 8006244:	e005      	b.n	8006252 <eMBMasterRTUInit+0x4a>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	005b      	lsls	r3, r3, #1
 800624a:	4a0a      	ldr	r2, [pc, #40]	; (8006274 <eMBMasterRTUInit+0x6c>)
 800624c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006250:	60bb      	str	r3, [r7, #8]
        }
        if( xMBMasterPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	b29b      	uxth	r3, r3
 8006256:	4618      	mov	r0, r3
 8006258:	f7ff ff36 	bl	80060c8 <xMBMasterPortTimersInit>
 800625c:	4603      	mov	r3, r0
 800625e:	2b01      	cmp	r3, #1
 8006260:	d001      	beq.n	8006266 <eMBMasterRTUInit+0x5e>
        {
            eStatus = MB_EPORTERR;
 8006262:	2303      	movs	r3, #3
 8006264:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8006266:	b662      	cpsie	i
}
 8006268:	bf00      	nop
        }
    }
    EXIT_CRITICAL_SECTION(  );

    return eStatus;
 800626a:	7bfb      	ldrb	r3, [r7, #15]
}
 800626c:	4618      	mov	r0, r3
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	00177fa0 	.word	0x00177fa0

08006278 <eMBMasterRTUStart>:

void
eMBMasterRTUStart( void )
{
 8006278:	b580      	push	{r7, lr}
 800627a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800627c:	b672      	cpsid	i
}
 800627e:	bf00      	nop
    /* Initially the receiver is in the state STATE_M_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_M_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_M_RX_INIT;
 8006280:	4b06      	ldr	r3, [pc, #24]	; (800629c <eMBMasterRTUStart+0x24>)
 8006282:	2200      	movs	r2, #0
 8006284:	701a      	strb	r2, [r3, #0]
    vMBMasterPortSerialEnable( TRUE, FALSE );
 8006286:	2100      	movs	r1, #0
 8006288:	2001      	movs	r0, #1
 800628a:	f7ff fea5 	bl	8005fd8 <vMBMasterPortSerialEnable>
    vMBMasterPortTimersT35Enable(  );
 800628e:	f7ff ff5b 	bl	8006148 <vMBMasterPortTimersT35Enable>
  __ASM volatile ("cpsie i" : : : "memory");
 8006292:	b662      	cpsie	i
}
 8006294:	bf00      	nop

    EXIT_CRITICAL_SECTION(  );
}
 8006296:	bf00      	nop
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	20005ba7 	.word	0x20005ba7

080062a0 <eMBMasterRTUStop>:

void
eMBMasterRTUStop( void )
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80062a4:	b672      	cpsid	i
}
 80062a6:	bf00      	nop
    ENTER_CRITICAL_SECTION(  );
    vMBMasterPortSerialEnable( FALSE, FALSE );
 80062a8:	2100      	movs	r1, #0
 80062aa:	2000      	movs	r0, #0
 80062ac:	f7ff fe94 	bl	8005fd8 <vMBMasterPortSerialEnable>
    vMBMasterPortTimersDisable(  );
 80062b0:	f7ff ff6a 	bl	8006188 <vMBMasterPortTimersDisable>
  __ASM volatile ("cpsie i" : : : "memory");
 80062b4:	b662      	cpsie	i
}
 80062b6:	bf00      	nop
    EXIT_CRITICAL_SECTION(  );
}
 80062b8:	bf00      	nop
 80062ba:	bd80      	pop	{r7, pc}

080062bc <eMBMasterRTUReceive>:

eMBErrorCode
eMBMasterRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 80062c8:	2300      	movs	r3, #0
 80062ca:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsid i" : : : "memory");
 80062cc:	b672      	cpsid	i
}
 80062ce:	bf00      	nop

    ENTER_CRITICAL_SECTION(  );
    assert_param( usMasterRcvBufferPos < MB_SER_PDU_SIZE_MAX );

    /* Length and CRC check */
    if( ( usMasterRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 80062d0:	4b13      	ldr	r3, [pc, #76]	; (8006320 <eMBMasterRTUReceive+0x64>)
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	2b03      	cmp	r3, #3
 80062d8:	d919      	bls.n	800630e <eMBMasterRTUReceive+0x52>
        && ( usMBCRC16( ( UCHAR * ) ucMasterRTURcvBuf, usMasterRcvBufferPos ) == 0 ) )
 80062da:	4b11      	ldr	r3, [pc, #68]	; (8006320 <eMBMasterRTUReceive+0x64>)
 80062dc:	881b      	ldrh	r3, [r3, #0]
 80062de:	b29b      	uxth	r3, r3
 80062e0:	4619      	mov	r1, r3
 80062e2:	4810      	ldr	r0, [pc, #64]	; (8006324 <eMBMasterRTUReceive+0x68>)
 80062e4:	f7ff ff5a 	bl	800619c <usMBCRC16>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10f      	bne.n	800630e <eMBMasterRTUReceive+0x52>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucMasterRTURcvBuf[MB_SER_PDU_ADDR_OFF];
 80062ee:	4b0d      	ldr	r3, [pc, #52]	; (8006324 <eMBMasterRTUReceive+0x68>)
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usMasterRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 80062f8:	4b09      	ldr	r3, [pc, #36]	; (8006320 <eMBMasterRTUReceive+0x64>)
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	3b03      	subs	r3, #3
 8006300:	b29a      	uxth	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucMasterRTURcvBuf[MB_SER_PDU_PDU_OFF];
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	4a07      	ldr	r2, [pc, #28]	; (8006328 <eMBMasterRTUReceive+0x6c>)
 800630a:	601a      	str	r2, [r3, #0]
 800630c:	e001      	b.n	8006312 <eMBMasterRTUReceive+0x56>
    }
    else
    {
        eStatus = MB_EIO;
 800630e:	2305      	movs	r3, #5
 8006310:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 8006312:	b662      	cpsie	i
}
 8006314:	bf00      	nop
    }

    EXIT_CRITICAL_SECTION(  );
    return eStatus;
 8006316:	7dfb      	ldrb	r3, [r7, #23]
}
 8006318:	4618      	mov	r0, r3
 800631a:	3718      	adds	r7, #24
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	20005db2 	.word	0x20005db2
 8006324:	20005ca8 	.word	0x20005ca8
 8006328:	20005ca9 	.word	0x20005ca9

0800632c <eMBMasterRTUSend>:

eMBErrorCode
eMBMasterRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	4603      	mov	r3, r0
 8006334:	6039      	str	r1, [r7, #0]
 8006336:	71fb      	strb	r3, [r7, #7]
 8006338:	4613      	mov	r3, r2
 800633a:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 800633c:	2300      	movs	r3, #0
 800633e:	73fb      	strb	r3, [r7, #15]
    USHORT          usCRC16;

    if ( ucSlaveAddress > MB_MASTER_TOTAL_SLAVE_NUM ) return MB_EINVAL;
 8006340:	79fb      	ldrb	r3, [r7, #7]
 8006342:	2b10      	cmp	r3, #16
 8006344:	d901      	bls.n	800634a <eMBMasterRTUSend+0x1e>
 8006346:	2302      	movs	r3, #2
 8006348:	e04b      	b.n	80063e2 <eMBMasterRTUSend+0xb6>
  __ASM volatile ("cpsid i" : : : "memory");
 800634a:	b672      	cpsid	i
}
 800634c:	bf00      	nop

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_M_RX_IDLE )
 800634e:	4b27      	ldr	r3, [pc, #156]	; (80063ec <eMBMasterRTUSend+0xc0>)
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b01      	cmp	r3, #1
 8006356:	d13f      	bne.n	80063d8 <eMBMasterRTUSend+0xac>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucMasterSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	3b01      	subs	r3, #1
 800635c:	4a24      	ldr	r2, [pc, #144]	; (80063f0 <eMBMasterRTUSend+0xc4>)
 800635e:	6013      	str	r3, [r2, #0]
        usMasterSndBufferCount = 1;
 8006360:	4b24      	ldr	r3, [pc, #144]	; (80063f4 <eMBMasterRTUSend+0xc8>)
 8006362:	2201      	movs	r2, #1
 8006364:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucMasterSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 8006366:	4b22      	ldr	r3, [pc, #136]	; (80063f0 <eMBMasterRTUSend+0xc4>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	79fa      	ldrb	r2, [r7, #7]
 800636c:	701a      	strb	r2, [r3, #0]
        usMasterSndBufferCount += usLength;
 800636e:	4b21      	ldr	r3, [pc, #132]	; (80063f4 <eMBMasterRTUSend+0xc8>)
 8006370:	881b      	ldrh	r3, [r3, #0]
 8006372:	b29a      	uxth	r2, r3
 8006374:	88bb      	ldrh	r3, [r7, #4]
 8006376:	4413      	add	r3, r2
 8006378:	b29a      	uxth	r2, r3
 800637a:	4b1e      	ldr	r3, [pc, #120]	; (80063f4 <eMBMasterRTUSend+0xc8>)
 800637c:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucMasterSndBufferCur, usMasterSndBufferCount );
 800637e:	4b1c      	ldr	r3, [pc, #112]	; (80063f0 <eMBMasterRTUSend+0xc4>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a1c      	ldr	r2, [pc, #112]	; (80063f4 <eMBMasterRTUSend+0xc8>)
 8006384:	8812      	ldrh	r2, [r2, #0]
 8006386:	b292      	uxth	r2, r2
 8006388:	4611      	mov	r1, r2
 800638a:	4618      	mov	r0, r3
 800638c:	f7ff ff06 	bl	800619c <usMBCRC16>
 8006390:	4603      	mov	r3, r0
 8006392:	81bb      	strh	r3, [r7, #12]
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 8006394:	4b17      	ldr	r3, [pc, #92]	; (80063f4 <eMBMasterRTUSend+0xc8>)
 8006396:	881b      	ldrh	r3, [r3, #0]
 8006398:	b29b      	uxth	r3, r3
 800639a:	1c5a      	adds	r2, r3, #1
 800639c:	b291      	uxth	r1, r2
 800639e:	4a15      	ldr	r2, [pc, #84]	; (80063f4 <eMBMasterRTUSend+0xc8>)
 80063a0:	8011      	strh	r1, [r2, #0]
 80063a2:	461a      	mov	r2, r3
 80063a4:	89bb      	ldrh	r3, [r7, #12]
 80063a6:	b2d9      	uxtb	r1, r3
 80063a8:	4b13      	ldr	r3, [pc, #76]	; (80063f8 <eMBMasterRTUSend+0xcc>)
 80063aa:	5499      	strb	r1, [r3, r2]
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 80063ac:	89bb      	ldrh	r3, [r7, #12]
 80063ae:	0a1b      	lsrs	r3, r3, #8
 80063b0:	b299      	uxth	r1, r3
 80063b2:	4b10      	ldr	r3, [pc, #64]	; (80063f4 <eMBMasterRTUSend+0xc8>)
 80063b4:	881b      	ldrh	r3, [r3, #0]
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	1c5a      	adds	r2, r3, #1
 80063ba:	b290      	uxth	r0, r2
 80063bc:	4a0d      	ldr	r2, [pc, #52]	; (80063f4 <eMBMasterRTUSend+0xc8>)
 80063be:	8010      	strh	r0, [r2, #0]
 80063c0:	461a      	mov	r2, r3
 80063c2:	b2c9      	uxtb	r1, r1
 80063c4:	4b0c      	ldr	r3, [pc, #48]	; (80063f8 <eMBMasterRTUSend+0xcc>)
 80063c6:	5499      	strb	r1, [r3, r2]

        /* Activate the transmitter. */
        eSndState = STATE_M_TX_XMIT;
 80063c8:	4b0c      	ldr	r3, [pc, #48]	; (80063fc <eMBMasterRTUSend+0xd0>)
 80063ca:	2201      	movs	r2, #1
 80063cc:	701a      	strb	r2, [r3, #0]
        vMBMasterPortSerialEnable( FALSE, TRUE );
 80063ce:	2101      	movs	r1, #1
 80063d0:	2000      	movs	r0, #0
 80063d2:	f7ff fe01 	bl	8005fd8 <vMBMasterPortSerialEnable>
 80063d6:	e001      	b.n	80063dc <eMBMasterRTUSend+0xb0>
    }
    else
    {
        eStatus = MB_EIO;
 80063d8:	2305      	movs	r3, #5
 80063da:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 80063dc:	b662      	cpsie	i
}
 80063de:	bf00      	nop
    }
    EXIT_CRITICAL_SECTION(  );
    return eStatus;
 80063e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	20005ba7 	.word	0x20005ba7
 80063f0:	20005dac 	.word	0x20005dac
 80063f4:	20005db0 	.word	0x20005db0
 80063f8:	20005ba8 	.word	0x20005ba8
 80063fc:	20005ba6 	.word	0x20005ba6

08006400 <xMBMasterRTUReceiveFSM>:

BOOL
xMBMasterRTUReceiveFSM( void )
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 8006406:	2300      	movs	r3, #0
 8006408:	71fb      	strb	r3, [r7, #7]
    UCHAR           ucByte;

    assert_param(( eSndState == STATE_M_TX_IDLE ) || ( eSndState == STATE_M_TX_XFWR ));

    /* Always read the character. */
    ( void )xMBMasterPortSerialGetByte( ( CHAR * ) & ucByte );
 800640a:	1dbb      	adds	r3, r7, #6
 800640c:	4618      	mov	r0, r3
 800640e:	f7ff fe47 	bl	80060a0 <xMBMasterPortSerialGetByte>

    switch ( eRcvState )
 8006412:	4b26      	ldr	r3, [pc, #152]	; (80064ac <xMBMasterRTUReceiveFSM+0xac>)
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b03      	cmp	r3, #3
 800641a:	d841      	bhi.n	80064a0 <xMBMasterRTUReceiveFSM+0xa0>
 800641c:	a201      	add	r2, pc, #4	; (adr r2, 8006424 <xMBMasterRTUReceiveFSM+0x24>)
 800641e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006422:	bf00      	nop
 8006424:	08006435 	.word	0x08006435
 8006428:	08006441 	.word	0x08006441
 800642c:	08006473 	.word	0x08006473
 8006430:	0800643b 	.word	0x0800643b
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_M_RX_INIT:
        vMBMasterPortTimersT35Enable( );
 8006434:	f7ff fe88 	bl	8006148 <vMBMasterPortTimersT35Enable>
        break;
 8006438:	e032      	b.n	80064a0 <xMBMasterRTUReceiveFSM+0xa0>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_M_RX_ERROR:
        vMBMasterPortTimersT35Enable( );
 800643a:	f7ff fe85 	bl	8006148 <vMBMasterPortTimersT35Enable>
        break;
 800643e:	e02f      	b.n	80064a0 <xMBMasterRTUReceiveFSM+0xa0>
         */
    case STATE_M_RX_IDLE:
        /* In time of respond timeout,the receiver receive a frame.
         * Disable timer of respond timeout and change the transmiter state to idle.
         */
        vMBMasterPortTimersDisable( );
 8006440:	f7ff fea2 	bl	8006188 <vMBMasterPortTimersDisable>
        eSndState = STATE_M_TX_IDLE;
 8006444:	4b1a      	ldr	r3, [pc, #104]	; (80064b0 <xMBMasterRTUReceiveFSM+0xb0>)
 8006446:	2200      	movs	r2, #0
 8006448:	701a      	strb	r2, [r3, #0]

        usMasterRcvBufferPos = 0;
 800644a:	4b1a      	ldr	r3, [pc, #104]	; (80064b4 <xMBMasterRTUReceiveFSM+0xb4>)
 800644c:	2200      	movs	r2, #0
 800644e:	801a      	strh	r2, [r3, #0]
        ucMasterRTURcvBuf[usMasterRcvBufferPos++] = ucByte;
 8006450:	4b18      	ldr	r3, [pc, #96]	; (80064b4 <xMBMasterRTUReceiveFSM+0xb4>)
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	b29b      	uxth	r3, r3
 8006456:	1c5a      	adds	r2, r3, #1
 8006458:	b291      	uxth	r1, r2
 800645a:	4a16      	ldr	r2, [pc, #88]	; (80064b4 <xMBMasterRTUReceiveFSM+0xb4>)
 800645c:	8011      	strh	r1, [r2, #0]
 800645e:	461a      	mov	r2, r3
 8006460:	79b9      	ldrb	r1, [r7, #6]
 8006462:	4b15      	ldr	r3, [pc, #84]	; (80064b8 <xMBMasterRTUReceiveFSM+0xb8>)
 8006464:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_M_RX_RCV;
 8006466:	4b11      	ldr	r3, [pc, #68]	; (80064ac <xMBMasterRTUReceiveFSM+0xac>)
 8006468:	2202      	movs	r2, #2
 800646a:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBMasterPortTimersT35Enable( );
 800646c:	f7ff fe6c 	bl	8006148 <vMBMasterPortTimersT35Enable>
        break;
 8006470:	e016      	b.n	80064a0 <xMBMasterRTUReceiveFSM+0xa0>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_M_RX_RCV:
        if( usMasterRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 8006472:	4b10      	ldr	r3, [pc, #64]	; (80064b4 <xMBMasterRTUReceiveFSM+0xb4>)
 8006474:	881b      	ldrh	r3, [r3, #0]
 8006476:	b29b      	uxth	r3, r3
 8006478:	2bff      	cmp	r3, #255	; 0xff
 800647a:	d80b      	bhi.n	8006494 <xMBMasterRTUReceiveFSM+0x94>
        {
            ucMasterRTURcvBuf[usMasterRcvBufferPos++] = ucByte;
 800647c:	4b0d      	ldr	r3, [pc, #52]	; (80064b4 <xMBMasterRTUReceiveFSM+0xb4>)
 800647e:	881b      	ldrh	r3, [r3, #0]
 8006480:	b29b      	uxth	r3, r3
 8006482:	1c5a      	adds	r2, r3, #1
 8006484:	b291      	uxth	r1, r2
 8006486:	4a0b      	ldr	r2, [pc, #44]	; (80064b4 <xMBMasterRTUReceiveFSM+0xb4>)
 8006488:	8011      	strh	r1, [r2, #0]
 800648a:	461a      	mov	r2, r3
 800648c:	79b9      	ldrb	r1, [r7, #6]
 800648e:	4b0a      	ldr	r3, [pc, #40]	; (80064b8 <xMBMasterRTUReceiveFSM+0xb8>)
 8006490:	5499      	strb	r1, [r3, r2]
 8006492:	e002      	b.n	800649a <xMBMasterRTUReceiveFSM+0x9a>
        }
        else
        {
            eRcvState = STATE_M_RX_ERROR;
 8006494:	4b05      	ldr	r3, [pc, #20]	; (80064ac <xMBMasterRTUReceiveFSM+0xac>)
 8006496:	2203      	movs	r2, #3
 8006498:	701a      	strb	r2, [r3, #0]
        }
        vMBMasterPortTimersT35Enable();
 800649a:	f7ff fe55 	bl	8006148 <vMBMasterPortTimersT35Enable>
        break;
 800649e:	bf00      	nop
    }
    return xTaskNeedSwitch;
 80064a0:	79fb      	ldrb	r3, [r7, #7]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3708      	adds	r7, #8
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20005ba7 	.word	0x20005ba7
 80064b0:	20005ba6 	.word	0x20005ba6
 80064b4:	20005db2 	.word	0x20005db2
 80064b8:	20005ca8 	.word	0x20005ca8

080064bc <xMBMasterRTUTransmitFSM>:

BOOL
xMBMasterRTUTransmitFSM( void )
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 80064c2:	2300      	movs	r3, #0
 80064c4:	71fb      	strb	r3, [r7, #7]

    assert_param( eRcvState == STATE_M_RX_IDLE );

    switch ( eSndState )
 80064c6:	4b24      	ldr	r3, [pc, #144]	; (8006558 <xMBMasterRTUTransmitFSM+0x9c>)
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d002      	beq.n	80064d6 <xMBMasterRTUTransmitFSM+0x1a>
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d005      	beq.n	80064e0 <xMBMasterRTUTransmitFSM+0x24>
            }
        }
        break;

    default:
        break;
 80064d4:	e03a      	b.n	800654c <xMBMasterRTUTransmitFSM+0x90>
        vMBMasterPortSerialEnable( TRUE, FALSE );
 80064d6:	2100      	movs	r1, #0
 80064d8:	2001      	movs	r0, #1
 80064da:	f7ff fd7d 	bl	8005fd8 <vMBMasterPortSerialEnable>
        break;
 80064de:	e035      	b.n	800654c <xMBMasterRTUTransmitFSM+0x90>
        if( usMasterSndBufferCount != 0 )
 80064e0:	4b1e      	ldr	r3, [pc, #120]	; (800655c <xMBMasterRTUTransmitFSM+0xa0>)
 80064e2:	881b      	ldrh	r3, [r3, #0]
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d013      	beq.n	8006512 <xMBMasterRTUTransmitFSM+0x56>
            xMBMasterPortSerialPutByte( ( CHAR )*pucMasterSndBufferCur );
 80064ea:	4b1d      	ldr	r3, [pc, #116]	; (8006560 <xMBMasterRTUTransmitFSM+0xa4>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7ff fdbc 	bl	8006070 <xMBMasterPortSerialPutByte>
            pucMasterSndBufferCur++;  /* next byte in sendbuffer. */
 80064f8:	4b19      	ldr	r3, [pc, #100]	; (8006560 <xMBMasterRTUTransmitFSM+0xa4>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	3301      	adds	r3, #1
 80064fe:	4a18      	ldr	r2, [pc, #96]	; (8006560 <xMBMasterRTUTransmitFSM+0xa4>)
 8006500:	6013      	str	r3, [r2, #0]
            usMasterSndBufferCount--;
 8006502:	4b16      	ldr	r3, [pc, #88]	; (800655c <xMBMasterRTUTransmitFSM+0xa0>)
 8006504:	881b      	ldrh	r3, [r3, #0]
 8006506:	b29b      	uxth	r3, r3
 8006508:	3b01      	subs	r3, #1
 800650a:	b29a      	uxth	r2, r3
 800650c:	4b13      	ldr	r3, [pc, #76]	; (800655c <xMBMasterRTUTransmitFSM+0xa0>)
 800650e:	801a      	strh	r2, [r3, #0]
        break;
 8006510:	e01b      	b.n	800654a <xMBMasterRTUTransmitFSM+0x8e>
            xFrameIsBroadcast = ( ucMasterRTUSndBuf[MB_SER_PDU_ADDR_OFF] == MB_ADDRESS_BROADCAST ) ? TRUE : FALSE;
 8006512:	4b14      	ldr	r3, [pc, #80]	; (8006564 <xMBMasterRTUTransmitFSM+0xa8>)
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	b2db      	uxtb	r3, r3
 8006518:	2b00      	cmp	r3, #0
 800651a:	bf0c      	ite	eq
 800651c:	2301      	moveq	r3, #1
 800651e:	2300      	movne	r3, #0
 8006520:	b2db      	uxtb	r3, r3
 8006522:	461a      	mov	r2, r3
 8006524:	4b10      	ldr	r3, [pc, #64]	; (8006568 <xMBMasterRTUTransmitFSM+0xac>)
 8006526:	701a      	strb	r2, [r3, #0]
            vMBMasterPortSerialEnable( TRUE, FALSE );
 8006528:	2100      	movs	r1, #0
 800652a:	2001      	movs	r0, #1
 800652c:	f7ff fd54 	bl	8005fd8 <vMBMasterPortSerialEnable>
            eSndState = STATE_M_TX_XFWR;
 8006530:	4b09      	ldr	r3, [pc, #36]	; (8006558 <xMBMasterRTUTransmitFSM+0x9c>)
 8006532:	2202      	movs	r2, #2
 8006534:	701a      	strb	r2, [r3, #0]
            if ( xFrameIsBroadcast == TRUE )
 8006536:	4b0c      	ldr	r3, [pc, #48]	; (8006568 <xMBMasterRTUTransmitFSM+0xac>)
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b01      	cmp	r3, #1
 800653e:	d102      	bne.n	8006546 <xMBMasterRTUTransmitFSM+0x8a>
                vMBMasterPortTimersConvertDelayEnable( );
 8006540:	f7ff fe14 	bl	800616c <vMBMasterPortTimersConvertDelayEnable>
        break;
 8006544:	e001      	b.n	800654a <xMBMasterRTUTransmitFSM+0x8e>
                vMBMasterPortTimersRespondTimeoutEnable( );
 8006546:	f7ff fe18 	bl	800617a <vMBMasterPortTimersRespondTimeoutEnable>
        break;
 800654a:	bf00      	nop
    }

    return xNeedPoll;
 800654c:	79fb      	ldrb	r3, [r7, #7]
}
 800654e:	4618      	mov	r0, r3
 8006550:	3708      	adds	r7, #8
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	20005ba6 	.word	0x20005ba6
 800655c:	20005db0 	.word	0x20005db0
 8006560:	20005dac 	.word	0x20005dac
 8006564:	20005ba8 	.word	0x20005ba8
 8006568:	20005db4 	.word	0x20005db4

0800656c <xMBMasterRTUTimerExpired>:

BOOL
xMBMasterRTUTimerExpired(void)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
    BOOL xNeedPoll = FALSE;
 8006572:	2300      	movs	r3, #0
 8006574:	71fb      	strb	r3, [r7, #7]

    switch (eRcvState)
 8006576:	4b27      	ldr	r3, [pc, #156]	; (8006614 <xMBMasterRTUTimerExpired+0xa8>)
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b03      	cmp	r3, #3
 800657e:	d012      	beq.n	80065a6 <xMBMasterRTUTimerExpired+0x3a>
 8006580:	2b03      	cmp	r3, #3
 8006582:	dc19      	bgt.n	80065b8 <xMBMasterRTUTimerExpired+0x4c>
 8006584:	2b00      	cmp	r3, #0
 8006586:	d002      	beq.n	800658e <xMBMasterRTUTimerExpired+0x22>
 8006588:	2b02      	cmp	r3, #2
 800658a:	d006      	beq.n	800659a <xMBMasterRTUTimerExpired+0x2e>
        /* Function called in an illegal state. */
    default:
        assert_param(
                ( eRcvState == STATE_M_RX_INIT ) || ( eRcvState == STATE_M_RX_RCV ) ||
                ( eRcvState == STATE_M_RX_ERROR ) || ( eRcvState == STATE_M_RX_IDLE ));
        break;
 800658c:	e014      	b.n	80065b8 <xMBMasterRTUTimerExpired+0x4c>
        xNeedPoll = xMBMasterPortEventPost(EV_MASTER_READY);
 800658e:	2001      	movs	r0, #1
 8006590:	f7ff fc9a 	bl	8005ec8 <xMBMasterPortEventPost>
 8006594:	4603      	mov	r3, r0
 8006596:	71fb      	strb	r3, [r7, #7]
        break;
 8006598:	e00f      	b.n	80065ba <xMBMasterRTUTimerExpired+0x4e>
        xNeedPoll = xMBMasterPortEventPost(EV_MASTER_FRAME_RECEIVED);
 800659a:	2002      	movs	r0, #2
 800659c:	f7ff fc94 	bl	8005ec8 <xMBMasterPortEventPost>
 80065a0:	4603      	mov	r3, r0
 80065a2:	71fb      	strb	r3, [r7, #7]
        break;
 80065a4:	e009      	b.n	80065ba <xMBMasterRTUTimerExpired+0x4e>
        vMBMasterSetErrorType(EV_ERROR_RECEIVE_DATA);
 80065a6:	2001      	movs	r0, #1
 80065a8:	f7ff fc70 	bl	8005e8c <vMBMasterSetErrorType>
        xNeedPoll = xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
 80065ac:	2010      	movs	r0, #16
 80065ae:	f7ff fc8b 	bl	8005ec8 <xMBMasterPortEventPost>
 80065b2:	4603      	mov	r3, r0
 80065b4:	71fb      	strb	r3, [r7, #7]
        break;
 80065b6:	e000      	b.n	80065ba <xMBMasterRTUTimerExpired+0x4e>
        break;
 80065b8:	bf00      	nop
    }
    eRcvState = STATE_M_RX_IDLE;
 80065ba:	4b16      	ldr	r3, [pc, #88]	; (8006614 <xMBMasterRTUTimerExpired+0xa8>)
 80065bc:	2201      	movs	r2, #1
 80065be:	701a      	strb	r2, [r3, #0]

    switch (eSndState)
 80065c0:	4b15      	ldr	r3, [pc, #84]	; (8006618 <xMBMasterRTUTimerExpired+0xac>)
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d10d      	bne.n	80065e6 <xMBMasterRTUTimerExpired+0x7a>
    {
        /* A frame was send finish and convert delay or respond timeout expired.
         * If the frame is broadcast,The master will idle,and if the frame is not
         * broadcast.Notify the listener process error.*/
    case STATE_M_TX_XFWR:
        if ( xFrameIsBroadcast == FALSE ) {
 80065ca:	4b14      	ldr	r3, [pc, #80]	; (800661c <xMBMasterRTUTimerExpired+0xb0>)
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d10a      	bne.n	80065ea <xMBMasterRTUTimerExpired+0x7e>
            vMBMasterSetErrorType(EV_ERROR_RESPOND_TIMEOUT);
 80065d4:	2000      	movs	r0, #0
 80065d6:	f7ff fc59 	bl	8005e8c <vMBMasterSetErrorType>
            xNeedPoll = xMBMasterPortEventPost(EV_MASTER_ERROR_PROCESS);
 80065da:	2010      	movs	r0, #16
 80065dc:	f7ff fc74 	bl	8005ec8 <xMBMasterPortEventPost>
 80065e0:	4603      	mov	r3, r0
 80065e2:	71fb      	strb	r3, [r7, #7]
        }
        break;
 80065e4:	e001      	b.n	80065ea <xMBMasterRTUTimerExpired+0x7e>
        /* Function called in an illegal state. */
    default:
        assert_param(
                ( eSndState == STATE_M_TX_XFWR ) || ( eSndState == STATE_M_TX_IDLE ));
        break;
 80065e6:	bf00      	nop
 80065e8:	e000      	b.n	80065ec <xMBMasterRTUTimerExpired+0x80>
        break;
 80065ea:	bf00      	nop
    }
    eSndState = STATE_M_TX_IDLE;
 80065ec:	4b0a      	ldr	r3, [pc, #40]	; (8006618 <xMBMasterRTUTimerExpired+0xac>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	701a      	strb	r2, [r3, #0]

    vMBMasterPortTimersDisable( );
 80065f2:	f7ff fdc9 	bl	8006188 <vMBMasterPortTimersDisable>
    /* If timer mode is convert delay, the master event then turns EV_MASTER_EXECUTE status. */
    if (eMasterCurTimerMode == MB_TMODE_CONVERT_DELAY) {
 80065f6:	4b0a      	ldr	r3, [pc, #40]	; (8006620 <xMBMasterRTUTimerExpired+0xb4>)
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d104      	bne.n	800660a <xMBMasterRTUTimerExpired+0x9e>
        xNeedPoll = xMBMasterPortEventPost( EV_MASTER_EXECUTE );
 8006600:	2004      	movs	r0, #4
 8006602:	f7ff fc61 	bl	8005ec8 <xMBMasterPortEventPost>
 8006606:	4603      	mov	r3, r0
 8006608:	71fb      	strb	r3, [r7, #7]
    }

    return xNeedPoll;
 800660a:	79fb      	ldrb	r3, [r7, #7]
}
 800660c:	4618      	mov	r0, r3
 800660e:	3708      	adds	r7, #8
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	20005ba7 	.word	0x20005ba7
 8006618:	20005ba6 	.word	0x20005ba6
 800661c:	20005db4 	.word	0x20005db4
 8006620:	20005db5 	.word	0x20005db5

08006624 <vMBMasterGetPDUSndBuf>:
    *pucFrame = ( UCHAR * ) ucMasterRTUSndBuf;
}

/* Get Modbus Master send PDU's buffer address pointer.*/
void vMBMasterGetPDUSndBuf( UCHAR ** pucFrame )
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
    *pucFrame = ( UCHAR * ) &ucMasterRTUSndBuf[MB_SER_PDU_PDU_OFF];
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a04      	ldr	r2, [pc, #16]	; (8006640 <vMBMasterGetPDUSndBuf+0x1c>)
 8006630:	601a      	str	r2, [r3, #0]
}
 8006632:	bf00      	nop
 8006634:	370c      	adds	r7, #12
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	20005ba9 	.word	0x20005ba9

08006644 <vMBMasterSetPDUSndLength>:

/* Set Modbus Master send PDU's buffer length.*/
void vMBMasterSetPDUSndLength( USHORT SendPDULength )
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	4603      	mov	r3, r0
 800664c:	80fb      	strh	r3, [r7, #6]
    usMasterSendPDULength = SendPDULength;
 800664e:	4a04      	ldr	r2, [pc, #16]	; (8006660 <vMBMasterSetPDUSndLength+0x1c>)
 8006650:	88fb      	ldrh	r3, [r7, #6]
 8006652:	8013      	strh	r3, [r2, #0]
}
 8006654:	bf00      	nop
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr
 8006660:	20005da8 	.word	0x20005da8

08006664 <usMBMasterGetPDUSndLength>:

/* Get Modbus Master send PDU's buffer length.*/
USHORT usMBMasterGetPDUSndLength( void )
{
 8006664:	b480      	push	{r7}
 8006666:	af00      	add	r7, sp, #0
    return usMasterSendPDULength;
 8006668:	4b03      	ldr	r3, [pc, #12]	; (8006678 <usMBMasterGetPDUSndLength+0x14>)
 800666a:	881b      	ldrh	r3, [r3, #0]
 800666c:	b29b      	uxth	r3, r3
}
 800666e:	4618      	mov	r0, r3
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr
 8006678:	20005da8 	.word	0x20005da8

0800667c <xMBMasterRequestIsBroadcast>:
{
    eMasterCurTimerMode = eMBTimerMode;
}

/* The master request is broadcast? */
BOOL xMBMasterRequestIsBroadcast( void ){
 800667c:	b480      	push	{r7}
 800667e:	af00      	add	r7, sp, #0
    return xFrameIsBroadcast;
 8006680:	4b03      	ldr	r3, [pc, #12]	; (8006690 <xMBMasterRequestIsBroadcast+0x14>)
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	b2db      	uxtb	r3, r3
}
 8006686:	4618      	mov	r0, r3
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr
 8006690:	20005db4 	.word	0x20005db4

08006694 <__assert_func>:
 8006694:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006696:	4614      	mov	r4, r2
 8006698:	461a      	mov	r2, r3
 800669a:	4b09      	ldr	r3, [pc, #36]	; (80066c0 <__assert_func+0x2c>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4605      	mov	r5, r0
 80066a0:	68d8      	ldr	r0, [r3, #12]
 80066a2:	b14c      	cbz	r4, 80066b8 <__assert_func+0x24>
 80066a4:	4b07      	ldr	r3, [pc, #28]	; (80066c4 <__assert_func+0x30>)
 80066a6:	9100      	str	r1, [sp, #0]
 80066a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80066ac:	4906      	ldr	r1, [pc, #24]	; (80066c8 <__assert_func+0x34>)
 80066ae:	462b      	mov	r3, r5
 80066b0:	f000 f814 	bl	80066dc <fiprintf>
 80066b4:	f000 fc0c 	bl	8006ed0 <abort>
 80066b8:	4b04      	ldr	r3, [pc, #16]	; (80066cc <__assert_func+0x38>)
 80066ba:	461c      	mov	r4, r3
 80066bc:	e7f3      	b.n	80066a6 <__assert_func+0x12>
 80066be:	bf00      	nop
 80066c0:	20000094 	.word	0x20000094
 80066c4:	08007a0c 	.word	0x08007a0c
 80066c8:	08007a19 	.word	0x08007a19
 80066cc:	08007a47 	.word	0x08007a47

080066d0 <__errno>:
 80066d0:	4b01      	ldr	r3, [pc, #4]	; (80066d8 <__errno+0x8>)
 80066d2:	6818      	ldr	r0, [r3, #0]
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	20000094 	.word	0x20000094

080066dc <fiprintf>:
 80066dc:	b40e      	push	{r1, r2, r3}
 80066de:	b503      	push	{r0, r1, lr}
 80066e0:	4601      	mov	r1, r0
 80066e2:	ab03      	add	r3, sp, #12
 80066e4:	4805      	ldr	r0, [pc, #20]	; (80066fc <fiprintf+0x20>)
 80066e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80066ea:	6800      	ldr	r0, [r0, #0]
 80066ec:	9301      	str	r3, [sp, #4]
 80066ee:	f000 f86b 	bl	80067c8 <_vfiprintf_r>
 80066f2:	b002      	add	sp, #8
 80066f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80066f8:	b003      	add	sp, #12
 80066fa:	4770      	bx	lr
 80066fc:	20000094 	.word	0x20000094

08006700 <__libc_init_array>:
 8006700:	b570      	push	{r4, r5, r6, lr}
 8006702:	4d0d      	ldr	r5, [pc, #52]	; (8006738 <__libc_init_array+0x38>)
 8006704:	4c0d      	ldr	r4, [pc, #52]	; (800673c <__libc_init_array+0x3c>)
 8006706:	1b64      	subs	r4, r4, r5
 8006708:	10a4      	asrs	r4, r4, #2
 800670a:	2600      	movs	r6, #0
 800670c:	42a6      	cmp	r6, r4
 800670e:	d109      	bne.n	8006724 <__libc_init_array+0x24>
 8006710:	4d0b      	ldr	r5, [pc, #44]	; (8006740 <__libc_init_array+0x40>)
 8006712:	4c0c      	ldr	r4, [pc, #48]	; (8006744 <__libc_init_array+0x44>)
 8006714:	f000 fff0 	bl	80076f8 <_init>
 8006718:	1b64      	subs	r4, r4, r5
 800671a:	10a4      	asrs	r4, r4, #2
 800671c:	2600      	movs	r6, #0
 800671e:	42a6      	cmp	r6, r4
 8006720:	d105      	bne.n	800672e <__libc_init_array+0x2e>
 8006722:	bd70      	pop	{r4, r5, r6, pc}
 8006724:	f855 3b04 	ldr.w	r3, [r5], #4
 8006728:	4798      	blx	r3
 800672a:	3601      	adds	r6, #1
 800672c:	e7ee      	b.n	800670c <__libc_init_array+0xc>
 800672e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006732:	4798      	blx	r3
 8006734:	3601      	adds	r6, #1
 8006736:	e7f2      	b.n	800671e <__libc_init_array+0x1e>
 8006738:	08007ae8 	.word	0x08007ae8
 800673c:	08007ae8 	.word	0x08007ae8
 8006740:	08007ae8 	.word	0x08007ae8
 8006744:	08007aec 	.word	0x08007aec

08006748 <memcpy>:
 8006748:	440a      	add	r2, r1
 800674a:	4291      	cmp	r1, r2
 800674c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006750:	d100      	bne.n	8006754 <memcpy+0xc>
 8006752:	4770      	bx	lr
 8006754:	b510      	push	{r4, lr}
 8006756:	f811 4b01 	ldrb.w	r4, [r1], #1
 800675a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800675e:	4291      	cmp	r1, r2
 8006760:	d1f9      	bne.n	8006756 <memcpy+0xe>
 8006762:	bd10      	pop	{r4, pc}

08006764 <memset>:
 8006764:	4402      	add	r2, r0
 8006766:	4603      	mov	r3, r0
 8006768:	4293      	cmp	r3, r2
 800676a:	d100      	bne.n	800676e <memset+0xa>
 800676c:	4770      	bx	lr
 800676e:	f803 1b01 	strb.w	r1, [r3], #1
 8006772:	e7f9      	b.n	8006768 <memset+0x4>

08006774 <__sfputc_r>:
 8006774:	6893      	ldr	r3, [r2, #8]
 8006776:	3b01      	subs	r3, #1
 8006778:	2b00      	cmp	r3, #0
 800677a:	b410      	push	{r4}
 800677c:	6093      	str	r3, [r2, #8]
 800677e:	da08      	bge.n	8006792 <__sfputc_r+0x1e>
 8006780:	6994      	ldr	r4, [r2, #24]
 8006782:	42a3      	cmp	r3, r4
 8006784:	db01      	blt.n	800678a <__sfputc_r+0x16>
 8006786:	290a      	cmp	r1, #10
 8006788:	d103      	bne.n	8006792 <__sfputc_r+0x1e>
 800678a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800678e:	f000 badf 	b.w	8006d50 <__swbuf_r>
 8006792:	6813      	ldr	r3, [r2, #0]
 8006794:	1c58      	adds	r0, r3, #1
 8006796:	6010      	str	r0, [r2, #0]
 8006798:	7019      	strb	r1, [r3, #0]
 800679a:	4608      	mov	r0, r1
 800679c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <__sfputs_r>:
 80067a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067a4:	4606      	mov	r6, r0
 80067a6:	460f      	mov	r7, r1
 80067a8:	4614      	mov	r4, r2
 80067aa:	18d5      	adds	r5, r2, r3
 80067ac:	42ac      	cmp	r4, r5
 80067ae:	d101      	bne.n	80067b4 <__sfputs_r+0x12>
 80067b0:	2000      	movs	r0, #0
 80067b2:	e007      	b.n	80067c4 <__sfputs_r+0x22>
 80067b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067b8:	463a      	mov	r2, r7
 80067ba:	4630      	mov	r0, r6
 80067bc:	f7ff ffda 	bl	8006774 <__sfputc_r>
 80067c0:	1c43      	adds	r3, r0, #1
 80067c2:	d1f3      	bne.n	80067ac <__sfputs_r+0xa>
 80067c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080067c8 <_vfiprintf_r>:
 80067c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067cc:	460d      	mov	r5, r1
 80067ce:	b09d      	sub	sp, #116	; 0x74
 80067d0:	4614      	mov	r4, r2
 80067d2:	4698      	mov	r8, r3
 80067d4:	4606      	mov	r6, r0
 80067d6:	b118      	cbz	r0, 80067e0 <_vfiprintf_r+0x18>
 80067d8:	6983      	ldr	r3, [r0, #24]
 80067da:	b90b      	cbnz	r3, 80067e0 <_vfiprintf_r+0x18>
 80067dc:	f000 fc9a 	bl	8007114 <__sinit>
 80067e0:	4b89      	ldr	r3, [pc, #548]	; (8006a08 <_vfiprintf_r+0x240>)
 80067e2:	429d      	cmp	r5, r3
 80067e4:	d11b      	bne.n	800681e <_vfiprintf_r+0x56>
 80067e6:	6875      	ldr	r5, [r6, #4]
 80067e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067ea:	07d9      	lsls	r1, r3, #31
 80067ec:	d405      	bmi.n	80067fa <_vfiprintf_r+0x32>
 80067ee:	89ab      	ldrh	r3, [r5, #12]
 80067f0:	059a      	lsls	r2, r3, #22
 80067f2:	d402      	bmi.n	80067fa <_vfiprintf_r+0x32>
 80067f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067f6:	f000 fd2b 	bl	8007250 <__retarget_lock_acquire_recursive>
 80067fa:	89ab      	ldrh	r3, [r5, #12]
 80067fc:	071b      	lsls	r3, r3, #28
 80067fe:	d501      	bpl.n	8006804 <_vfiprintf_r+0x3c>
 8006800:	692b      	ldr	r3, [r5, #16]
 8006802:	b9eb      	cbnz	r3, 8006840 <_vfiprintf_r+0x78>
 8006804:	4629      	mov	r1, r5
 8006806:	4630      	mov	r0, r6
 8006808:	f000 faf4 	bl	8006df4 <__swsetup_r>
 800680c:	b1c0      	cbz	r0, 8006840 <_vfiprintf_r+0x78>
 800680e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006810:	07dc      	lsls	r4, r3, #31
 8006812:	d50e      	bpl.n	8006832 <_vfiprintf_r+0x6a>
 8006814:	f04f 30ff 	mov.w	r0, #4294967295
 8006818:	b01d      	add	sp, #116	; 0x74
 800681a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800681e:	4b7b      	ldr	r3, [pc, #492]	; (8006a0c <_vfiprintf_r+0x244>)
 8006820:	429d      	cmp	r5, r3
 8006822:	d101      	bne.n	8006828 <_vfiprintf_r+0x60>
 8006824:	68b5      	ldr	r5, [r6, #8]
 8006826:	e7df      	b.n	80067e8 <_vfiprintf_r+0x20>
 8006828:	4b79      	ldr	r3, [pc, #484]	; (8006a10 <_vfiprintf_r+0x248>)
 800682a:	429d      	cmp	r5, r3
 800682c:	bf08      	it	eq
 800682e:	68f5      	ldreq	r5, [r6, #12]
 8006830:	e7da      	b.n	80067e8 <_vfiprintf_r+0x20>
 8006832:	89ab      	ldrh	r3, [r5, #12]
 8006834:	0598      	lsls	r0, r3, #22
 8006836:	d4ed      	bmi.n	8006814 <_vfiprintf_r+0x4c>
 8006838:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800683a:	f000 fd0a 	bl	8007252 <__retarget_lock_release_recursive>
 800683e:	e7e9      	b.n	8006814 <_vfiprintf_r+0x4c>
 8006840:	2300      	movs	r3, #0
 8006842:	9309      	str	r3, [sp, #36]	; 0x24
 8006844:	2320      	movs	r3, #32
 8006846:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800684a:	f8cd 800c 	str.w	r8, [sp, #12]
 800684e:	2330      	movs	r3, #48	; 0x30
 8006850:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006a14 <_vfiprintf_r+0x24c>
 8006854:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006858:	f04f 0901 	mov.w	r9, #1
 800685c:	4623      	mov	r3, r4
 800685e:	469a      	mov	sl, r3
 8006860:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006864:	b10a      	cbz	r2, 800686a <_vfiprintf_r+0xa2>
 8006866:	2a25      	cmp	r2, #37	; 0x25
 8006868:	d1f9      	bne.n	800685e <_vfiprintf_r+0x96>
 800686a:	ebba 0b04 	subs.w	fp, sl, r4
 800686e:	d00b      	beq.n	8006888 <_vfiprintf_r+0xc0>
 8006870:	465b      	mov	r3, fp
 8006872:	4622      	mov	r2, r4
 8006874:	4629      	mov	r1, r5
 8006876:	4630      	mov	r0, r6
 8006878:	f7ff ff93 	bl	80067a2 <__sfputs_r>
 800687c:	3001      	adds	r0, #1
 800687e:	f000 80aa 	beq.w	80069d6 <_vfiprintf_r+0x20e>
 8006882:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006884:	445a      	add	r2, fp
 8006886:	9209      	str	r2, [sp, #36]	; 0x24
 8006888:	f89a 3000 	ldrb.w	r3, [sl]
 800688c:	2b00      	cmp	r3, #0
 800688e:	f000 80a2 	beq.w	80069d6 <_vfiprintf_r+0x20e>
 8006892:	2300      	movs	r3, #0
 8006894:	f04f 32ff 	mov.w	r2, #4294967295
 8006898:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800689c:	f10a 0a01 	add.w	sl, sl, #1
 80068a0:	9304      	str	r3, [sp, #16]
 80068a2:	9307      	str	r3, [sp, #28]
 80068a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068a8:	931a      	str	r3, [sp, #104]	; 0x68
 80068aa:	4654      	mov	r4, sl
 80068ac:	2205      	movs	r2, #5
 80068ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068b2:	4858      	ldr	r0, [pc, #352]	; (8006a14 <_vfiprintf_r+0x24c>)
 80068b4:	f7f9 fc8c 	bl	80001d0 <memchr>
 80068b8:	9a04      	ldr	r2, [sp, #16]
 80068ba:	b9d8      	cbnz	r0, 80068f4 <_vfiprintf_r+0x12c>
 80068bc:	06d1      	lsls	r1, r2, #27
 80068be:	bf44      	itt	mi
 80068c0:	2320      	movmi	r3, #32
 80068c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068c6:	0713      	lsls	r3, r2, #28
 80068c8:	bf44      	itt	mi
 80068ca:	232b      	movmi	r3, #43	; 0x2b
 80068cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068d0:	f89a 3000 	ldrb.w	r3, [sl]
 80068d4:	2b2a      	cmp	r3, #42	; 0x2a
 80068d6:	d015      	beq.n	8006904 <_vfiprintf_r+0x13c>
 80068d8:	9a07      	ldr	r2, [sp, #28]
 80068da:	4654      	mov	r4, sl
 80068dc:	2000      	movs	r0, #0
 80068de:	f04f 0c0a 	mov.w	ip, #10
 80068e2:	4621      	mov	r1, r4
 80068e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068e8:	3b30      	subs	r3, #48	; 0x30
 80068ea:	2b09      	cmp	r3, #9
 80068ec:	d94e      	bls.n	800698c <_vfiprintf_r+0x1c4>
 80068ee:	b1b0      	cbz	r0, 800691e <_vfiprintf_r+0x156>
 80068f0:	9207      	str	r2, [sp, #28]
 80068f2:	e014      	b.n	800691e <_vfiprintf_r+0x156>
 80068f4:	eba0 0308 	sub.w	r3, r0, r8
 80068f8:	fa09 f303 	lsl.w	r3, r9, r3
 80068fc:	4313      	orrs	r3, r2
 80068fe:	9304      	str	r3, [sp, #16]
 8006900:	46a2      	mov	sl, r4
 8006902:	e7d2      	b.n	80068aa <_vfiprintf_r+0xe2>
 8006904:	9b03      	ldr	r3, [sp, #12]
 8006906:	1d19      	adds	r1, r3, #4
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	9103      	str	r1, [sp, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	bfbb      	ittet	lt
 8006910:	425b      	neglt	r3, r3
 8006912:	f042 0202 	orrlt.w	r2, r2, #2
 8006916:	9307      	strge	r3, [sp, #28]
 8006918:	9307      	strlt	r3, [sp, #28]
 800691a:	bfb8      	it	lt
 800691c:	9204      	strlt	r2, [sp, #16]
 800691e:	7823      	ldrb	r3, [r4, #0]
 8006920:	2b2e      	cmp	r3, #46	; 0x2e
 8006922:	d10c      	bne.n	800693e <_vfiprintf_r+0x176>
 8006924:	7863      	ldrb	r3, [r4, #1]
 8006926:	2b2a      	cmp	r3, #42	; 0x2a
 8006928:	d135      	bne.n	8006996 <_vfiprintf_r+0x1ce>
 800692a:	9b03      	ldr	r3, [sp, #12]
 800692c:	1d1a      	adds	r2, r3, #4
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	9203      	str	r2, [sp, #12]
 8006932:	2b00      	cmp	r3, #0
 8006934:	bfb8      	it	lt
 8006936:	f04f 33ff 	movlt.w	r3, #4294967295
 800693a:	3402      	adds	r4, #2
 800693c:	9305      	str	r3, [sp, #20]
 800693e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006a24 <_vfiprintf_r+0x25c>
 8006942:	7821      	ldrb	r1, [r4, #0]
 8006944:	2203      	movs	r2, #3
 8006946:	4650      	mov	r0, sl
 8006948:	f7f9 fc42 	bl	80001d0 <memchr>
 800694c:	b140      	cbz	r0, 8006960 <_vfiprintf_r+0x198>
 800694e:	2340      	movs	r3, #64	; 0x40
 8006950:	eba0 000a 	sub.w	r0, r0, sl
 8006954:	fa03 f000 	lsl.w	r0, r3, r0
 8006958:	9b04      	ldr	r3, [sp, #16]
 800695a:	4303      	orrs	r3, r0
 800695c:	3401      	adds	r4, #1
 800695e:	9304      	str	r3, [sp, #16]
 8006960:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006964:	482c      	ldr	r0, [pc, #176]	; (8006a18 <_vfiprintf_r+0x250>)
 8006966:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800696a:	2206      	movs	r2, #6
 800696c:	f7f9 fc30 	bl	80001d0 <memchr>
 8006970:	2800      	cmp	r0, #0
 8006972:	d03f      	beq.n	80069f4 <_vfiprintf_r+0x22c>
 8006974:	4b29      	ldr	r3, [pc, #164]	; (8006a1c <_vfiprintf_r+0x254>)
 8006976:	bb1b      	cbnz	r3, 80069c0 <_vfiprintf_r+0x1f8>
 8006978:	9b03      	ldr	r3, [sp, #12]
 800697a:	3307      	adds	r3, #7
 800697c:	f023 0307 	bic.w	r3, r3, #7
 8006980:	3308      	adds	r3, #8
 8006982:	9303      	str	r3, [sp, #12]
 8006984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006986:	443b      	add	r3, r7
 8006988:	9309      	str	r3, [sp, #36]	; 0x24
 800698a:	e767      	b.n	800685c <_vfiprintf_r+0x94>
 800698c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006990:	460c      	mov	r4, r1
 8006992:	2001      	movs	r0, #1
 8006994:	e7a5      	b.n	80068e2 <_vfiprintf_r+0x11a>
 8006996:	2300      	movs	r3, #0
 8006998:	3401      	adds	r4, #1
 800699a:	9305      	str	r3, [sp, #20]
 800699c:	4619      	mov	r1, r3
 800699e:	f04f 0c0a 	mov.w	ip, #10
 80069a2:	4620      	mov	r0, r4
 80069a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069a8:	3a30      	subs	r2, #48	; 0x30
 80069aa:	2a09      	cmp	r2, #9
 80069ac:	d903      	bls.n	80069b6 <_vfiprintf_r+0x1ee>
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d0c5      	beq.n	800693e <_vfiprintf_r+0x176>
 80069b2:	9105      	str	r1, [sp, #20]
 80069b4:	e7c3      	b.n	800693e <_vfiprintf_r+0x176>
 80069b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80069ba:	4604      	mov	r4, r0
 80069bc:	2301      	movs	r3, #1
 80069be:	e7f0      	b.n	80069a2 <_vfiprintf_r+0x1da>
 80069c0:	ab03      	add	r3, sp, #12
 80069c2:	9300      	str	r3, [sp, #0]
 80069c4:	462a      	mov	r2, r5
 80069c6:	4b16      	ldr	r3, [pc, #88]	; (8006a20 <_vfiprintf_r+0x258>)
 80069c8:	a904      	add	r1, sp, #16
 80069ca:	4630      	mov	r0, r6
 80069cc:	f3af 8000 	nop.w
 80069d0:	4607      	mov	r7, r0
 80069d2:	1c78      	adds	r0, r7, #1
 80069d4:	d1d6      	bne.n	8006984 <_vfiprintf_r+0x1bc>
 80069d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069d8:	07d9      	lsls	r1, r3, #31
 80069da:	d405      	bmi.n	80069e8 <_vfiprintf_r+0x220>
 80069dc:	89ab      	ldrh	r3, [r5, #12]
 80069de:	059a      	lsls	r2, r3, #22
 80069e0:	d402      	bmi.n	80069e8 <_vfiprintf_r+0x220>
 80069e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069e4:	f000 fc35 	bl	8007252 <__retarget_lock_release_recursive>
 80069e8:	89ab      	ldrh	r3, [r5, #12]
 80069ea:	065b      	lsls	r3, r3, #25
 80069ec:	f53f af12 	bmi.w	8006814 <_vfiprintf_r+0x4c>
 80069f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069f2:	e711      	b.n	8006818 <_vfiprintf_r+0x50>
 80069f4:	ab03      	add	r3, sp, #12
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	462a      	mov	r2, r5
 80069fa:	4b09      	ldr	r3, [pc, #36]	; (8006a20 <_vfiprintf_r+0x258>)
 80069fc:	a904      	add	r1, sp, #16
 80069fe:	4630      	mov	r0, r6
 8006a00:	f000 f880 	bl	8006b04 <_printf_i>
 8006a04:	e7e4      	b.n	80069d0 <_vfiprintf_r+0x208>
 8006a06:	bf00      	nop
 8006a08:	08007aa0 	.word	0x08007aa0
 8006a0c:	08007ac0 	.word	0x08007ac0
 8006a10:	08007a80 	.word	0x08007a80
 8006a14:	08007a4c 	.word	0x08007a4c
 8006a18:	08007a56 	.word	0x08007a56
 8006a1c:	00000000 	.word	0x00000000
 8006a20:	080067a3 	.word	0x080067a3
 8006a24:	08007a52 	.word	0x08007a52

08006a28 <_printf_common>:
 8006a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a2c:	4616      	mov	r6, r2
 8006a2e:	4699      	mov	r9, r3
 8006a30:	688a      	ldr	r2, [r1, #8]
 8006a32:	690b      	ldr	r3, [r1, #16]
 8006a34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	bfb8      	it	lt
 8006a3c:	4613      	movlt	r3, r2
 8006a3e:	6033      	str	r3, [r6, #0]
 8006a40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a44:	4607      	mov	r7, r0
 8006a46:	460c      	mov	r4, r1
 8006a48:	b10a      	cbz	r2, 8006a4e <_printf_common+0x26>
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	6033      	str	r3, [r6, #0]
 8006a4e:	6823      	ldr	r3, [r4, #0]
 8006a50:	0699      	lsls	r1, r3, #26
 8006a52:	bf42      	ittt	mi
 8006a54:	6833      	ldrmi	r3, [r6, #0]
 8006a56:	3302      	addmi	r3, #2
 8006a58:	6033      	strmi	r3, [r6, #0]
 8006a5a:	6825      	ldr	r5, [r4, #0]
 8006a5c:	f015 0506 	ands.w	r5, r5, #6
 8006a60:	d106      	bne.n	8006a70 <_printf_common+0x48>
 8006a62:	f104 0a19 	add.w	sl, r4, #25
 8006a66:	68e3      	ldr	r3, [r4, #12]
 8006a68:	6832      	ldr	r2, [r6, #0]
 8006a6a:	1a9b      	subs	r3, r3, r2
 8006a6c:	42ab      	cmp	r3, r5
 8006a6e:	dc26      	bgt.n	8006abe <_printf_common+0x96>
 8006a70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a74:	1e13      	subs	r3, r2, #0
 8006a76:	6822      	ldr	r2, [r4, #0]
 8006a78:	bf18      	it	ne
 8006a7a:	2301      	movne	r3, #1
 8006a7c:	0692      	lsls	r2, r2, #26
 8006a7e:	d42b      	bmi.n	8006ad8 <_printf_common+0xb0>
 8006a80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a84:	4649      	mov	r1, r9
 8006a86:	4638      	mov	r0, r7
 8006a88:	47c0      	blx	r8
 8006a8a:	3001      	adds	r0, #1
 8006a8c:	d01e      	beq.n	8006acc <_printf_common+0xa4>
 8006a8e:	6823      	ldr	r3, [r4, #0]
 8006a90:	68e5      	ldr	r5, [r4, #12]
 8006a92:	6832      	ldr	r2, [r6, #0]
 8006a94:	f003 0306 	and.w	r3, r3, #6
 8006a98:	2b04      	cmp	r3, #4
 8006a9a:	bf08      	it	eq
 8006a9c:	1aad      	subeq	r5, r5, r2
 8006a9e:	68a3      	ldr	r3, [r4, #8]
 8006aa0:	6922      	ldr	r2, [r4, #16]
 8006aa2:	bf0c      	ite	eq
 8006aa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006aa8:	2500      	movne	r5, #0
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	bfc4      	itt	gt
 8006aae:	1a9b      	subgt	r3, r3, r2
 8006ab0:	18ed      	addgt	r5, r5, r3
 8006ab2:	2600      	movs	r6, #0
 8006ab4:	341a      	adds	r4, #26
 8006ab6:	42b5      	cmp	r5, r6
 8006ab8:	d11a      	bne.n	8006af0 <_printf_common+0xc8>
 8006aba:	2000      	movs	r0, #0
 8006abc:	e008      	b.n	8006ad0 <_printf_common+0xa8>
 8006abe:	2301      	movs	r3, #1
 8006ac0:	4652      	mov	r2, sl
 8006ac2:	4649      	mov	r1, r9
 8006ac4:	4638      	mov	r0, r7
 8006ac6:	47c0      	blx	r8
 8006ac8:	3001      	adds	r0, #1
 8006aca:	d103      	bne.n	8006ad4 <_printf_common+0xac>
 8006acc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ad4:	3501      	adds	r5, #1
 8006ad6:	e7c6      	b.n	8006a66 <_printf_common+0x3e>
 8006ad8:	18e1      	adds	r1, r4, r3
 8006ada:	1c5a      	adds	r2, r3, #1
 8006adc:	2030      	movs	r0, #48	; 0x30
 8006ade:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ae2:	4422      	add	r2, r4
 8006ae4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ae8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006aec:	3302      	adds	r3, #2
 8006aee:	e7c7      	b.n	8006a80 <_printf_common+0x58>
 8006af0:	2301      	movs	r3, #1
 8006af2:	4622      	mov	r2, r4
 8006af4:	4649      	mov	r1, r9
 8006af6:	4638      	mov	r0, r7
 8006af8:	47c0      	blx	r8
 8006afa:	3001      	adds	r0, #1
 8006afc:	d0e6      	beq.n	8006acc <_printf_common+0xa4>
 8006afe:	3601      	adds	r6, #1
 8006b00:	e7d9      	b.n	8006ab6 <_printf_common+0x8e>
	...

08006b04 <_printf_i>:
 8006b04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b08:	7e0f      	ldrb	r7, [r1, #24]
 8006b0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b0c:	2f78      	cmp	r7, #120	; 0x78
 8006b0e:	4691      	mov	r9, r2
 8006b10:	4680      	mov	r8, r0
 8006b12:	460c      	mov	r4, r1
 8006b14:	469a      	mov	sl, r3
 8006b16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b1a:	d807      	bhi.n	8006b2c <_printf_i+0x28>
 8006b1c:	2f62      	cmp	r7, #98	; 0x62
 8006b1e:	d80a      	bhi.n	8006b36 <_printf_i+0x32>
 8006b20:	2f00      	cmp	r7, #0
 8006b22:	f000 80d8 	beq.w	8006cd6 <_printf_i+0x1d2>
 8006b26:	2f58      	cmp	r7, #88	; 0x58
 8006b28:	f000 80a3 	beq.w	8006c72 <_printf_i+0x16e>
 8006b2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b34:	e03a      	b.n	8006bac <_printf_i+0xa8>
 8006b36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b3a:	2b15      	cmp	r3, #21
 8006b3c:	d8f6      	bhi.n	8006b2c <_printf_i+0x28>
 8006b3e:	a101      	add	r1, pc, #4	; (adr r1, 8006b44 <_printf_i+0x40>)
 8006b40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b44:	08006b9d 	.word	0x08006b9d
 8006b48:	08006bb1 	.word	0x08006bb1
 8006b4c:	08006b2d 	.word	0x08006b2d
 8006b50:	08006b2d 	.word	0x08006b2d
 8006b54:	08006b2d 	.word	0x08006b2d
 8006b58:	08006b2d 	.word	0x08006b2d
 8006b5c:	08006bb1 	.word	0x08006bb1
 8006b60:	08006b2d 	.word	0x08006b2d
 8006b64:	08006b2d 	.word	0x08006b2d
 8006b68:	08006b2d 	.word	0x08006b2d
 8006b6c:	08006b2d 	.word	0x08006b2d
 8006b70:	08006cbd 	.word	0x08006cbd
 8006b74:	08006be1 	.word	0x08006be1
 8006b78:	08006c9f 	.word	0x08006c9f
 8006b7c:	08006b2d 	.word	0x08006b2d
 8006b80:	08006b2d 	.word	0x08006b2d
 8006b84:	08006cdf 	.word	0x08006cdf
 8006b88:	08006b2d 	.word	0x08006b2d
 8006b8c:	08006be1 	.word	0x08006be1
 8006b90:	08006b2d 	.word	0x08006b2d
 8006b94:	08006b2d 	.word	0x08006b2d
 8006b98:	08006ca7 	.word	0x08006ca7
 8006b9c:	682b      	ldr	r3, [r5, #0]
 8006b9e:	1d1a      	adds	r2, r3, #4
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	602a      	str	r2, [r5, #0]
 8006ba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ba8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bac:	2301      	movs	r3, #1
 8006bae:	e0a3      	b.n	8006cf8 <_printf_i+0x1f4>
 8006bb0:	6820      	ldr	r0, [r4, #0]
 8006bb2:	6829      	ldr	r1, [r5, #0]
 8006bb4:	0606      	lsls	r6, r0, #24
 8006bb6:	f101 0304 	add.w	r3, r1, #4
 8006bba:	d50a      	bpl.n	8006bd2 <_printf_i+0xce>
 8006bbc:	680e      	ldr	r6, [r1, #0]
 8006bbe:	602b      	str	r3, [r5, #0]
 8006bc0:	2e00      	cmp	r6, #0
 8006bc2:	da03      	bge.n	8006bcc <_printf_i+0xc8>
 8006bc4:	232d      	movs	r3, #45	; 0x2d
 8006bc6:	4276      	negs	r6, r6
 8006bc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bcc:	485e      	ldr	r0, [pc, #376]	; (8006d48 <_printf_i+0x244>)
 8006bce:	230a      	movs	r3, #10
 8006bd0:	e019      	b.n	8006c06 <_printf_i+0x102>
 8006bd2:	680e      	ldr	r6, [r1, #0]
 8006bd4:	602b      	str	r3, [r5, #0]
 8006bd6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006bda:	bf18      	it	ne
 8006bdc:	b236      	sxthne	r6, r6
 8006bde:	e7ef      	b.n	8006bc0 <_printf_i+0xbc>
 8006be0:	682b      	ldr	r3, [r5, #0]
 8006be2:	6820      	ldr	r0, [r4, #0]
 8006be4:	1d19      	adds	r1, r3, #4
 8006be6:	6029      	str	r1, [r5, #0]
 8006be8:	0601      	lsls	r1, r0, #24
 8006bea:	d501      	bpl.n	8006bf0 <_printf_i+0xec>
 8006bec:	681e      	ldr	r6, [r3, #0]
 8006bee:	e002      	b.n	8006bf6 <_printf_i+0xf2>
 8006bf0:	0646      	lsls	r6, r0, #25
 8006bf2:	d5fb      	bpl.n	8006bec <_printf_i+0xe8>
 8006bf4:	881e      	ldrh	r6, [r3, #0]
 8006bf6:	4854      	ldr	r0, [pc, #336]	; (8006d48 <_printf_i+0x244>)
 8006bf8:	2f6f      	cmp	r7, #111	; 0x6f
 8006bfa:	bf0c      	ite	eq
 8006bfc:	2308      	moveq	r3, #8
 8006bfe:	230a      	movne	r3, #10
 8006c00:	2100      	movs	r1, #0
 8006c02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c06:	6865      	ldr	r5, [r4, #4]
 8006c08:	60a5      	str	r5, [r4, #8]
 8006c0a:	2d00      	cmp	r5, #0
 8006c0c:	bfa2      	ittt	ge
 8006c0e:	6821      	ldrge	r1, [r4, #0]
 8006c10:	f021 0104 	bicge.w	r1, r1, #4
 8006c14:	6021      	strge	r1, [r4, #0]
 8006c16:	b90e      	cbnz	r6, 8006c1c <_printf_i+0x118>
 8006c18:	2d00      	cmp	r5, #0
 8006c1a:	d04d      	beq.n	8006cb8 <_printf_i+0x1b4>
 8006c1c:	4615      	mov	r5, r2
 8006c1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c22:	fb03 6711 	mls	r7, r3, r1, r6
 8006c26:	5dc7      	ldrb	r7, [r0, r7]
 8006c28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c2c:	4637      	mov	r7, r6
 8006c2e:	42bb      	cmp	r3, r7
 8006c30:	460e      	mov	r6, r1
 8006c32:	d9f4      	bls.n	8006c1e <_printf_i+0x11a>
 8006c34:	2b08      	cmp	r3, #8
 8006c36:	d10b      	bne.n	8006c50 <_printf_i+0x14c>
 8006c38:	6823      	ldr	r3, [r4, #0]
 8006c3a:	07de      	lsls	r6, r3, #31
 8006c3c:	d508      	bpl.n	8006c50 <_printf_i+0x14c>
 8006c3e:	6923      	ldr	r3, [r4, #16]
 8006c40:	6861      	ldr	r1, [r4, #4]
 8006c42:	4299      	cmp	r1, r3
 8006c44:	bfde      	ittt	le
 8006c46:	2330      	movle	r3, #48	; 0x30
 8006c48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c50:	1b52      	subs	r2, r2, r5
 8006c52:	6122      	str	r2, [r4, #16]
 8006c54:	f8cd a000 	str.w	sl, [sp]
 8006c58:	464b      	mov	r3, r9
 8006c5a:	aa03      	add	r2, sp, #12
 8006c5c:	4621      	mov	r1, r4
 8006c5e:	4640      	mov	r0, r8
 8006c60:	f7ff fee2 	bl	8006a28 <_printf_common>
 8006c64:	3001      	adds	r0, #1
 8006c66:	d14c      	bne.n	8006d02 <_printf_i+0x1fe>
 8006c68:	f04f 30ff 	mov.w	r0, #4294967295
 8006c6c:	b004      	add	sp, #16
 8006c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c72:	4835      	ldr	r0, [pc, #212]	; (8006d48 <_printf_i+0x244>)
 8006c74:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006c78:	6829      	ldr	r1, [r5, #0]
 8006c7a:	6823      	ldr	r3, [r4, #0]
 8006c7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c80:	6029      	str	r1, [r5, #0]
 8006c82:	061d      	lsls	r5, r3, #24
 8006c84:	d514      	bpl.n	8006cb0 <_printf_i+0x1ac>
 8006c86:	07df      	lsls	r7, r3, #31
 8006c88:	bf44      	itt	mi
 8006c8a:	f043 0320 	orrmi.w	r3, r3, #32
 8006c8e:	6023      	strmi	r3, [r4, #0]
 8006c90:	b91e      	cbnz	r6, 8006c9a <_printf_i+0x196>
 8006c92:	6823      	ldr	r3, [r4, #0]
 8006c94:	f023 0320 	bic.w	r3, r3, #32
 8006c98:	6023      	str	r3, [r4, #0]
 8006c9a:	2310      	movs	r3, #16
 8006c9c:	e7b0      	b.n	8006c00 <_printf_i+0xfc>
 8006c9e:	6823      	ldr	r3, [r4, #0]
 8006ca0:	f043 0320 	orr.w	r3, r3, #32
 8006ca4:	6023      	str	r3, [r4, #0]
 8006ca6:	2378      	movs	r3, #120	; 0x78
 8006ca8:	4828      	ldr	r0, [pc, #160]	; (8006d4c <_printf_i+0x248>)
 8006caa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006cae:	e7e3      	b.n	8006c78 <_printf_i+0x174>
 8006cb0:	0659      	lsls	r1, r3, #25
 8006cb2:	bf48      	it	mi
 8006cb4:	b2b6      	uxthmi	r6, r6
 8006cb6:	e7e6      	b.n	8006c86 <_printf_i+0x182>
 8006cb8:	4615      	mov	r5, r2
 8006cba:	e7bb      	b.n	8006c34 <_printf_i+0x130>
 8006cbc:	682b      	ldr	r3, [r5, #0]
 8006cbe:	6826      	ldr	r6, [r4, #0]
 8006cc0:	6961      	ldr	r1, [r4, #20]
 8006cc2:	1d18      	adds	r0, r3, #4
 8006cc4:	6028      	str	r0, [r5, #0]
 8006cc6:	0635      	lsls	r5, r6, #24
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	d501      	bpl.n	8006cd0 <_printf_i+0x1cc>
 8006ccc:	6019      	str	r1, [r3, #0]
 8006cce:	e002      	b.n	8006cd6 <_printf_i+0x1d2>
 8006cd0:	0670      	lsls	r0, r6, #25
 8006cd2:	d5fb      	bpl.n	8006ccc <_printf_i+0x1c8>
 8006cd4:	8019      	strh	r1, [r3, #0]
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	6123      	str	r3, [r4, #16]
 8006cda:	4615      	mov	r5, r2
 8006cdc:	e7ba      	b.n	8006c54 <_printf_i+0x150>
 8006cde:	682b      	ldr	r3, [r5, #0]
 8006ce0:	1d1a      	adds	r2, r3, #4
 8006ce2:	602a      	str	r2, [r5, #0]
 8006ce4:	681d      	ldr	r5, [r3, #0]
 8006ce6:	6862      	ldr	r2, [r4, #4]
 8006ce8:	2100      	movs	r1, #0
 8006cea:	4628      	mov	r0, r5
 8006cec:	f7f9 fa70 	bl	80001d0 <memchr>
 8006cf0:	b108      	cbz	r0, 8006cf6 <_printf_i+0x1f2>
 8006cf2:	1b40      	subs	r0, r0, r5
 8006cf4:	6060      	str	r0, [r4, #4]
 8006cf6:	6863      	ldr	r3, [r4, #4]
 8006cf8:	6123      	str	r3, [r4, #16]
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d00:	e7a8      	b.n	8006c54 <_printf_i+0x150>
 8006d02:	6923      	ldr	r3, [r4, #16]
 8006d04:	462a      	mov	r2, r5
 8006d06:	4649      	mov	r1, r9
 8006d08:	4640      	mov	r0, r8
 8006d0a:	47d0      	blx	sl
 8006d0c:	3001      	adds	r0, #1
 8006d0e:	d0ab      	beq.n	8006c68 <_printf_i+0x164>
 8006d10:	6823      	ldr	r3, [r4, #0]
 8006d12:	079b      	lsls	r3, r3, #30
 8006d14:	d413      	bmi.n	8006d3e <_printf_i+0x23a>
 8006d16:	68e0      	ldr	r0, [r4, #12]
 8006d18:	9b03      	ldr	r3, [sp, #12]
 8006d1a:	4298      	cmp	r0, r3
 8006d1c:	bfb8      	it	lt
 8006d1e:	4618      	movlt	r0, r3
 8006d20:	e7a4      	b.n	8006c6c <_printf_i+0x168>
 8006d22:	2301      	movs	r3, #1
 8006d24:	4632      	mov	r2, r6
 8006d26:	4649      	mov	r1, r9
 8006d28:	4640      	mov	r0, r8
 8006d2a:	47d0      	blx	sl
 8006d2c:	3001      	adds	r0, #1
 8006d2e:	d09b      	beq.n	8006c68 <_printf_i+0x164>
 8006d30:	3501      	adds	r5, #1
 8006d32:	68e3      	ldr	r3, [r4, #12]
 8006d34:	9903      	ldr	r1, [sp, #12]
 8006d36:	1a5b      	subs	r3, r3, r1
 8006d38:	42ab      	cmp	r3, r5
 8006d3a:	dcf2      	bgt.n	8006d22 <_printf_i+0x21e>
 8006d3c:	e7eb      	b.n	8006d16 <_printf_i+0x212>
 8006d3e:	2500      	movs	r5, #0
 8006d40:	f104 0619 	add.w	r6, r4, #25
 8006d44:	e7f5      	b.n	8006d32 <_printf_i+0x22e>
 8006d46:	bf00      	nop
 8006d48:	08007a5d 	.word	0x08007a5d
 8006d4c:	08007a6e 	.word	0x08007a6e

08006d50 <__swbuf_r>:
 8006d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d52:	460e      	mov	r6, r1
 8006d54:	4614      	mov	r4, r2
 8006d56:	4605      	mov	r5, r0
 8006d58:	b118      	cbz	r0, 8006d62 <__swbuf_r+0x12>
 8006d5a:	6983      	ldr	r3, [r0, #24]
 8006d5c:	b90b      	cbnz	r3, 8006d62 <__swbuf_r+0x12>
 8006d5e:	f000 f9d9 	bl	8007114 <__sinit>
 8006d62:	4b21      	ldr	r3, [pc, #132]	; (8006de8 <__swbuf_r+0x98>)
 8006d64:	429c      	cmp	r4, r3
 8006d66:	d12b      	bne.n	8006dc0 <__swbuf_r+0x70>
 8006d68:	686c      	ldr	r4, [r5, #4]
 8006d6a:	69a3      	ldr	r3, [r4, #24]
 8006d6c:	60a3      	str	r3, [r4, #8]
 8006d6e:	89a3      	ldrh	r3, [r4, #12]
 8006d70:	071a      	lsls	r2, r3, #28
 8006d72:	d52f      	bpl.n	8006dd4 <__swbuf_r+0x84>
 8006d74:	6923      	ldr	r3, [r4, #16]
 8006d76:	b36b      	cbz	r3, 8006dd4 <__swbuf_r+0x84>
 8006d78:	6923      	ldr	r3, [r4, #16]
 8006d7a:	6820      	ldr	r0, [r4, #0]
 8006d7c:	1ac0      	subs	r0, r0, r3
 8006d7e:	6963      	ldr	r3, [r4, #20]
 8006d80:	b2f6      	uxtb	r6, r6
 8006d82:	4283      	cmp	r3, r0
 8006d84:	4637      	mov	r7, r6
 8006d86:	dc04      	bgt.n	8006d92 <__swbuf_r+0x42>
 8006d88:	4621      	mov	r1, r4
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	f000 f92e 	bl	8006fec <_fflush_r>
 8006d90:	bb30      	cbnz	r0, 8006de0 <__swbuf_r+0x90>
 8006d92:	68a3      	ldr	r3, [r4, #8]
 8006d94:	3b01      	subs	r3, #1
 8006d96:	60a3      	str	r3, [r4, #8]
 8006d98:	6823      	ldr	r3, [r4, #0]
 8006d9a:	1c5a      	adds	r2, r3, #1
 8006d9c:	6022      	str	r2, [r4, #0]
 8006d9e:	701e      	strb	r6, [r3, #0]
 8006da0:	6963      	ldr	r3, [r4, #20]
 8006da2:	3001      	adds	r0, #1
 8006da4:	4283      	cmp	r3, r0
 8006da6:	d004      	beq.n	8006db2 <__swbuf_r+0x62>
 8006da8:	89a3      	ldrh	r3, [r4, #12]
 8006daa:	07db      	lsls	r3, r3, #31
 8006dac:	d506      	bpl.n	8006dbc <__swbuf_r+0x6c>
 8006dae:	2e0a      	cmp	r6, #10
 8006db0:	d104      	bne.n	8006dbc <__swbuf_r+0x6c>
 8006db2:	4621      	mov	r1, r4
 8006db4:	4628      	mov	r0, r5
 8006db6:	f000 f919 	bl	8006fec <_fflush_r>
 8006dba:	b988      	cbnz	r0, 8006de0 <__swbuf_r+0x90>
 8006dbc:	4638      	mov	r0, r7
 8006dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dc0:	4b0a      	ldr	r3, [pc, #40]	; (8006dec <__swbuf_r+0x9c>)
 8006dc2:	429c      	cmp	r4, r3
 8006dc4:	d101      	bne.n	8006dca <__swbuf_r+0x7a>
 8006dc6:	68ac      	ldr	r4, [r5, #8]
 8006dc8:	e7cf      	b.n	8006d6a <__swbuf_r+0x1a>
 8006dca:	4b09      	ldr	r3, [pc, #36]	; (8006df0 <__swbuf_r+0xa0>)
 8006dcc:	429c      	cmp	r4, r3
 8006dce:	bf08      	it	eq
 8006dd0:	68ec      	ldreq	r4, [r5, #12]
 8006dd2:	e7ca      	b.n	8006d6a <__swbuf_r+0x1a>
 8006dd4:	4621      	mov	r1, r4
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	f000 f80c 	bl	8006df4 <__swsetup_r>
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	d0cb      	beq.n	8006d78 <__swbuf_r+0x28>
 8006de0:	f04f 37ff 	mov.w	r7, #4294967295
 8006de4:	e7ea      	b.n	8006dbc <__swbuf_r+0x6c>
 8006de6:	bf00      	nop
 8006de8:	08007aa0 	.word	0x08007aa0
 8006dec:	08007ac0 	.word	0x08007ac0
 8006df0:	08007a80 	.word	0x08007a80

08006df4 <__swsetup_r>:
 8006df4:	4b32      	ldr	r3, [pc, #200]	; (8006ec0 <__swsetup_r+0xcc>)
 8006df6:	b570      	push	{r4, r5, r6, lr}
 8006df8:	681d      	ldr	r5, [r3, #0]
 8006dfa:	4606      	mov	r6, r0
 8006dfc:	460c      	mov	r4, r1
 8006dfe:	b125      	cbz	r5, 8006e0a <__swsetup_r+0x16>
 8006e00:	69ab      	ldr	r3, [r5, #24]
 8006e02:	b913      	cbnz	r3, 8006e0a <__swsetup_r+0x16>
 8006e04:	4628      	mov	r0, r5
 8006e06:	f000 f985 	bl	8007114 <__sinit>
 8006e0a:	4b2e      	ldr	r3, [pc, #184]	; (8006ec4 <__swsetup_r+0xd0>)
 8006e0c:	429c      	cmp	r4, r3
 8006e0e:	d10f      	bne.n	8006e30 <__swsetup_r+0x3c>
 8006e10:	686c      	ldr	r4, [r5, #4]
 8006e12:	89a3      	ldrh	r3, [r4, #12]
 8006e14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e18:	0719      	lsls	r1, r3, #28
 8006e1a:	d42c      	bmi.n	8006e76 <__swsetup_r+0x82>
 8006e1c:	06dd      	lsls	r5, r3, #27
 8006e1e:	d411      	bmi.n	8006e44 <__swsetup_r+0x50>
 8006e20:	2309      	movs	r3, #9
 8006e22:	6033      	str	r3, [r6, #0]
 8006e24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006e28:	81a3      	strh	r3, [r4, #12]
 8006e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e2e:	e03e      	b.n	8006eae <__swsetup_r+0xba>
 8006e30:	4b25      	ldr	r3, [pc, #148]	; (8006ec8 <__swsetup_r+0xd4>)
 8006e32:	429c      	cmp	r4, r3
 8006e34:	d101      	bne.n	8006e3a <__swsetup_r+0x46>
 8006e36:	68ac      	ldr	r4, [r5, #8]
 8006e38:	e7eb      	b.n	8006e12 <__swsetup_r+0x1e>
 8006e3a:	4b24      	ldr	r3, [pc, #144]	; (8006ecc <__swsetup_r+0xd8>)
 8006e3c:	429c      	cmp	r4, r3
 8006e3e:	bf08      	it	eq
 8006e40:	68ec      	ldreq	r4, [r5, #12]
 8006e42:	e7e6      	b.n	8006e12 <__swsetup_r+0x1e>
 8006e44:	0758      	lsls	r0, r3, #29
 8006e46:	d512      	bpl.n	8006e6e <__swsetup_r+0x7a>
 8006e48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e4a:	b141      	cbz	r1, 8006e5e <__swsetup_r+0x6a>
 8006e4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e50:	4299      	cmp	r1, r3
 8006e52:	d002      	beq.n	8006e5a <__swsetup_r+0x66>
 8006e54:	4630      	mov	r0, r6
 8006e56:	f000 fa63 	bl	8007320 <_free_r>
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	6363      	str	r3, [r4, #52]	; 0x34
 8006e5e:	89a3      	ldrh	r3, [r4, #12]
 8006e60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e64:	81a3      	strh	r3, [r4, #12]
 8006e66:	2300      	movs	r3, #0
 8006e68:	6063      	str	r3, [r4, #4]
 8006e6a:	6923      	ldr	r3, [r4, #16]
 8006e6c:	6023      	str	r3, [r4, #0]
 8006e6e:	89a3      	ldrh	r3, [r4, #12]
 8006e70:	f043 0308 	orr.w	r3, r3, #8
 8006e74:	81a3      	strh	r3, [r4, #12]
 8006e76:	6923      	ldr	r3, [r4, #16]
 8006e78:	b94b      	cbnz	r3, 8006e8e <__swsetup_r+0x9a>
 8006e7a:	89a3      	ldrh	r3, [r4, #12]
 8006e7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e84:	d003      	beq.n	8006e8e <__swsetup_r+0x9a>
 8006e86:	4621      	mov	r1, r4
 8006e88:	4630      	mov	r0, r6
 8006e8a:	f000 fa09 	bl	80072a0 <__smakebuf_r>
 8006e8e:	89a0      	ldrh	r0, [r4, #12]
 8006e90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e94:	f010 0301 	ands.w	r3, r0, #1
 8006e98:	d00a      	beq.n	8006eb0 <__swsetup_r+0xbc>
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	60a3      	str	r3, [r4, #8]
 8006e9e:	6963      	ldr	r3, [r4, #20]
 8006ea0:	425b      	negs	r3, r3
 8006ea2:	61a3      	str	r3, [r4, #24]
 8006ea4:	6923      	ldr	r3, [r4, #16]
 8006ea6:	b943      	cbnz	r3, 8006eba <__swsetup_r+0xc6>
 8006ea8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006eac:	d1ba      	bne.n	8006e24 <__swsetup_r+0x30>
 8006eae:	bd70      	pop	{r4, r5, r6, pc}
 8006eb0:	0781      	lsls	r1, r0, #30
 8006eb2:	bf58      	it	pl
 8006eb4:	6963      	ldrpl	r3, [r4, #20]
 8006eb6:	60a3      	str	r3, [r4, #8]
 8006eb8:	e7f4      	b.n	8006ea4 <__swsetup_r+0xb0>
 8006eba:	2000      	movs	r0, #0
 8006ebc:	e7f7      	b.n	8006eae <__swsetup_r+0xba>
 8006ebe:	bf00      	nop
 8006ec0:	20000094 	.word	0x20000094
 8006ec4:	08007aa0 	.word	0x08007aa0
 8006ec8:	08007ac0 	.word	0x08007ac0
 8006ecc:	08007a80 	.word	0x08007a80

08006ed0 <abort>:
 8006ed0:	b508      	push	{r3, lr}
 8006ed2:	2006      	movs	r0, #6
 8006ed4:	f000 fb3c 	bl	8007550 <raise>
 8006ed8:	2001      	movs	r0, #1
 8006eda:	f7fa f9f3 	bl	80012c4 <_exit>
	...

08006ee0 <__sflush_r>:
 8006ee0:	898a      	ldrh	r2, [r1, #12]
 8006ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ee6:	4605      	mov	r5, r0
 8006ee8:	0710      	lsls	r0, r2, #28
 8006eea:	460c      	mov	r4, r1
 8006eec:	d458      	bmi.n	8006fa0 <__sflush_r+0xc0>
 8006eee:	684b      	ldr	r3, [r1, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	dc05      	bgt.n	8006f00 <__sflush_r+0x20>
 8006ef4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	dc02      	bgt.n	8006f00 <__sflush_r+0x20>
 8006efa:	2000      	movs	r0, #0
 8006efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f02:	2e00      	cmp	r6, #0
 8006f04:	d0f9      	beq.n	8006efa <__sflush_r+0x1a>
 8006f06:	2300      	movs	r3, #0
 8006f08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f0c:	682f      	ldr	r7, [r5, #0]
 8006f0e:	602b      	str	r3, [r5, #0]
 8006f10:	d032      	beq.n	8006f78 <__sflush_r+0x98>
 8006f12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f14:	89a3      	ldrh	r3, [r4, #12]
 8006f16:	075a      	lsls	r2, r3, #29
 8006f18:	d505      	bpl.n	8006f26 <__sflush_r+0x46>
 8006f1a:	6863      	ldr	r3, [r4, #4]
 8006f1c:	1ac0      	subs	r0, r0, r3
 8006f1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f20:	b10b      	cbz	r3, 8006f26 <__sflush_r+0x46>
 8006f22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f24:	1ac0      	subs	r0, r0, r3
 8006f26:	2300      	movs	r3, #0
 8006f28:	4602      	mov	r2, r0
 8006f2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f2c:	6a21      	ldr	r1, [r4, #32]
 8006f2e:	4628      	mov	r0, r5
 8006f30:	47b0      	blx	r6
 8006f32:	1c43      	adds	r3, r0, #1
 8006f34:	89a3      	ldrh	r3, [r4, #12]
 8006f36:	d106      	bne.n	8006f46 <__sflush_r+0x66>
 8006f38:	6829      	ldr	r1, [r5, #0]
 8006f3a:	291d      	cmp	r1, #29
 8006f3c:	d82c      	bhi.n	8006f98 <__sflush_r+0xb8>
 8006f3e:	4a2a      	ldr	r2, [pc, #168]	; (8006fe8 <__sflush_r+0x108>)
 8006f40:	40ca      	lsrs	r2, r1
 8006f42:	07d6      	lsls	r6, r2, #31
 8006f44:	d528      	bpl.n	8006f98 <__sflush_r+0xb8>
 8006f46:	2200      	movs	r2, #0
 8006f48:	6062      	str	r2, [r4, #4]
 8006f4a:	04d9      	lsls	r1, r3, #19
 8006f4c:	6922      	ldr	r2, [r4, #16]
 8006f4e:	6022      	str	r2, [r4, #0]
 8006f50:	d504      	bpl.n	8006f5c <__sflush_r+0x7c>
 8006f52:	1c42      	adds	r2, r0, #1
 8006f54:	d101      	bne.n	8006f5a <__sflush_r+0x7a>
 8006f56:	682b      	ldr	r3, [r5, #0]
 8006f58:	b903      	cbnz	r3, 8006f5c <__sflush_r+0x7c>
 8006f5a:	6560      	str	r0, [r4, #84]	; 0x54
 8006f5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f5e:	602f      	str	r7, [r5, #0]
 8006f60:	2900      	cmp	r1, #0
 8006f62:	d0ca      	beq.n	8006efa <__sflush_r+0x1a>
 8006f64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f68:	4299      	cmp	r1, r3
 8006f6a:	d002      	beq.n	8006f72 <__sflush_r+0x92>
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	f000 f9d7 	bl	8007320 <_free_r>
 8006f72:	2000      	movs	r0, #0
 8006f74:	6360      	str	r0, [r4, #52]	; 0x34
 8006f76:	e7c1      	b.n	8006efc <__sflush_r+0x1c>
 8006f78:	6a21      	ldr	r1, [r4, #32]
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	47b0      	blx	r6
 8006f80:	1c41      	adds	r1, r0, #1
 8006f82:	d1c7      	bne.n	8006f14 <__sflush_r+0x34>
 8006f84:	682b      	ldr	r3, [r5, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d0c4      	beq.n	8006f14 <__sflush_r+0x34>
 8006f8a:	2b1d      	cmp	r3, #29
 8006f8c:	d001      	beq.n	8006f92 <__sflush_r+0xb2>
 8006f8e:	2b16      	cmp	r3, #22
 8006f90:	d101      	bne.n	8006f96 <__sflush_r+0xb6>
 8006f92:	602f      	str	r7, [r5, #0]
 8006f94:	e7b1      	b.n	8006efa <__sflush_r+0x1a>
 8006f96:	89a3      	ldrh	r3, [r4, #12]
 8006f98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f9c:	81a3      	strh	r3, [r4, #12]
 8006f9e:	e7ad      	b.n	8006efc <__sflush_r+0x1c>
 8006fa0:	690f      	ldr	r7, [r1, #16]
 8006fa2:	2f00      	cmp	r7, #0
 8006fa4:	d0a9      	beq.n	8006efa <__sflush_r+0x1a>
 8006fa6:	0793      	lsls	r3, r2, #30
 8006fa8:	680e      	ldr	r6, [r1, #0]
 8006faa:	bf08      	it	eq
 8006fac:	694b      	ldreq	r3, [r1, #20]
 8006fae:	600f      	str	r7, [r1, #0]
 8006fb0:	bf18      	it	ne
 8006fb2:	2300      	movne	r3, #0
 8006fb4:	eba6 0807 	sub.w	r8, r6, r7
 8006fb8:	608b      	str	r3, [r1, #8]
 8006fba:	f1b8 0f00 	cmp.w	r8, #0
 8006fbe:	dd9c      	ble.n	8006efa <__sflush_r+0x1a>
 8006fc0:	6a21      	ldr	r1, [r4, #32]
 8006fc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006fc4:	4643      	mov	r3, r8
 8006fc6:	463a      	mov	r2, r7
 8006fc8:	4628      	mov	r0, r5
 8006fca:	47b0      	blx	r6
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	dc06      	bgt.n	8006fde <__sflush_r+0xfe>
 8006fd0:	89a3      	ldrh	r3, [r4, #12]
 8006fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fd6:	81a3      	strh	r3, [r4, #12]
 8006fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fdc:	e78e      	b.n	8006efc <__sflush_r+0x1c>
 8006fde:	4407      	add	r7, r0
 8006fe0:	eba8 0800 	sub.w	r8, r8, r0
 8006fe4:	e7e9      	b.n	8006fba <__sflush_r+0xda>
 8006fe6:	bf00      	nop
 8006fe8:	20400001 	.word	0x20400001

08006fec <_fflush_r>:
 8006fec:	b538      	push	{r3, r4, r5, lr}
 8006fee:	690b      	ldr	r3, [r1, #16]
 8006ff0:	4605      	mov	r5, r0
 8006ff2:	460c      	mov	r4, r1
 8006ff4:	b913      	cbnz	r3, 8006ffc <_fflush_r+0x10>
 8006ff6:	2500      	movs	r5, #0
 8006ff8:	4628      	mov	r0, r5
 8006ffa:	bd38      	pop	{r3, r4, r5, pc}
 8006ffc:	b118      	cbz	r0, 8007006 <_fflush_r+0x1a>
 8006ffe:	6983      	ldr	r3, [r0, #24]
 8007000:	b90b      	cbnz	r3, 8007006 <_fflush_r+0x1a>
 8007002:	f000 f887 	bl	8007114 <__sinit>
 8007006:	4b14      	ldr	r3, [pc, #80]	; (8007058 <_fflush_r+0x6c>)
 8007008:	429c      	cmp	r4, r3
 800700a:	d11b      	bne.n	8007044 <_fflush_r+0x58>
 800700c:	686c      	ldr	r4, [r5, #4]
 800700e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d0ef      	beq.n	8006ff6 <_fflush_r+0xa>
 8007016:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007018:	07d0      	lsls	r0, r2, #31
 800701a:	d404      	bmi.n	8007026 <_fflush_r+0x3a>
 800701c:	0599      	lsls	r1, r3, #22
 800701e:	d402      	bmi.n	8007026 <_fflush_r+0x3a>
 8007020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007022:	f000 f915 	bl	8007250 <__retarget_lock_acquire_recursive>
 8007026:	4628      	mov	r0, r5
 8007028:	4621      	mov	r1, r4
 800702a:	f7ff ff59 	bl	8006ee0 <__sflush_r>
 800702e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007030:	07da      	lsls	r2, r3, #31
 8007032:	4605      	mov	r5, r0
 8007034:	d4e0      	bmi.n	8006ff8 <_fflush_r+0xc>
 8007036:	89a3      	ldrh	r3, [r4, #12]
 8007038:	059b      	lsls	r3, r3, #22
 800703a:	d4dd      	bmi.n	8006ff8 <_fflush_r+0xc>
 800703c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800703e:	f000 f908 	bl	8007252 <__retarget_lock_release_recursive>
 8007042:	e7d9      	b.n	8006ff8 <_fflush_r+0xc>
 8007044:	4b05      	ldr	r3, [pc, #20]	; (800705c <_fflush_r+0x70>)
 8007046:	429c      	cmp	r4, r3
 8007048:	d101      	bne.n	800704e <_fflush_r+0x62>
 800704a:	68ac      	ldr	r4, [r5, #8]
 800704c:	e7df      	b.n	800700e <_fflush_r+0x22>
 800704e:	4b04      	ldr	r3, [pc, #16]	; (8007060 <_fflush_r+0x74>)
 8007050:	429c      	cmp	r4, r3
 8007052:	bf08      	it	eq
 8007054:	68ec      	ldreq	r4, [r5, #12]
 8007056:	e7da      	b.n	800700e <_fflush_r+0x22>
 8007058:	08007aa0 	.word	0x08007aa0
 800705c:	08007ac0 	.word	0x08007ac0
 8007060:	08007a80 	.word	0x08007a80

08007064 <std>:
 8007064:	2300      	movs	r3, #0
 8007066:	b510      	push	{r4, lr}
 8007068:	4604      	mov	r4, r0
 800706a:	e9c0 3300 	strd	r3, r3, [r0]
 800706e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007072:	6083      	str	r3, [r0, #8]
 8007074:	8181      	strh	r1, [r0, #12]
 8007076:	6643      	str	r3, [r0, #100]	; 0x64
 8007078:	81c2      	strh	r2, [r0, #14]
 800707a:	6183      	str	r3, [r0, #24]
 800707c:	4619      	mov	r1, r3
 800707e:	2208      	movs	r2, #8
 8007080:	305c      	adds	r0, #92	; 0x5c
 8007082:	f7ff fb6f 	bl	8006764 <memset>
 8007086:	4b05      	ldr	r3, [pc, #20]	; (800709c <std+0x38>)
 8007088:	6263      	str	r3, [r4, #36]	; 0x24
 800708a:	4b05      	ldr	r3, [pc, #20]	; (80070a0 <std+0x3c>)
 800708c:	62a3      	str	r3, [r4, #40]	; 0x28
 800708e:	4b05      	ldr	r3, [pc, #20]	; (80070a4 <std+0x40>)
 8007090:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007092:	4b05      	ldr	r3, [pc, #20]	; (80070a8 <std+0x44>)
 8007094:	6224      	str	r4, [r4, #32]
 8007096:	6323      	str	r3, [r4, #48]	; 0x30
 8007098:	bd10      	pop	{r4, pc}
 800709a:	bf00      	nop
 800709c:	08007589 	.word	0x08007589
 80070a0:	080075ab 	.word	0x080075ab
 80070a4:	080075e3 	.word	0x080075e3
 80070a8:	08007607 	.word	0x08007607

080070ac <_cleanup_r>:
 80070ac:	4901      	ldr	r1, [pc, #4]	; (80070b4 <_cleanup_r+0x8>)
 80070ae:	f000 b8af 	b.w	8007210 <_fwalk_reent>
 80070b2:	bf00      	nop
 80070b4:	08006fed 	.word	0x08006fed

080070b8 <__sfmoreglue>:
 80070b8:	b570      	push	{r4, r5, r6, lr}
 80070ba:	2268      	movs	r2, #104	; 0x68
 80070bc:	1e4d      	subs	r5, r1, #1
 80070be:	4355      	muls	r5, r2
 80070c0:	460e      	mov	r6, r1
 80070c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80070c6:	f000 f997 	bl	80073f8 <_malloc_r>
 80070ca:	4604      	mov	r4, r0
 80070cc:	b140      	cbz	r0, 80070e0 <__sfmoreglue+0x28>
 80070ce:	2100      	movs	r1, #0
 80070d0:	e9c0 1600 	strd	r1, r6, [r0]
 80070d4:	300c      	adds	r0, #12
 80070d6:	60a0      	str	r0, [r4, #8]
 80070d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80070dc:	f7ff fb42 	bl	8006764 <memset>
 80070e0:	4620      	mov	r0, r4
 80070e2:	bd70      	pop	{r4, r5, r6, pc}

080070e4 <__sfp_lock_acquire>:
 80070e4:	4801      	ldr	r0, [pc, #4]	; (80070ec <__sfp_lock_acquire+0x8>)
 80070e6:	f000 b8b3 	b.w	8007250 <__retarget_lock_acquire_recursive>
 80070ea:	bf00      	nop
 80070ec:	20005db7 	.word	0x20005db7

080070f0 <__sfp_lock_release>:
 80070f0:	4801      	ldr	r0, [pc, #4]	; (80070f8 <__sfp_lock_release+0x8>)
 80070f2:	f000 b8ae 	b.w	8007252 <__retarget_lock_release_recursive>
 80070f6:	bf00      	nop
 80070f8:	20005db7 	.word	0x20005db7

080070fc <__sinit_lock_acquire>:
 80070fc:	4801      	ldr	r0, [pc, #4]	; (8007104 <__sinit_lock_acquire+0x8>)
 80070fe:	f000 b8a7 	b.w	8007250 <__retarget_lock_acquire_recursive>
 8007102:	bf00      	nop
 8007104:	20005db8 	.word	0x20005db8

08007108 <__sinit_lock_release>:
 8007108:	4801      	ldr	r0, [pc, #4]	; (8007110 <__sinit_lock_release+0x8>)
 800710a:	f000 b8a2 	b.w	8007252 <__retarget_lock_release_recursive>
 800710e:	bf00      	nop
 8007110:	20005db8 	.word	0x20005db8

08007114 <__sinit>:
 8007114:	b510      	push	{r4, lr}
 8007116:	4604      	mov	r4, r0
 8007118:	f7ff fff0 	bl	80070fc <__sinit_lock_acquire>
 800711c:	69a3      	ldr	r3, [r4, #24]
 800711e:	b11b      	cbz	r3, 8007128 <__sinit+0x14>
 8007120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007124:	f7ff bff0 	b.w	8007108 <__sinit_lock_release>
 8007128:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800712c:	6523      	str	r3, [r4, #80]	; 0x50
 800712e:	4b13      	ldr	r3, [pc, #76]	; (800717c <__sinit+0x68>)
 8007130:	4a13      	ldr	r2, [pc, #76]	; (8007180 <__sinit+0x6c>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	62a2      	str	r2, [r4, #40]	; 0x28
 8007136:	42a3      	cmp	r3, r4
 8007138:	bf04      	itt	eq
 800713a:	2301      	moveq	r3, #1
 800713c:	61a3      	streq	r3, [r4, #24]
 800713e:	4620      	mov	r0, r4
 8007140:	f000 f820 	bl	8007184 <__sfp>
 8007144:	6060      	str	r0, [r4, #4]
 8007146:	4620      	mov	r0, r4
 8007148:	f000 f81c 	bl	8007184 <__sfp>
 800714c:	60a0      	str	r0, [r4, #8]
 800714e:	4620      	mov	r0, r4
 8007150:	f000 f818 	bl	8007184 <__sfp>
 8007154:	2200      	movs	r2, #0
 8007156:	60e0      	str	r0, [r4, #12]
 8007158:	2104      	movs	r1, #4
 800715a:	6860      	ldr	r0, [r4, #4]
 800715c:	f7ff ff82 	bl	8007064 <std>
 8007160:	68a0      	ldr	r0, [r4, #8]
 8007162:	2201      	movs	r2, #1
 8007164:	2109      	movs	r1, #9
 8007166:	f7ff ff7d 	bl	8007064 <std>
 800716a:	68e0      	ldr	r0, [r4, #12]
 800716c:	2202      	movs	r2, #2
 800716e:	2112      	movs	r1, #18
 8007170:	f7ff ff78 	bl	8007064 <std>
 8007174:	2301      	movs	r3, #1
 8007176:	61a3      	str	r3, [r4, #24]
 8007178:	e7d2      	b.n	8007120 <__sinit+0xc>
 800717a:	bf00      	nop
 800717c:	08007a48 	.word	0x08007a48
 8007180:	080070ad 	.word	0x080070ad

08007184 <__sfp>:
 8007184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007186:	4607      	mov	r7, r0
 8007188:	f7ff ffac 	bl	80070e4 <__sfp_lock_acquire>
 800718c:	4b1e      	ldr	r3, [pc, #120]	; (8007208 <__sfp+0x84>)
 800718e:	681e      	ldr	r6, [r3, #0]
 8007190:	69b3      	ldr	r3, [r6, #24]
 8007192:	b913      	cbnz	r3, 800719a <__sfp+0x16>
 8007194:	4630      	mov	r0, r6
 8007196:	f7ff ffbd 	bl	8007114 <__sinit>
 800719a:	3648      	adds	r6, #72	; 0x48
 800719c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80071a0:	3b01      	subs	r3, #1
 80071a2:	d503      	bpl.n	80071ac <__sfp+0x28>
 80071a4:	6833      	ldr	r3, [r6, #0]
 80071a6:	b30b      	cbz	r3, 80071ec <__sfp+0x68>
 80071a8:	6836      	ldr	r6, [r6, #0]
 80071aa:	e7f7      	b.n	800719c <__sfp+0x18>
 80071ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80071b0:	b9d5      	cbnz	r5, 80071e8 <__sfp+0x64>
 80071b2:	4b16      	ldr	r3, [pc, #88]	; (800720c <__sfp+0x88>)
 80071b4:	60e3      	str	r3, [r4, #12]
 80071b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80071ba:	6665      	str	r5, [r4, #100]	; 0x64
 80071bc:	f000 f847 	bl	800724e <__retarget_lock_init_recursive>
 80071c0:	f7ff ff96 	bl	80070f0 <__sfp_lock_release>
 80071c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80071c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80071cc:	6025      	str	r5, [r4, #0]
 80071ce:	61a5      	str	r5, [r4, #24]
 80071d0:	2208      	movs	r2, #8
 80071d2:	4629      	mov	r1, r5
 80071d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80071d8:	f7ff fac4 	bl	8006764 <memset>
 80071dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80071e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80071e4:	4620      	mov	r0, r4
 80071e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071e8:	3468      	adds	r4, #104	; 0x68
 80071ea:	e7d9      	b.n	80071a0 <__sfp+0x1c>
 80071ec:	2104      	movs	r1, #4
 80071ee:	4638      	mov	r0, r7
 80071f0:	f7ff ff62 	bl	80070b8 <__sfmoreglue>
 80071f4:	4604      	mov	r4, r0
 80071f6:	6030      	str	r0, [r6, #0]
 80071f8:	2800      	cmp	r0, #0
 80071fa:	d1d5      	bne.n	80071a8 <__sfp+0x24>
 80071fc:	f7ff ff78 	bl	80070f0 <__sfp_lock_release>
 8007200:	230c      	movs	r3, #12
 8007202:	603b      	str	r3, [r7, #0]
 8007204:	e7ee      	b.n	80071e4 <__sfp+0x60>
 8007206:	bf00      	nop
 8007208:	08007a48 	.word	0x08007a48
 800720c:	ffff0001 	.word	0xffff0001

08007210 <_fwalk_reent>:
 8007210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007214:	4606      	mov	r6, r0
 8007216:	4688      	mov	r8, r1
 8007218:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800721c:	2700      	movs	r7, #0
 800721e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007222:	f1b9 0901 	subs.w	r9, r9, #1
 8007226:	d505      	bpl.n	8007234 <_fwalk_reent+0x24>
 8007228:	6824      	ldr	r4, [r4, #0]
 800722a:	2c00      	cmp	r4, #0
 800722c:	d1f7      	bne.n	800721e <_fwalk_reent+0xe>
 800722e:	4638      	mov	r0, r7
 8007230:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007234:	89ab      	ldrh	r3, [r5, #12]
 8007236:	2b01      	cmp	r3, #1
 8007238:	d907      	bls.n	800724a <_fwalk_reent+0x3a>
 800723a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800723e:	3301      	adds	r3, #1
 8007240:	d003      	beq.n	800724a <_fwalk_reent+0x3a>
 8007242:	4629      	mov	r1, r5
 8007244:	4630      	mov	r0, r6
 8007246:	47c0      	blx	r8
 8007248:	4307      	orrs	r7, r0
 800724a:	3568      	adds	r5, #104	; 0x68
 800724c:	e7e9      	b.n	8007222 <_fwalk_reent+0x12>

0800724e <__retarget_lock_init_recursive>:
 800724e:	4770      	bx	lr

08007250 <__retarget_lock_acquire_recursive>:
 8007250:	4770      	bx	lr

08007252 <__retarget_lock_release_recursive>:
 8007252:	4770      	bx	lr

08007254 <__swhatbuf_r>:
 8007254:	b570      	push	{r4, r5, r6, lr}
 8007256:	460e      	mov	r6, r1
 8007258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800725c:	2900      	cmp	r1, #0
 800725e:	b096      	sub	sp, #88	; 0x58
 8007260:	4614      	mov	r4, r2
 8007262:	461d      	mov	r5, r3
 8007264:	da08      	bge.n	8007278 <__swhatbuf_r+0x24>
 8007266:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	602a      	str	r2, [r5, #0]
 800726e:	061a      	lsls	r2, r3, #24
 8007270:	d410      	bmi.n	8007294 <__swhatbuf_r+0x40>
 8007272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007276:	e00e      	b.n	8007296 <__swhatbuf_r+0x42>
 8007278:	466a      	mov	r2, sp
 800727a:	f000 f9eb 	bl	8007654 <_fstat_r>
 800727e:	2800      	cmp	r0, #0
 8007280:	dbf1      	blt.n	8007266 <__swhatbuf_r+0x12>
 8007282:	9a01      	ldr	r2, [sp, #4]
 8007284:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007288:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800728c:	425a      	negs	r2, r3
 800728e:	415a      	adcs	r2, r3
 8007290:	602a      	str	r2, [r5, #0]
 8007292:	e7ee      	b.n	8007272 <__swhatbuf_r+0x1e>
 8007294:	2340      	movs	r3, #64	; 0x40
 8007296:	2000      	movs	r0, #0
 8007298:	6023      	str	r3, [r4, #0]
 800729a:	b016      	add	sp, #88	; 0x58
 800729c:	bd70      	pop	{r4, r5, r6, pc}
	...

080072a0 <__smakebuf_r>:
 80072a0:	898b      	ldrh	r3, [r1, #12]
 80072a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80072a4:	079d      	lsls	r5, r3, #30
 80072a6:	4606      	mov	r6, r0
 80072a8:	460c      	mov	r4, r1
 80072aa:	d507      	bpl.n	80072bc <__smakebuf_r+0x1c>
 80072ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80072b0:	6023      	str	r3, [r4, #0]
 80072b2:	6123      	str	r3, [r4, #16]
 80072b4:	2301      	movs	r3, #1
 80072b6:	6163      	str	r3, [r4, #20]
 80072b8:	b002      	add	sp, #8
 80072ba:	bd70      	pop	{r4, r5, r6, pc}
 80072bc:	ab01      	add	r3, sp, #4
 80072be:	466a      	mov	r2, sp
 80072c0:	f7ff ffc8 	bl	8007254 <__swhatbuf_r>
 80072c4:	9900      	ldr	r1, [sp, #0]
 80072c6:	4605      	mov	r5, r0
 80072c8:	4630      	mov	r0, r6
 80072ca:	f000 f895 	bl	80073f8 <_malloc_r>
 80072ce:	b948      	cbnz	r0, 80072e4 <__smakebuf_r+0x44>
 80072d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072d4:	059a      	lsls	r2, r3, #22
 80072d6:	d4ef      	bmi.n	80072b8 <__smakebuf_r+0x18>
 80072d8:	f023 0303 	bic.w	r3, r3, #3
 80072dc:	f043 0302 	orr.w	r3, r3, #2
 80072e0:	81a3      	strh	r3, [r4, #12]
 80072e2:	e7e3      	b.n	80072ac <__smakebuf_r+0xc>
 80072e4:	4b0d      	ldr	r3, [pc, #52]	; (800731c <__smakebuf_r+0x7c>)
 80072e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80072e8:	89a3      	ldrh	r3, [r4, #12]
 80072ea:	6020      	str	r0, [r4, #0]
 80072ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072f0:	81a3      	strh	r3, [r4, #12]
 80072f2:	9b00      	ldr	r3, [sp, #0]
 80072f4:	6163      	str	r3, [r4, #20]
 80072f6:	9b01      	ldr	r3, [sp, #4]
 80072f8:	6120      	str	r0, [r4, #16]
 80072fa:	b15b      	cbz	r3, 8007314 <__smakebuf_r+0x74>
 80072fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007300:	4630      	mov	r0, r6
 8007302:	f000 f9b9 	bl	8007678 <_isatty_r>
 8007306:	b128      	cbz	r0, 8007314 <__smakebuf_r+0x74>
 8007308:	89a3      	ldrh	r3, [r4, #12]
 800730a:	f023 0303 	bic.w	r3, r3, #3
 800730e:	f043 0301 	orr.w	r3, r3, #1
 8007312:	81a3      	strh	r3, [r4, #12]
 8007314:	89a0      	ldrh	r0, [r4, #12]
 8007316:	4305      	orrs	r5, r0
 8007318:	81a5      	strh	r5, [r4, #12]
 800731a:	e7cd      	b.n	80072b8 <__smakebuf_r+0x18>
 800731c:	080070ad 	.word	0x080070ad

08007320 <_free_r>:
 8007320:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007322:	2900      	cmp	r1, #0
 8007324:	d044      	beq.n	80073b0 <_free_r+0x90>
 8007326:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800732a:	9001      	str	r0, [sp, #4]
 800732c:	2b00      	cmp	r3, #0
 800732e:	f1a1 0404 	sub.w	r4, r1, #4
 8007332:	bfb8      	it	lt
 8007334:	18e4      	addlt	r4, r4, r3
 8007336:	f000 f9c1 	bl	80076bc <__malloc_lock>
 800733a:	4a1e      	ldr	r2, [pc, #120]	; (80073b4 <_free_r+0x94>)
 800733c:	9801      	ldr	r0, [sp, #4]
 800733e:	6813      	ldr	r3, [r2, #0]
 8007340:	b933      	cbnz	r3, 8007350 <_free_r+0x30>
 8007342:	6063      	str	r3, [r4, #4]
 8007344:	6014      	str	r4, [r2, #0]
 8007346:	b003      	add	sp, #12
 8007348:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800734c:	f000 b9bc 	b.w	80076c8 <__malloc_unlock>
 8007350:	42a3      	cmp	r3, r4
 8007352:	d908      	bls.n	8007366 <_free_r+0x46>
 8007354:	6825      	ldr	r5, [r4, #0]
 8007356:	1961      	adds	r1, r4, r5
 8007358:	428b      	cmp	r3, r1
 800735a:	bf01      	itttt	eq
 800735c:	6819      	ldreq	r1, [r3, #0]
 800735e:	685b      	ldreq	r3, [r3, #4]
 8007360:	1949      	addeq	r1, r1, r5
 8007362:	6021      	streq	r1, [r4, #0]
 8007364:	e7ed      	b.n	8007342 <_free_r+0x22>
 8007366:	461a      	mov	r2, r3
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	b10b      	cbz	r3, 8007370 <_free_r+0x50>
 800736c:	42a3      	cmp	r3, r4
 800736e:	d9fa      	bls.n	8007366 <_free_r+0x46>
 8007370:	6811      	ldr	r1, [r2, #0]
 8007372:	1855      	adds	r5, r2, r1
 8007374:	42a5      	cmp	r5, r4
 8007376:	d10b      	bne.n	8007390 <_free_r+0x70>
 8007378:	6824      	ldr	r4, [r4, #0]
 800737a:	4421      	add	r1, r4
 800737c:	1854      	adds	r4, r2, r1
 800737e:	42a3      	cmp	r3, r4
 8007380:	6011      	str	r1, [r2, #0]
 8007382:	d1e0      	bne.n	8007346 <_free_r+0x26>
 8007384:	681c      	ldr	r4, [r3, #0]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	6053      	str	r3, [r2, #4]
 800738a:	4421      	add	r1, r4
 800738c:	6011      	str	r1, [r2, #0]
 800738e:	e7da      	b.n	8007346 <_free_r+0x26>
 8007390:	d902      	bls.n	8007398 <_free_r+0x78>
 8007392:	230c      	movs	r3, #12
 8007394:	6003      	str	r3, [r0, #0]
 8007396:	e7d6      	b.n	8007346 <_free_r+0x26>
 8007398:	6825      	ldr	r5, [r4, #0]
 800739a:	1961      	adds	r1, r4, r5
 800739c:	428b      	cmp	r3, r1
 800739e:	bf04      	itt	eq
 80073a0:	6819      	ldreq	r1, [r3, #0]
 80073a2:	685b      	ldreq	r3, [r3, #4]
 80073a4:	6063      	str	r3, [r4, #4]
 80073a6:	bf04      	itt	eq
 80073a8:	1949      	addeq	r1, r1, r5
 80073aa:	6021      	streq	r1, [r4, #0]
 80073ac:	6054      	str	r4, [r2, #4]
 80073ae:	e7ca      	b.n	8007346 <_free_r+0x26>
 80073b0:	b003      	add	sp, #12
 80073b2:	bd30      	pop	{r4, r5, pc}
 80073b4:	20005dbc 	.word	0x20005dbc

080073b8 <sbrk_aligned>:
 80073b8:	b570      	push	{r4, r5, r6, lr}
 80073ba:	4e0e      	ldr	r6, [pc, #56]	; (80073f4 <sbrk_aligned+0x3c>)
 80073bc:	460c      	mov	r4, r1
 80073be:	6831      	ldr	r1, [r6, #0]
 80073c0:	4605      	mov	r5, r0
 80073c2:	b911      	cbnz	r1, 80073ca <sbrk_aligned+0x12>
 80073c4:	f000 f88c 	bl	80074e0 <_sbrk_r>
 80073c8:	6030      	str	r0, [r6, #0]
 80073ca:	4621      	mov	r1, r4
 80073cc:	4628      	mov	r0, r5
 80073ce:	f000 f887 	bl	80074e0 <_sbrk_r>
 80073d2:	1c43      	adds	r3, r0, #1
 80073d4:	d00a      	beq.n	80073ec <sbrk_aligned+0x34>
 80073d6:	1cc4      	adds	r4, r0, #3
 80073d8:	f024 0403 	bic.w	r4, r4, #3
 80073dc:	42a0      	cmp	r0, r4
 80073de:	d007      	beq.n	80073f0 <sbrk_aligned+0x38>
 80073e0:	1a21      	subs	r1, r4, r0
 80073e2:	4628      	mov	r0, r5
 80073e4:	f000 f87c 	bl	80074e0 <_sbrk_r>
 80073e8:	3001      	adds	r0, #1
 80073ea:	d101      	bne.n	80073f0 <sbrk_aligned+0x38>
 80073ec:	f04f 34ff 	mov.w	r4, #4294967295
 80073f0:	4620      	mov	r0, r4
 80073f2:	bd70      	pop	{r4, r5, r6, pc}
 80073f4:	20005dc0 	.word	0x20005dc0

080073f8 <_malloc_r>:
 80073f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073fc:	1ccd      	adds	r5, r1, #3
 80073fe:	f025 0503 	bic.w	r5, r5, #3
 8007402:	3508      	adds	r5, #8
 8007404:	2d0c      	cmp	r5, #12
 8007406:	bf38      	it	cc
 8007408:	250c      	movcc	r5, #12
 800740a:	2d00      	cmp	r5, #0
 800740c:	4607      	mov	r7, r0
 800740e:	db01      	blt.n	8007414 <_malloc_r+0x1c>
 8007410:	42a9      	cmp	r1, r5
 8007412:	d905      	bls.n	8007420 <_malloc_r+0x28>
 8007414:	230c      	movs	r3, #12
 8007416:	603b      	str	r3, [r7, #0]
 8007418:	2600      	movs	r6, #0
 800741a:	4630      	mov	r0, r6
 800741c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007420:	4e2e      	ldr	r6, [pc, #184]	; (80074dc <_malloc_r+0xe4>)
 8007422:	f000 f94b 	bl	80076bc <__malloc_lock>
 8007426:	6833      	ldr	r3, [r6, #0]
 8007428:	461c      	mov	r4, r3
 800742a:	bb34      	cbnz	r4, 800747a <_malloc_r+0x82>
 800742c:	4629      	mov	r1, r5
 800742e:	4638      	mov	r0, r7
 8007430:	f7ff ffc2 	bl	80073b8 <sbrk_aligned>
 8007434:	1c43      	adds	r3, r0, #1
 8007436:	4604      	mov	r4, r0
 8007438:	d14d      	bne.n	80074d6 <_malloc_r+0xde>
 800743a:	6834      	ldr	r4, [r6, #0]
 800743c:	4626      	mov	r6, r4
 800743e:	2e00      	cmp	r6, #0
 8007440:	d140      	bne.n	80074c4 <_malloc_r+0xcc>
 8007442:	6823      	ldr	r3, [r4, #0]
 8007444:	4631      	mov	r1, r6
 8007446:	4638      	mov	r0, r7
 8007448:	eb04 0803 	add.w	r8, r4, r3
 800744c:	f000 f848 	bl	80074e0 <_sbrk_r>
 8007450:	4580      	cmp	r8, r0
 8007452:	d13a      	bne.n	80074ca <_malloc_r+0xd2>
 8007454:	6821      	ldr	r1, [r4, #0]
 8007456:	3503      	adds	r5, #3
 8007458:	1a6d      	subs	r5, r5, r1
 800745a:	f025 0503 	bic.w	r5, r5, #3
 800745e:	3508      	adds	r5, #8
 8007460:	2d0c      	cmp	r5, #12
 8007462:	bf38      	it	cc
 8007464:	250c      	movcc	r5, #12
 8007466:	4629      	mov	r1, r5
 8007468:	4638      	mov	r0, r7
 800746a:	f7ff ffa5 	bl	80073b8 <sbrk_aligned>
 800746e:	3001      	adds	r0, #1
 8007470:	d02b      	beq.n	80074ca <_malloc_r+0xd2>
 8007472:	6823      	ldr	r3, [r4, #0]
 8007474:	442b      	add	r3, r5
 8007476:	6023      	str	r3, [r4, #0]
 8007478:	e00e      	b.n	8007498 <_malloc_r+0xa0>
 800747a:	6822      	ldr	r2, [r4, #0]
 800747c:	1b52      	subs	r2, r2, r5
 800747e:	d41e      	bmi.n	80074be <_malloc_r+0xc6>
 8007480:	2a0b      	cmp	r2, #11
 8007482:	d916      	bls.n	80074b2 <_malloc_r+0xba>
 8007484:	1961      	adds	r1, r4, r5
 8007486:	42a3      	cmp	r3, r4
 8007488:	6025      	str	r5, [r4, #0]
 800748a:	bf18      	it	ne
 800748c:	6059      	strne	r1, [r3, #4]
 800748e:	6863      	ldr	r3, [r4, #4]
 8007490:	bf08      	it	eq
 8007492:	6031      	streq	r1, [r6, #0]
 8007494:	5162      	str	r2, [r4, r5]
 8007496:	604b      	str	r3, [r1, #4]
 8007498:	4638      	mov	r0, r7
 800749a:	f104 060b 	add.w	r6, r4, #11
 800749e:	f000 f913 	bl	80076c8 <__malloc_unlock>
 80074a2:	f026 0607 	bic.w	r6, r6, #7
 80074a6:	1d23      	adds	r3, r4, #4
 80074a8:	1af2      	subs	r2, r6, r3
 80074aa:	d0b6      	beq.n	800741a <_malloc_r+0x22>
 80074ac:	1b9b      	subs	r3, r3, r6
 80074ae:	50a3      	str	r3, [r4, r2]
 80074b0:	e7b3      	b.n	800741a <_malloc_r+0x22>
 80074b2:	6862      	ldr	r2, [r4, #4]
 80074b4:	42a3      	cmp	r3, r4
 80074b6:	bf0c      	ite	eq
 80074b8:	6032      	streq	r2, [r6, #0]
 80074ba:	605a      	strne	r2, [r3, #4]
 80074bc:	e7ec      	b.n	8007498 <_malloc_r+0xa0>
 80074be:	4623      	mov	r3, r4
 80074c0:	6864      	ldr	r4, [r4, #4]
 80074c2:	e7b2      	b.n	800742a <_malloc_r+0x32>
 80074c4:	4634      	mov	r4, r6
 80074c6:	6876      	ldr	r6, [r6, #4]
 80074c8:	e7b9      	b.n	800743e <_malloc_r+0x46>
 80074ca:	230c      	movs	r3, #12
 80074cc:	603b      	str	r3, [r7, #0]
 80074ce:	4638      	mov	r0, r7
 80074d0:	f000 f8fa 	bl	80076c8 <__malloc_unlock>
 80074d4:	e7a1      	b.n	800741a <_malloc_r+0x22>
 80074d6:	6025      	str	r5, [r4, #0]
 80074d8:	e7de      	b.n	8007498 <_malloc_r+0xa0>
 80074da:	bf00      	nop
 80074dc:	20005dbc 	.word	0x20005dbc

080074e0 <_sbrk_r>:
 80074e0:	b538      	push	{r3, r4, r5, lr}
 80074e2:	4d06      	ldr	r5, [pc, #24]	; (80074fc <_sbrk_r+0x1c>)
 80074e4:	2300      	movs	r3, #0
 80074e6:	4604      	mov	r4, r0
 80074e8:	4608      	mov	r0, r1
 80074ea:	602b      	str	r3, [r5, #0]
 80074ec:	f7f9 ff62 	bl	80013b4 <_sbrk>
 80074f0:	1c43      	adds	r3, r0, #1
 80074f2:	d102      	bne.n	80074fa <_sbrk_r+0x1a>
 80074f4:	682b      	ldr	r3, [r5, #0]
 80074f6:	b103      	cbz	r3, 80074fa <_sbrk_r+0x1a>
 80074f8:	6023      	str	r3, [r4, #0]
 80074fa:	bd38      	pop	{r3, r4, r5, pc}
 80074fc:	20005dc4 	.word	0x20005dc4

08007500 <_raise_r>:
 8007500:	291f      	cmp	r1, #31
 8007502:	b538      	push	{r3, r4, r5, lr}
 8007504:	4604      	mov	r4, r0
 8007506:	460d      	mov	r5, r1
 8007508:	d904      	bls.n	8007514 <_raise_r+0x14>
 800750a:	2316      	movs	r3, #22
 800750c:	6003      	str	r3, [r0, #0]
 800750e:	f04f 30ff 	mov.w	r0, #4294967295
 8007512:	bd38      	pop	{r3, r4, r5, pc}
 8007514:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007516:	b112      	cbz	r2, 800751e <_raise_r+0x1e>
 8007518:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800751c:	b94b      	cbnz	r3, 8007532 <_raise_r+0x32>
 800751e:	4620      	mov	r0, r4
 8007520:	f000 f830 	bl	8007584 <_getpid_r>
 8007524:	462a      	mov	r2, r5
 8007526:	4601      	mov	r1, r0
 8007528:	4620      	mov	r0, r4
 800752a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800752e:	f000 b817 	b.w	8007560 <_kill_r>
 8007532:	2b01      	cmp	r3, #1
 8007534:	d00a      	beq.n	800754c <_raise_r+0x4c>
 8007536:	1c59      	adds	r1, r3, #1
 8007538:	d103      	bne.n	8007542 <_raise_r+0x42>
 800753a:	2316      	movs	r3, #22
 800753c:	6003      	str	r3, [r0, #0]
 800753e:	2001      	movs	r0, #1
 8007540:	e7e7      	b.n	8007512 <_raise_r+0x12>
 8007542:	2400      	movs	r4, #0
 8007544:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007548:	4628      	mov	r0, r5
 800754a:	4798      	blx	r3
 800754c:	2000      	movs	r0, #0
 800754e:	e7e0      	b.n	8007512 <_raise_r+0x12>

08007550 <raise>:
 8007550:	4b02      	ldr	r3, [pc, #8]	; (800755c <raise+0xc>)
 8007552:	4601      	mov	r1, r0
 8007554:	6818      	ldr	r0, [r3, #0]
 8007556:	f7ff bfd3 	b.w	8007500 <_raise_r>
 800755a:	bf00      	nop
 800755c:	20000094 	.word	0x20000094

08007560 <_kill_r>:
 8007560:	b538      	push	{r3, r4, r5, lr}
 8007562:	4d07      	ldr	r5, [pc, #28]	; (8007580 <_kill_r+0x20>)
 8007564:	2300      	movs	r3, #0
 8007566:	4604      	mov	r4, r0
 8007568:	4608      	mov	r0, r1
 800756a:	4611      	mov	r1, r2
 800756c:	602b      	str	r3, [r5, #0]
 800756e:	f7f9 fe99 	bl	80012a4 <_kill>
 8007572:	1c43      	adds	r3, r0, #1
 8007574:	d102      	bne.n	800757c <_kill_r+0x1c>
 8007576:	682b      	ldr	r3, [r5, #0]
 8007578:	b103      	cbz	r3, 800757c <_kill_r+0x1c>
 800757a:	6023      	str	r3, [r4, #0]
 800757c:	bd38      	pop	{r3, r4, r5, pc}
 800757e:	bf00      	nop
 8007580:	20005dc4 	.word	0x20005dc4

08007584 <_getpid_r>:
 8007584:	f7f9 be86 	b.w	8001294 <_getpid>

08007588 <__sread>:
 8007588:	b510      	push	{r4, lr}
 800758a:	460c      	mov	r4, r1
 800758c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007590:	f000 f8a0 	bl	80076d4 <_read_r>
 8007594:	2800      	cmp	r0, #0
 8007596:	bfab      	itete	ge
 8007598:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800759a:	89a3      	ldrhlt	r3, [r4, #12]
 800759c:	181b      	addge	r3, r3, r0
 800759e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80075a2:	bfac      	ite	ge
 80075a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80075a6:	81a3      	strhlt	r3, [r4, #12]
 80075a8:	bd10      	pop	{r4, pc}

080075aa <__swrite>:
 80075aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075ae:	461f      	mov	r7, r3
 80075b0:	898b      	ldrh	r3, [r1, #12]
 80075b2:	05db      	lsls	r3, r3, #23
 80075b4:	4605      	mov	r5, r0
 80075b6:	460c      	mov	r4, r1
 80075b8:	4616      	mov	r6, r2
 80075ba:	d505      	bpl.n	80075c8 <__swrite+0x1e>
 80075bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075c0:	2302      	movs	r3, #2
 80075c2:	2200      	movs	r2, #0
 80075c4:	f000 f868 	bl	8007698 <_lseek_r>
 80075c8:	89a3      	ldrh	r3, [r4, #12]
 80075ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075d2:	81a3      	strh	r3, [r4, #12]
 80075d4:	4632      	mov	r2, r6
 80075d6:	463b      	mov	r3, r7
 80075d8:	4628      	mov	r0, r5
 80075da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075de:	f000 b817 	b.w	8007610 <_write_r>

080075e2 <__sseek>:
 80075e2:	b510      	push	{r4, lr}
 80075e4:	460c      	mov	r4, r1
 80075e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075ea:	f000 f855 	bl	8007698 <_lseek_r>
 80075ee:	1c43      	adds	r3, r0, #1
 80075f0:	89a3      	ldrh	r3, [r4, #12]
 80075f2:	bf15      	itete	ne
 80075f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80075f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80075fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80075fe:	81a3      	strheq	r3, [r4, #12]
 8007600:	bf18      	it	ne
 8007602:	81a3      	strhne	r3, [r4, #12]
 8007604:	bd10      	pop	{r4, pc}

08007606 <__sclose>:
 8007606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800760a:	f000 b813 	b.w	8007634 <_close_r>
	...

08007610 <_write_r>:
 8007610:	b538      	push	{r3, r4, r5, lr}
 8007612:	4d07      	ldr	r5, [pc, #28]	; (8007630 <_write_r+0x20>)
 8007614:	4604      	mov	r4, r0
 8007616:	4608      	mov	r0, r1
 8007618:	4611      	mov	r1, r2
 800761a:	2200      	movs	r2, #0
 800761c:	602a      	str	r2, [r5, #0]
 800761e:	461a      	mov	r2, r3
 8007620:	f7f9 fe77 	bl	8001312 <_write>
 8007624:	1c43      	adds	r3, r0, #1
 8007626:	d102      	bne.n	800762e <_write_r+0x1e>
 8007628:	682b      	ldr	r3, [r5, #0]
 800762a:	b103      	cbz	r3, 800762e <_write_r+0x1e>
 800762c:	6023      	str	r3, [r4, #0]
 800762e:	bd38      	pop	{r3, r4, r5, pc}
 8007630:	20005dc4 	.word	0x20005dc4

08007634 <_close_r>:
 8007634:	b538      	push	{r3, r4, r5, lr}
 8007636:	4d06      	ldr	r5, [pc, #24]	; (8007650 <_close_r+0x1c>)
 8007638:	2300      	movs	r3, #0
 800763a:	4604      	mov	r4, r0
 800763c:	4608      	mov	r0, r1
 800763e:	602b      	str	r3, [r5, #0]
 8007640:	f7f9 fe83 	bl	800134a <_close>
 8007644:	1c43      	adds	r3, r0, #1
 8007646:	d102      	bne.n	800764e <_close_r+0x1a>
 8007648:	682b      	ldr	r3, [r5, #0]
 800764a:	b103      	cbz	r3, 800764e <_close_r+0x1a>
 800764c:	6023      	str	r3, [r4, #0]
 800764e:	bd38      	pop	{r3, r4, r5, pc}
 8007650:	20005dc4 	.word	0x20005dc4

08007654 <_fstat_r>:
 8007654:	b538      	push	{r3, r4, r5, lr}
 8007656:	4d07      	ldr	r5, [pc, #28]	; (8007674 <_fstat_r+0x20>)
 8007658:	2300      	movs	r3, #0
 800765a:	4604      	mov	r4, r0
 800765c:	4608      	mov	r0, r1
 800765e:	4611      	mov	r1, r2
 8007660:	602b      	str	r3, [r5, #0]
 8007662:	f7f9 fe7e 	bl	8001362 <_fstat>
 8007666:	1c43      	adds	r3, r0, #1
 8007668:	d102      	bne.n	8007670 <_fstat_r+0x1c>
 800766a:	682b      	ldr	r3, [r5, #0]
 800766c:	b103      	cbz	r3, 8007670 <_fstat_r+0x1c>
 800766e:	6023      	str	r3, [r4, #0]
 8007670:	bd38      	pop	{r3, r4, r5, pc}
 8007672:	bf00      	nop
 8007674:	20005dc4 	.word	0x20005dc4

08007678 <_isatty_r>:
 8007678:	b538      	push	{r3, r4, r5, lr}
 800767a:	4d06      	ldr	r5, [pc, #24]	; (8007694 <_isatty_r+0x1c>)
 800767c:	2300      	movs	r3, #0
 800767e:	4604      	mov	r4, r0
 8007680:	4608      	mov	r0, r1
 8007682:	602b      	str	r3, [r5, #0]
 8007684:	f7f9 fe7d 	bl	8001382 <_isatty>
 8007688:	1c43      	adds	r3, r0, #1
 800768a:	d102      	bne.n	8007692 <_isatty_r+0x1a>
 800768c:	682b      	ldr	r3, [r5, #0]
 800768e:	b103      	cbz	r3, 8007692 <_isatty_r+0x1a>
 8007690:	6023      	str	r3, [r4, #0]
 8007692:	bd38      	pop	{r3, r4, r5, pc}
 8007694:	20005dc4 	.word	0x20005dc4

08007698 <_lseek_r>:
 8007698:	b538      	push	{r3, r4, r5, lr}
 800769a:	4d07      	ldr	r5, [pc, #28]	; (80076b8 <_lseek_r+0x20>)
 800769c:	4604      	mov	r4, r0
 800769e:	4608      	mov	r0, r1
 80076a0:	4611      	mov	r1, r2
 80076a2:	2200      	movs	r2, #0
 80076a4:	602a      	str	r2, [r5, #0]
 80076a6:	461a      	mov	r2, r3
 80076a8:	f7f9 fe76 	bl	8001398 <_lseek>
 80076ac:	1c43      	adds	r3, r0, #1
 80076ae:	d102      	bne.n	80076b6 <_lseek_r+0x1e>
 80076b0:	682b      	ldr	r3, [r5, #0]
 80076b2:	b103      	cbz	r3, 80076b6 <_lseek_r+0x1e>
 80076b4:	6023      	str	r3, [r4, #0]
 80076b6:	bd38      	pop	{r3, r4, r5, pc}
 80076b8:	20005dc4 	.word	0x20005dc4

080076bc <__malloc_lock>:
 80076bc:	4801      	ldr	r0, [pc, #4]	; (80076c4 <__malloc_lock+0x8>)
 80076be:	f7ff bdc7 	b.w	8007250 <__retarget_lock_acquire_recursive>
 80076c2:	bf00      	nop
 80076c4:	20005db6 	.word	0x20005db6

080076c8 <__malloc_unlock>:
 80076c8:	4801      	ldr	r0, [pc, #4]	; (80076d0 <__malloc_unlock+0x8>)
 80076ca:	f7ff bdc2 	b.w	8007252 <__retarget_lock_release_recursive>
 80076ce:	bf00      	nop
 80076d0:	20005db6 	.word	0x20005db6

080076d4 <_read_r>:
 80076d4:	b538      	push	{r3, r4, r5, lr}
 80076d6:	4d07      	ldr	r5, [pc, #28]	; (80076f4 <_read_r+0x20>)
 80076d8:	4604      	mov	r4, r0
 80076da:	4608      	mov	r0, r1
 80076dc:	4611      	mov	r1, r2
 80076de:	2200      	movs	r2, #0
 80076e0:	602a      	str	r2, [r5, #0]
 80076e2:	461a      	mov	r2, r3
 80076e4:	f7f9 fdf8 	bl	80012d8 <_read>
 80076e8:	1c43      	adds	r3, r0, #1
 80076ea:	d102      	bne.n	80076f2 <_read_r+0x1e>
 80076ec:	682b      	ldr	r3, [r5, #0]
 80076ee:	b103      	cbz	r3, 80076f2 <_read_r+0x1e>
 80076f0:	6023      	str	r3, [r4, #0]
 80076f2:	bd38      	pop	{r3, r4, r5, pc}
 80076f4:	20005dc4 	.word	0x20005dc4

080076f8 <_init>:
 80076f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076fa:	bf00      	nop
 80076fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076fe:	bc08      	pop	{r3}
 8007700:	469e      	mov	lr, r3
 8007702:	4770      	bx	lr

08007704 <_fini>:
 8007704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007706:	bf00      	nop
 8007708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800770a:	bc08      	pop	{r3}
 800770c:	469e      	mov	lr, r3
 800770e:	4770      	bx	lr
